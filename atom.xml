<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lippi-浮生志</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ezlippi.com/"/>
  <updated>2016-03-25T02:27:04.000Z</updated>
  <id>http://www.ezlippi.com/</id>
  
  <author>
    <name>EZLippi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android APK签名详解</title>
    <link href="http://www.ezlippi.com//blog/2016/03/android-apk-signing.html"/>
    <id>http://www.ezlippi.com//blog/2016/03/android-apk-signing.html</id>
    <published>2016-03-23T11:16:21.000Z</published>
    <updated>2016-03-25T02:27:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;App为什么需要签名？&quot;&gt;&lt;a href=&quot;#App为什么需要签名？&quot; class=&quot;headerlink&quot; title=&quot;App为什么需要签名？&quot;&gt;&lt;/a&gt;App为什么需要签名？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对Apk的完整性和发布机构唯一性的校验&lt;/li&gt;
&lt;li&gt;签名之后无法阻止APK被人修改，但修改后再签名就和原先的签名不一致，可以避免有些人用相同包名的APK来替换已有的应用&lt;/li&gt;
&lt;li&gt;相同签名的升级软件可以覆盖安装旧版本的软件&lt;/li&gt;
&lt;li&gt;签名的私钥在开发者那里，公钥打包在APK内，不同公钥对应不同私钥，通过比较公钥可以判断私钥是否一致&lt;/li&gt;
&lt;li&gt;允许代码和数据共享。android中提供了一个基于签名的Permission标签。通过允许的设置，我们可以实现对不同App之间的访问和共享，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AndroidManifest.xml：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:protectionLevel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;normal&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中protectionLevel标签有4种值：normal(缺省值),dangerous, signature,signatureOrSystem。normal是低风险的，所有的App不能访问和共享此App。dangerous是高风险的，所有的App都能访问和共享此App。signature是指具有相同签名的App可以访问和共享此App。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用SDK工具生成的DEBUG-Key签名&quot;&gt;&lt;a href=&quot;#使用SDK工具生成的DEBUG-Key签名&quot; class=&quot;headerlink&quot; title=&quot;使用SDK工具生成的DEBUG Key签名&quot;&gt;&lt;/a&gt;使用SDK工具生成的DEBUG Key签名&lt;/h2&gt;&lt;p&gt;Android签名有两种方式：DEBUG和RELEASE,在开发测试期间使用DEBUG方式，BUILD时，会自动使用工具KeyTools创建KEY包括别名和密码。每次编译时，都会使用DEBUG的KEY进行签名。&lt;br&gt;在第一次安装Android开发环境的时候，SDK工具已经创建了缺省的keystore/key和账号、密码：&lt;/p&gt;
&lt;figure class=&quot;highlight vbnet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Keystore name – &lt;span class=&quot;string&quot;&gt;&quot;debug.keystore&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keystore password – &lt;span class=&quot;string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;alias&lt;/span&gt; – &lt;span class=&quot;string&quot;&gt;&quot;androiddebugkey&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Key&lt;/span&gt; password – &lt;span class=&quot;string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CN – &lt;span class=&quot;string&quot;&gt;&quot;CN=Android Debug,O=Android,C=US&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;keystore其实就是一个文件，存放以上信息的文件，由于使用了加密难以看懂。DEBUG模式的签名只有365天有效期,过了有效期，编译会出错。但不用担心，只要将debug.keystore文件删除后，下次BUILD会自动生成的keystore和key的。debug.keystore文件一般在/home/username/.android目录下。&lt;/p&gt;
&lt;h2 id=&quot;使用java命令行工具&quot;&gt;&lt;a href=&quot;#使用java命令行工具&quot; class=&quot;headerlink&quot; title=&quot;使用java命令行工具&quot;&gt;&lt;/a&gt;使用java命令行工具&lt;/h2&gt;&lt;h3 id=&quot;使用Keytool生成key文件&quot;&gt;&lt;a href=&quot;#使用Keytool生成key文件&quot; class=&quot;headerlink&quot; title=&quot;使用Keytool生成key文件&quot;&gt;&lt;/a&gt;使用Keytool生成key文件&lt;/h3&gt;&lt;p&gt;创建key，需要用到keytool(位于JAVA_HOME\jre\bin目录下),在Shell中输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keytool -genkey -alias android.keystore -keyalg RSA -validity &lt;span class=&quot;number&quot;&gt;36500&lt;/span&gt; -keystore android.keystore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令行参数解释：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;genkey:&lt;/span&gt;产生秘钥&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alias&lt;/span&gt; android.keystore 别名 android.keystore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;keyalg &lt;span class=&quot;constant&quot;&gt;RSA&lt;/span&gt; 使用&lt;span class=&quot;constant&quot;&gt;RSA&lt;/span&gt;算法对签名加密&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;validity &lt;span class=&quot;number&quot;&gt;36500&lt;/span&gt; 有效期限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;keystore android.keystore  存储的文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用-jarsigner签名&quot;&gt;&lt;a href=&quot;#使用-jarsigner签名&quot; class=&quot;headerlink&quot; title=&quot;使用 jarsigner签名&quot;&gt;&lt;/a&gt;使用 jarsigner签名&lt;/h3&gt;&lt;p&gt;jarsigner在目录JAVA_HOME\bin下，在Shell中输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jarsigner -verbose -keystore android.keystore -signedjar android_signed.apk android.apk android.keystore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令行参数解释：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-verbose 输出签名的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-keystore  android&lt;span class=&quot;class&quot;&gt;.keystore&lt;/span&gt; 密钥库位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-signedjar android_signed&lt;span class=&quot;class&quot;&gt;.apk&lt;/span&gt; android&lt;span class=&quot;class&quot;&gt;.apk&lt;/span&gt; android&lt;span class=&quot;class&quot;&gt;.keystore&lt;/span&gt; 正式签名，三个参数中依次为签名后产生的文件android_signed，要签名的文件android.apk和密钥库android.keystore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;zipalign压缩对齐优化APK文件&quot;&gt;&lt;a href=&quot;#zipalign压缩对齐优化APK文件&quot; class=&quot;headerlink&quot; title=&quot;zipalign压缩对齐优化APK文件&quot;&gt;&lt;/a&gt;zipalign压缩对齐优化APK文件&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;zipalign&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;-v&lt;/span&gt; 4 &lt;span class=&quot;tag&quot;&gt;android_signed&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.apk&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.apk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;zipalign能够使apk文件中未压缩的数据在4个字节边界上对齐，这样android系统可以使用mmap()函数读取文件，在读取资源上获得较高的性能。&lt;/p&gt;
&lt;p&gt;android系统中的Davlik虚拟机使用自己专有的格式DEX，DEX的结构是紧凑的，为了让运行时的性能更好，可以进一步用”对齐”进一步优化，但是大小一般会有所增加。&lt;/p&gt;
&lt;h2 id=&quot;使用Gradle完成签名&quot;&gt;&lt;a href=&quot;#使用Gradle完成签名&quot; class=&quot;headerlink&quot; title=&quot;使用Gradle完成签名&quot;&gt;&lt;/a&gt;使用Gradle完成签名&lt;/h2&gt;&lt;p&gt;前面已经介绍了DEBUG模式的签名，这里主要讲Release模式：&lt;br&gt;在Module的build.gradle文件的android配置代码块添加如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signingConfigs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storeFile &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/home/lippi/.android/debug.keystore&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        relealse &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//这样写就得把demo.jk文件放在项目目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storeFile &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;android.keystore&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            storePassword &lt;span class=&quot;string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyAlias &lt;span class=&quot;string&quot;&gt;&quot;lippi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyPassword &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 显示Log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            buildConfigField &lt;span class=&quot;string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;LOG_DEBUG&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionNameSuffix &lt;span class=&quot;string&quot;&gt;&quot;-debug&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zipAlignEnabled &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            shrinkResources &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            signingConfig signingConfigs.debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 不显示Log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            buildConfigField &lt;span class=&quot;string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;LOG_DEBUG&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//混淆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Zipalign优化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zipAlignEnabled &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 移除无用的resource文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            shrinkResources &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proguardFiles getDefaultProguardFile(&lt;span class=&quot;string&quot;&gt;&#39;proguard-android.txt&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;proguard.cfg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//签名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            signingConfig signingConfigs.relealse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行gradle 命令，&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;gradle assembleRelease&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译并发布。 在build/outputs/apk/ 下能看到未签名的apk 和 已经签名的apk。如果未用签名文件，使用debug mode的debug签名，那就会生成一个debug签名的apk。&lt;/p&gt;
&lt;h3 id=&quot;签名密码放在Gradle文件中不安全&quot;&gt;&lt;a href=&quot;#签名密码放在Gradle文件中不安全&quot; class=&quot;headerlink&quot; title=&quot;签名密码放在Gradle文件中不安全&quot;&gt;&lt;/a&gt;签名密码放在Gradle文件中不安全&lt;/h3&gt;&lt;p&gt;可以改成下面这样的格式这样在执行命令时，就会被要求输入密码&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;signingConfigs &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myConfig &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        storeFile &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;android.keystore&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        storePassword System.console().readLine(&lt;span class=&quot;string&quot;&gt;&quot;\ninput Keystore password: &quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyAlias &lt;span class=&quot;string&quot;&gt;&quot;lippi&quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyPassword System.console().readLine(&lt;span class=&quot;string&quot;&gt;&quot;\n input Key password: &quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用Android-Studio自带的签名工具&quot;&gt;&lt;a href=&quot;#使用Android-Studio自带的签名工具&quot; class=&quot;headerlink&quot; title=&quot;使用Android Studio自带的签名工具&quot;&gt;&lt;/a&gt;使用Android Studio自带的签名工具&lt;/h2&gt;&lt;p&gt;菜单Build &amp;gt; Generate Signed APK,具体的就不介绍了，看了前面的部分应该很简单完成。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;App为什么需要签名？&quot;&gt;&lt;a href=&quot;#App为什么需要签名？&quot; class=&quot;headerlink&quot; title=&quot;App为什么需要签名？&quot;&gt;&lt;/a&gt;App为什么需要签名？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对Apk的完整性和发布机构唯一性的校验&lt;/li&gt;
&lt;li&gt;签名之后无法阻止APK被人修改，但修改后再签名就和原先的签名不一致，可以避免有些人用相同包名的APK来替换已有的应用&lt;/li&gt;
&lt;li&gt;相同签名的升级软件可以覆盖安装旧版本的软件&lt;/li&gt;
&lt;li&gt;签名的私钥在开发者那里，公钥打包在APK内，不同公钥对应不同私钥，通过比较公钥可以判断私钥是否一致&lt;/li&gt;
&lt;li&gt;允许代码和数据共享。android中提供了一个基于签名的Permission标签。通过允许的设置，我们可以实现对不同App之间的访问和共享，如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AndroidManifest.xml：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;android:protectionLevel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;normal&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中protectionLevel标签有4种值：normal(缺省值),dangerous, signature,signatureOrSystem。normal是低风险的，所有的App不能访问和共享此App。dangerous是高风险的，所有的App都能访问和共享此App。signature是指具有相同签名的App可以访问和共享此App。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.ezlippi.com/categories/Android/"/>
    
    
      <category term="APK" scheme="http://www.ezlippi.com/tags/APK/"/>
    
      <category term="Android" scheme="http://www.ezlippi.com/tags/Android/"/>
    
      <category term="签名" scheme="http://www.ezlippi.com/tags/%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android反编译(逆向)教程</title>
    <link href="http://www.ezlippi.com//blog/2016/03/android-apk-classy.html"/>
    <id>http://www.ezlippi.com//blog/2016/03/android-apk-classy.html</id>
    <published>2016-03-20T10:16:21.000Z</published>
    <updated>2016-03-20T11:44:57.000Z</updated>
    
    <content type="html">&lt;p&gt;在网上搜索Android反编译教程，搜出来的文章要么是抄袭的，要么是太过与简单，经过自己的实践和摸索，我在这里记录下如下反编译一个Apk并修改一些资源文件，比如App名字、启动界面等，然后重新打包成apk,你可以参照这个教程修改游戏里的金币(估计没这么简单)。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;还是常用的三个工具：Apktool、dex2jar、jd-gui&lt;/p&gt;
&lt;h2 id=&quot;Apktool&quot;&gt;&lt;a href=&quot;#Apktool&quot; class=&quot;headerlink&quot; title=&quot;Apktool&quot;&gt;&lt;/a&gt;Apktool&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;http://ibotpeaches.github.io/Apktool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apktool&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linux下安装教程：&quot;&gt;&lt;a href=&quot;#Linux下安装教程：&quot; class=&quot;headerlink&quot; title=&quot;Linux下安装教程：&quot;&gt;&lt;/a&gt;Linux下安装教程：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&quot;https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux wrapper script&lt;/a&gt; (鼠标右键另存为apktool)&lt;/li&gt;
&lt;li&gt;从&lt;a href=&quot;http://ibotpeaches.github.io/Apktool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载最新版的apktool&lt;/li&gt;
&lt;li&gt;把下载的Jar文件重命名为apktool.jar&lt;/li&gt;
&lt;li&gt;把两个文件(apktool.jar &amp;amp; apktool)移动到/usr/local/bin (需要root权限)，使用chmod +x添加执行权限&lt;/li&gt;
&lt;li&gt;现在可以通过命令行来运行apktool了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;使用方式：&lt;br&gt;1.反编译&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apktool d test.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;反编译后在home目录下生成了一个文件夹，内容如下：&lt;br&gt;&lt;img src=&quot;/images/apktool.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;各个文件简单介绍如下：&lt;br&gt;apktool.yml: apk属性.&lt;br&gt;AndroidManifest.xml: 清单文件, 非二进制.&lt;br&gt;original: 原始数据, 应用的二进制清单和签名.&lt;br&gt;res: 资源文件.&lt;br&gt;smali: dex解析的代码.smali是dex虚拟机的解析格式,在 dex2jar中,也包含smali格式的转换.&lt;/p&gt;
&lt;p&gt;打开AndroidManifest文件，内容如下：&lt;br&gt;&lt;img src=&quot;/images/apktool2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以看到app_name和app的图标：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:icon=&quot;@drawable/icon_meetyou&quot; android:label=&quot;@string/app_name&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们修改res/values/strings.xml下app_name的内容，并替换app图标&lt;br&gt;2.重新打包成apk&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apktool b &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打包后在dist文件夹下生成新的apk文件。&lt;/p&gt;
&lt;h2 id=&quot;dex2jar&quot;&gt;&lt;a href=&quot;#dex2jar&quot; class=&quot;headerlink&quot; title=&quot;dex2jar&quot;&gt;&lt;/a&gt;dex2jar&lt;/h2&gt;&lt;p&gt;dex2jar是dex转换为jar的工具，很多人不会看smali文件，还是看java类文件比较舒服，这个时候可以借助这个工具来转成java代码。&lt;br&gt;下载地址:&lt;a href=&quot;https://github.com/pxb1988/dex2jar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dex2jar&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;从Apk中解压出class.dex，使用dex2jar进行源码解析，在当前目录生成classes.dex.dex2jar.jar。&lt;br&gt;转换过程中, 如果发生内存不够, 修改 d2j_invoke.sh 的虚拟机配置.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -Xms512m -Xmx1024m -classpath &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;_classpath&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来使用JD-GUI打开jar包，下载地址:&lt;a href=&quot;http://jd.benow.ca/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jd-gui&lt;/a&gt;&lt;br&gt;界面如下所示:&lt;br&gt;&lt;img src=&quot;/images/jdgui.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;其他工具&quot;&gt;&lt;a href=&quot;#其他工具&quot; class=&quot;headerlink&quot; title=&quot;其他工具&quot;&gt;&lt;/a&gt;其他工具&lt;/h2&gt;&lt;h3 id=&quot;android-killer&quot;&gt;&lt;a href=&quot;#android-killer&quot; class=&quot;headerlink&quot; title=&quot;android killer&quot;&gt;&lt;/a&gt;android killer&lt;/h3&gt;&lt;p&gt;集成了上面几个工具，并添加了一些功能&lt;br&gt;下载地址：&lt;a href=&quot;http://pan.baidu.com/s/1dEy0VVN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;androidkiller&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ClassyShark&quot;&gt;&lt;a href=&quot;#ClassyShark&quot; class=&quot;headerlink&quot; title=&quot;ClassyShark&quot;&gt;&lt;/a&gt;ClassyShark&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/google/android-classyshark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClassyShark是一款可以查看Android可执行文件的浏览工具，支持.dex, .aar, .so, .apk, .jar, .class, .xml 等文件格式，分析里面的内容包括classes.dex文件，包、方法数量、类、字符串、使用的NativeLibrary等。&lt;/p&gt;
&lt;h4 id=&quot;使用方法-1&quot;&gt;&lt;a href=&quot;#使用方法-1&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h4&gt;&lt;p&gt;1.打开apk文件java -jar ClassyShark.jar -open &lt;your_apk.apk&gt;&lt;br&gt;2.将生成的所有数据导出到文本文件里java -jar ClassyShark.jar -dump &lt;binary_file&gt;&lt;br&gt;3.将指定类生成的文件导出到文本文件里java -jar ClassyShark.jar -dump &lt;binary_file&gt; &lt;fully_qualified_class_name&gt;&lt;br&gt;4.打开ClassyShark，在GUI界面展示某特定的类&lt;br&gt;5.java -jar ClassyShark.jar -open &lt;binary_file&gt; &lt;fully_qualified_class_name&gt;&lt;br&gt;6.检测APKjava -jar ClassyShark.jar -inspect &lt;your_apk.apk&gt;&lt;br&gt;7.导出所有的字符串 java -jar ClassyShark.jar -stringdump &lt;your_apk.apk&gt;&lt;/your_apk.apk&gt;&lt;/your_apk.apk&gt;&lt;/fully_qualified_class_name&gt;&lt;/binary_file&gt;&lt;/fully_qualified_class_name&gt;&lt;/binary_file&gt;&lt;/binary_file&gt;&lt;/your_apk.apk&gt;&lt;/p&gt;
&lt;p&gt;和其他的工具不同，ClassyShark通过分析App的项目结构和引用库的信息，我们大致掌握了该项目的架构，一些开发中的经验和不足，拓宽下开发视野，发现一些好用的开源库，增强我们的武器，这些都是我们在开发中可以借鉴的东西。比如我们查看美团App的结构，看它使用了哪些开源库，界面如下所示：&lt;br&gt;&lt;img src=&quot;/images/classshark.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在网上搜索Android反编译教程，搜出来的文章要么是抄袭的，要么是太过与简单，经过自己的实践和摸索，我在这里记录下如下反编译一个Apk并修改一些资源文件，比如App名字、启动界面等，然后重新打包成apk,你可以参照这个教程修改游戏里的金币(估计没这么简单)。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.ezlippi.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.ezlippi.com/tags/Android/"/>
    
      <category term="反编译" scheme="http://www.ezlippi.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="逆向" scheme="http://www.ezlippi.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll迁移到Hexo搭建个人博客</title>
    <link href="http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html"/>
    <id>http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2016-03-20T09:24:27.000Z</updated>
    
    <content type="html">&lt;p&gt;个人博客以前由jekyll搭建，主要问题是目录、Rss、sitemap无法自动生成，根据DRY的原则在网上找了下答案，最终发现了用Hexo来搭建博客的方法，配置完之后一劳永逸，目录、Rss和sitemap都是自动生成，解决了我之前的困惑。&lt;/p&gt;
&lt;h2 id=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;a href=&quot;#从Jekyll迁移到Hexo&quot; class=&quot;headerlink&quot; title=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;/a&gt;从Jekyll迁移到Hexo&lt;/h2&gt;&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir hexo  &lt;span class=&quot;comment&quot;&gt;#创建一个文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;部署Hexo：在Git shell 中输入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;安装Hexo 插件：自动生成sitemap,Rss，部署到git等，建议安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-index --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-archive --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-category --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-tag --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-server --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-heroku --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-rsync --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-openshift --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-marked@&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-stylus@&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-sitemap@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Hexo常用的几个命令&quot;&gt;&lt;a href=&quot;#Hexo常用的几个命令&quot; class=&quot;headerlink&quot; title=&quot;Hexo常用的几个命令&quot;&gt;&lt;/a&gt;Hexo常用的几个命令&lt;/h2&gt;&lt;h3 id=&quot;创建新博文&quot;&gt;&lt;a href=&quot;#创建新博文&quot; class=&quot;headerlink&quot; title=&quot;创建新博文&quot;&gt;&lt;/a&gt;创建新博文&lt;/h3&gt;&lt;p&gt;执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new [layout] &lt;span class=&quot;string&quot;&gt;&quot;postName&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#新建文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;#123; &amp;#123; title &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &amp;#123; &amp;#123; date &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;#123; &amp;#123; title &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &amp;#123; &amp;#123; date &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多信息参考: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行服务器&quot;&gt;&lt;a href=&quot;#运行服务器&quot; class=&quot;headerlink&quot; title=&quot;运行服务器&quot;&gt;&lt;/a&gt;运行服务器&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;生成静态站点文件&quot;&gt;&lt;a href=&quot;#生成静态站点文件&quot; class=&quot;headerlink&quot; title=&quot;生成静态站点文件&quot;&gt;&lt;/a&gt;生成静态站点文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;部署到Git&quot;&gt;&lt;a href=&quot;#部署到Git&quot; class=&quot;headerlink&quot; title=&quot;部署到Git&quot;&gt;&lt;/a&gt;部署到Git&lt;/h3&gt;&lt;p&gt;部署到Github前需要配置_config.yml文件&lt;/p&gt;
&lt;p&gt;添加如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	repository: git@github.com:EZLippi/EZLippi.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;fancybox&quot;&gt;&lt;a href=&quot;#fancybox&quot; class=&quot;headerlink&quot; title=&quot;fancybox&quot;&gt;&lt;/a&gt;fancybox&lt;/h2&gt;&lt;p&gt;可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。&lt;br&gt;很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: Jekyll迁移到Hexo建立个人博客&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;photos:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- http://bruce.u.qiniudn.com/&lt;span class=&quot;number&quot;&gt;2013&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;/reading/photos-&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- http://bruce.u.qiniudn.com/&lt;span class=&quot;number&quot;&gt;2013&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;/reading/photos-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;主题设置&quot;&gt;&lt;a href=&quot;#主题设置&quot; class=&quot;headerlink&quot; title=&quot;主题设置&quot;&gt;&lt;/a&gt;主题设置&lt;/h2&gt;&lt;p&gt;本博客采用了iissnan的Next主题，他的博客有详细的安装教程，这里贴下链接&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next&lt;/a&gt;，有需要的朋友直接参考他写的教程，一气呵成~&lt;/p&gt;
&lt;h3 id=&quot;下载主题&quot;&gt;&lt;a href=&quot;#下载主题&quot; class=&quot;headerlink&quot; title=&quot;下载主题&quot;&gt;&lt;/a&gt;下载主题&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/iissnan/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;应用Hexo主题&quot;&gt;&lt;a href=&quot;#应用Hexo主题&quot; class=&quot;headerlink&quot; title=&quot;应用Hexo主题&quot;&gt;&lt;/a&gt;应用Hexo主题&lt;/h3&gt;&lt;p&gt;在hexo目录下找到_config.yml配置文件，找到 theme 字段，并将其值更改为 next，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;设置RSS&quot;&gt;&lt;a href=&quot;#设置RSS&quot; class=&quot;headerlink&quot; title=&quot;设置RSS&quot;&gt;&lt;/a&gt;设置RSS&lt;/h3&gt;&lt;p&gt;在上面的步骤中已经安装了Rss插件，只要要在themes\next_config.yml配置文件中添加如下一行即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rss：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加标签tags页面&quot;&gt;&lt;a href=&quot;#添加标签tags页面&quot; class=&quot;headerlink&quot; title=&quot;添加标签tags页面&quot;&gt;&lt;/a&gt;添加标签tags页面&lt;/h3&gt;&lt;p&gt;定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new page tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内容如下所示，如果要关闭tags页面的评论可以设置comments为false：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: 标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样以后tags页面在每次执行hexo generate后自动更新。&lt;/p&gt;
&lt;h3 id=&quot;添加分类页面&quot;&gt;&lt;a href=&quot;#添加分类页面&quot; class=&quot;headerlink&quot; title=&quot;添加分类页面&quot;&gt;&lt;/a&gt;添加分类页面&lt;/h3&gt;&lt;p&gt;和上面的一样，在hexo目录下执行下面命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new page categories&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内容为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: 分类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;categories&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加404页面&quot;&gt;&lt;a href=&quot;#添加404页面&quot; class=&quot;headerlink&quot; title=&quot;添加404页面&quot;&gt;&lt;/a&gt;添加404页面&lt;/h3&gt;&lt;p&gt;新建一个404.html文件，放到themes\next\source目录下，内容你自己定。&lt;/p&gt;
&lt;h3 id=&quot;代码高亮&quot;&gt;&lt;a href=&quot;#代码高亮&quot; class=&quot;headerlink&quot; title=&quot;代码高亮&quot;&gt;&lt;/a&gt;代码高亮&lt;/h3&gt;&lt;p&gt;以前jekyll代码高亮需要用到pygments插件，Hexo下更加简单，只需要按照下面的格式：&lt;br&gt;&lt;img src=&quot;/images/highlight.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;效果如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;hello hexo!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也可以更改代码高亮的主题，一共有五种，可选的值有 normal，night， night blue， night bright， night eighties，修改themes\next_config.yml文件，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;highlight_theme: normal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;第三方服务&quot;&gt;&lt;a href=&quot;#第三方服务&quot; class=&quot;headerlink&quot; title=&quot;第三方服务&quot;&gt;&lt;/a&gt;第三方服务&lt;/h2&gt;&lt;h3 id=&quot;多说评论&quot;&gt;&lt;a href=&quot;#多说评论&quot; class=&quot;headerlink&quot; title=&quot;多说评论&quot;&gt;&lt;/a&gt;多说评论&lt;/h3&gt;&lt;p&gt;登录多说官网，登录后点我要安装，然后填写站点相关信息，最主要的是duoshuo_shortname这个字段，设置后之后修改themes\next_config.yml文件，把duoshuo_shortname改成你的，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_shortname: ezlippi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;百度统计&quot;&gt;&lt;a href=&quot;#百度统计&quot; class=&quot;headerlink&quot; title=&quot;百度统计&quot;&gt;&lt;/a&gt;百度统计&lt;/h3&gt;&lt;p&gt;登录百度统计，转到获取代码截面，找到百度统计脚本id，然后把themes\next_config.yml文件下的baidu_analytics字段改成你的id，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;baidu_analytics: &lt;span class=&quot;number&quot;&gt;340874&lt;/span&gt;ba9357cbe81570aa4ac1185941&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;站内搜索&quot;&gt;&lt;a href=&quot;#站内搜索&quot; class=&quot;headerlink&quot; title=&quot;站内搜索&quot;&gt;&lt;/a&gt;站内搜索&lt;/h3&gt;&lt;p&gt;next主题集成了swiftype搜索，你需要到swiftype配置一个搜索引擎， 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考：&lt;a href=&quot;http://theme-next.iissnan.com/third-party-services.html#swfitype&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swfitype教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他设置&quot;&gt;&lt;a href=&quot;#其他设置&quot; class=&quot;headerlink&quot; title=&quot;其他设置&quot;&gt;&lt;/a&gt;其他设置&lt;/h3&gt;&lt;p&gt;其他设置比如侧边栏、友情链接、菜单栏等请参考&lt;a href=&quot;http://theme-next.iissnan.com/theme-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next主题配置教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后附上我的站点配置文件，如果有不懂的可以给我留言或者发邮件。&lt;br&gt;_config.yml配置文件内容如下：&lt;/p&gt;
&lt;p&gt;站点配置文件：&lt;br&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Hexo Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Docs: http://hexo.io/docs/configuration.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Source: https://github.com/hexojs/hexo/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Site&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;title:&lt;/span&gt; Lippi-浮生志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;subtitle:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;description:&lt;/span&gt; Easy Lippi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;author:&lt;/span&gt; EZLippi &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;language:&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;zh&lt;/span&gt;-Hans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;timezone:&lt;/span&gt; Asia/Shanghai&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;url:&lt;/span&gt; http://www.ezlippi.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;root:&lt;/span&gt; /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;permalink:&lt;/span&gt; /blog/:year/:month/:title.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;permalink_defaults:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;source_dir:&lt;/span&gt; source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;public_dir:&lt;/span&gt; public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;tag_dir:&lt;/span&gt; tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;archive_dir:&lt;/span&gt; archives&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;category_dir:&lt;/span&gt; categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;code_dir:&lt;/span&gt; downloads/code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;i18n_dir:&lt;/span&gt; :lang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;skip_render:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Writing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;new_post_name:&lt;/span&gt; :year-:month-:day-:title.md &lt;span class=&quot;preprocessor&quot;&gt;# File name of new posts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;default_layout:&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;titlecase:&lt;/span&gt; false &lt;span class=&quot;preprocessor&quot;&gt;# Transform title into titlecase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;external_link:&lt;/span&gt; true &lt;span class=&quot;preprocessor&quot;&gt;# Open external links in new tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;filename_case:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;render_drafts:&lt;/span&gt; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;post_asset_folder:&lt;/span&gt; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;relative_link:&lt;/span&gt; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;future:&lt;/span&gt; true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;highlight:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  line_number: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  auto_detect: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tab_replace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Category &amp;amp; Tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;default_category:&lt;/span&gt; uncategorized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;category_map:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;tag_map:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Date / Time format&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Hexo uses Moment.js to parse and display date&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## You can customize the date format as defined in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## http://momentjs.com/docs/#/displaying/format/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;date_format:&lt;/span&gt; YYYY-MM-DD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;time_format:&lt;/span&gt; HH:mm:ss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Pagination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Set per_page to 0 to disable pagination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;per_page:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;pagination_dir:&lt;/span&gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Extensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Plugins: http://hexo.io/plugins/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Themes: http://hexo.io/themes/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;theme:&lt;/span&gt; next &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#since: 2014&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;## Docs: http://hexo.io/docs/deployment.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: git@github.com:EZLippi/EZLippi.github.io.git &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  coding.net: git@git.coding.net:ezlippi/ezlippi.git,coding-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主题配置文件：&lt;br&gt;&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Site Information Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Place your favicon.ico to /source directory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;favicon: /favicon.ico&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Set default keywords (Use a comma to separate)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keywords: &lt;span class=&quot;string&quot;&gt;&quot;Hexo, NexT&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Set rss to false to disable feed link.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Leave rss as empty to use site&#39;s feed link.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Set rss to specific value if you have burned your feed already.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rss:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Specify the date when the site was setup&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;since: &lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Menu Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# When running hexo in a subdirectory (e.g. domain.tld/blog)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Remove leading slashes ( &quot;/archives&quot; -&amp;gt; &quot;archives&quot; )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menu:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  home: /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  categories: /categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  archives: /archives&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tags: /tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  about: /about&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#  commonweal: /404.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Enable/Disable menu icons.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Icon Mapping:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#   Map a menu item to a specific FontAwesome icon name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#   Key is the name of menu item and value is the name of FontAwsome icon.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#   When an question mask icon presenting up means that the item has no mapping icon.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menu_icons:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # Icon Mapping.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  home: home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  about: user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  categories: th&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tags: tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  archives: archive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  commonweal: heartbeat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Scheme Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Schemes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#scheme: Muse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scheme: Mist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#scheme: Pisces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Sidebar Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Social links&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;social:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  GitHub: https:&lt;span class=&quot;comment&quot;&gt;//github.com/EZLippi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  weibo: http:&lt;span class=&quot;comment&quot;&gt;//weibo.com/ouyanglip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  zhihu: http:&lt;span class=&quot;comment&quot;&gt;//www.zhihu.com/people/lippi-ouyang&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #Others:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Social Icons&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;social_icons:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # Icon Mappings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  GitHub: github&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Twitter: twitter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  weibo: weibo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  zhihu: weibo &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Sidebar Avatar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# in theme directory(source/images): /images/avatar.jpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# in site  directory(source/uploads): /uploads/avatar.jpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# default : /images/default_avatar.jpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avatar: /images/avatar.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# TOC in the Sidebar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # Automatically add list number to toc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  number: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Creative Commons 4.0 International License.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# http://creativecommons.org/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#creative_commons: by-nc-sa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#creative_commons:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sidebar:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # Sidebar Position, available value: left | right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position: left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #position: right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # Sidebar Display, available value:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #  - post    expand on posts automatically. Default.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #  - always  expand &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all pages automatically&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #  - hide    expand only when click on the sidebar toggle icon.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #  - remove  Totally remove sidebar including sidebar toggle icon.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display: post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #display: always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #display: hide&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #display: remove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Misc Theme Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Custom Logo.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# !!Only available for Default Scheme currently.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#   enabled: [true/false] - Replace with specific image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#   image: url-of-image   - Images&#39;s url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;custom_logo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enabled: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  image:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Code Highlight theme&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Available value:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#    normal | night | night eighties | night blue | night bright&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# https://github.com/chriskempson/tomorrow-theme&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight_theme: night &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Automatically scroll page to section which is under &amp;lt;!-- more --&amp;gt; mark.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scroll_to_more: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Automatically Excerpt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto_excerpt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  length: &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Use Lato font&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_font_lato: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Third Party Services Settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# MathJax Support&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mathjax:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Swiftype Search API Key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swiftype_key: fLM9qfxyerC6njvM7usy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Baidu Analytics ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baidu_analytics: &lt;span class=&quot;number&quot;&gt;340874&lt;/span&gt;ba9357cbe81570aa4ac1185941&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Duoshuo ShortName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_shortname: ezlippi &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Disqus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#disqus_shortname:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Share&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#jiathis:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#add_this_id:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Share&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_share: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# 多说热评文章 true 或者 false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_hotartical: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Google Webmaster tools verification setting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# See: https://www.google.com/webmasters/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#google_site_verification:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Google Analytics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#google_analytics:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Make duoshuo show UA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# user_id must NOT be null when admin_enable is true!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# you can visit http://dev.duoshuo.com get duoshuo user id.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;duoshuo_info:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ua_enable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  admin_enable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  user_id: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #admin_nickname: ROOT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Facebook SDK Support.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# https://github.com/iissnan/hexo-theme-next/pull/410&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;facebook_sdk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  app_id:       #&amp;lt;app_id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fb_admin:     #&amp;lt;user_id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  like_button:  #&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  webmaster:    #&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Show number of visitors to each article.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# You can visit https://leancloud.cn get AppID and AppKey.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;leancloud_visitors:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  app_id: #&amp;lt;app_id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  app_key: #&amp;lt;app_key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Tencent analytics ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# tencent_analytics:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#! ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#! DO NOT EDIT THE FOLLOWING SETTINGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#! UNLESS YOU KNOW WHAT YOU ARE DOING&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#! ---------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Motion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_motion: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Fancybox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fancybox: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Static files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vendors: vendors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;css: css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js: js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;images: images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# Theme version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version: &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# title, chinese available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;links_title: 友情链接 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;# # links&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;links:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   MacTalk: http:&lt;span class=&quot;comment&quot;&gt;//macshuo.com/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://sunwhut.com/2015/10/30/buildBlog/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何利用GitHub Pages和Hexo快速搭建个人博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Next主题&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客以前由jekyll搭建，主要问题是目录、Rss、sitemap无法自动生成，根据DRY的原则在网上找了下答案，最终发现了用Hexo来搭建博客的方法，配置完之后一劳永逸，目录、Rss和sitemap都是自动生成，解决了我之前的困惑。&lt;/p&gt;
&lt;h2 id=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;a href=&quot;#从Jekyll迁移到Hexo&quot; class=&quot;headerlink&quot; title=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;/a&gt;从Jekyll迁移到Hexo&lt;/h2&gt;&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir hexo  &lt;span class=&quot;comment&quot;&gt;#创建一个文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git操作手册|命令速查表</title>
    <link href="http://www.ezlippi.com//blog/2016/02/git-guide.html"/>
    <id>http://www.ezlippi.com//blog/2016/02/git-guide.html</id>
    <published>2016-02-19T16:00:00.000Z</published>
    <updated>2016-02-29T12:30:22.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。&lt;br&gt;本文分为以下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git与SVN差异&lt;/li&gt;
&lt;li&gt;Git常用命令&lt;/li&gt;
&lt;li&gt;Git进阶指南&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Git与SVN差异&quot;&gt;&lt;a href=&quot;#Git与SVN差异&quot; class=&quot;headerlink&quot; title=&quot;Git与SVN差异&quot;&gt;&lt;/a&gt;Git与SVN差异&lt;/h2&gt;&lt;p&gt;Git的第一个版本是Linux之父Linus Torvalds亲手操刀设计和实现的,Git 基于 DAG 结构 (Directed Acyclic Graph)，其运行起来相当的快,它已经是现在的主流。&lt;/p&gt;
&lt;p&gt;Git 和 SVN 思想最大的差别有四个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去中心化&lt;/li&gt;
&lt;li&gt;直接记录快照，而非差异&lt;/li&gt;
&lt;li&gt;不一样的分支概念&lt;/li&gt;
&lt;li&gt;三个文件状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;去中心化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git是一个DVCS（分布式版本管理系统），在技术层面上并不存在一个像中心仓库这样的东西 ， 所有的数据都在本地，不存在谁是中心&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/images/git.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中每个开发者拉取(pull)并推送(push)到origin。但除了这种集中式的推送拉取关系，每个开发者也可能会从其他的开发者处拉取代码的变更，从技术上讲，这意味着Alice定义了一个名为bob的Git的remote，它指向了Bob的软件仓库。反之亦然。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接记录快照，而非差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git每一个版本都是直接记录快照，而非文件的差异。 下面两个对比图在网上是广为流传大家应该熟悉：&lt;/p&gt;
&lt;p&gt;SVN：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/images/svn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/images/gitgit.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git使用SHA-1算法计算数据的校验和，通过文件的内容或目录计算出SHA-1哈希值，作为指纹字符串，每个Version 都是一个快照。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不一样的分支概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git的分支本质是一个指向提交快照的指针，是从某个提交快照往回看的历史。当创建/切换分支的时候，只是变换了指针指向而已.而SVN创建一个分支， 是的的确确的复制了一份文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三个文件状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Git中文件有三种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已提交（committed）：该文件被安全地保存在了本地数据库&lt;/li&gt;
&lt;li&gt;已修改（modified）：修改了某个文件，但还没有保存&lt;/li&gt;
&lt;li&gt;已暂存（staged）：把已修改的文件放下下次保存的清单中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h2&gt;&lt;h2 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h2&gt;&lt;p&gt;复制一个已创建的仓库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone ssh://user@domain.com/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个新的本地仓库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;本地修改&quot;&gt;&lt;a href=&quot;#本地修改&quot; class=&quot;headerlink&quot; title=&quot;本地修改&quot;&gt;&lt;/a&gt;本地修改&lt;/h2&gt;&lt;p&gt;显示工作路径下已修改的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示与上次提交版本文件的不同：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git diff
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把当前所有修改添加到下次提交中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把对某个文件的修改添加到下次提交中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交本地的所有修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交之前已标记的变化：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;附加消息提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;apos;message here&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交，并将提交时间设置为之前的某个日期:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --date=&amp;quot;`date --date=&amp;apos;n day ago&amp;apos;`&amp;quot; -am &amp;quot;Commit Message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;修改上次提交&quot;&gt;&lt;a href=&quot;#修改上次提交&quot; class=&quot;headerlink&quot; title=&quot;修改上次提交&quot;&gt;&lt;/a&gt;修改上次提交&lt;/h2&gt;&lt;p&gt;请勿修改已发布的提交记录!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把当前分支中未提交的修改移动到其他分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git stash
git checkout branch2
git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;搜索&quot;&gt;&lt;a href=&quot;#搜索&quot; class=&quot;headerlink&quot; title=&quot;搜索&quot;&gt;&lt;/a&gt;搜索&lt;/h2&gt;&lt;p&gt;从当前目录的所有文件中查找文本内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git grep &amp;quot;Hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在某一版本中搜索文本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git grep &amp;quot;Hello&amp;quot; v2.5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;提交历史&quot;&gt;&lt;a href=&quot;#提交历史&quot; class=&quot;headerlink&quot; title=&quot;提交历史&quot;&gt;&lt;/a&gt;提交历史&lt;/h2&gt;&lt;p&gt;从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示所有提交（仅显示提交的hash和message）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log --oneline
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示某个用户的所有提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log --author=&amp;quot;username&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示某个文件的所有修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;谁，在什么时间，修改了文件的什么内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;分支与标签&quot;&gt;&lt;a href=&quot;#分支与标签&quot; class=&quot;headerlink&quot; title=&quot;分支与标签&quot;&gt;&lt;/a&gt;分支与标签&lt;/h2&gt;&lt;p&gt;列出所有的分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;切换分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建并切换到新分支:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基于当前分支创建新分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch &amp;lt;new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基于远程分支创建新的可追溯的分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch --track &amp;lt;new-branch&amp;gt; &amp;lt;remote-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除本地分支:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git branch -d &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给当前版本打标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag &amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;更新与发布&quot;&gt;&lt;a href=&quot;#更新与发布&quot; class=&quot;headerlink&quot; title=&quot;更新与发布&quot;&gt;&lt;/a&gt;更新与发布&lt;/h2&gt;&lt;p&gt;列出当前配置的远程端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示远程端的信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote show &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加新的远程端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载远程端版本，但不合并到HEAD中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git fetch &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载远程端版本，并自动与HEAD版本合并：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote pull &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将远程端版本合并到本地版本中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将本地版本发布到远程端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push remote &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除远程端分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; :&amp;lt;branch&amp;gt; (since Git v1.5.0)
或
git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; (since Git v1.7.0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发布标签:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;合并与重置&quot;&gt;&lt;a href=&quot;#合并与重置&quot; class=&quot;headerlink&quot; title=&quot;合并与重置&quot;&gt;&lt;/a&gt;合并与重置&lt;/h2&gt;&lt;p&gt;将分支合并到当前HEAD中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将当前HEAD版本重置到分支中:&lt;br&gt;请勿重置已发布的提交!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rebase &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;退出重置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rebase --abort
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决冲突后继续重置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用配置好的merge tool 解决冲突：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git mergetool
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在编辑器中手动解决冲突后，标记文件为已解决冲突&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;resolved-file&amp;gt;
$ git rm &amp;lt;resolved-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;撤销&quot;&gt;&lt;a href=&quot;#撤销&quot; class=&quot;headerlink&quot; title=&quot;撤销&quot;&gt;&lt;/a&gt;撤销&lt;/h2&gt;&lt;p&gt;放弃工作目录下的所有修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;移除缓存区的所有文件（i.e. 撤销上次git add）:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;放弃某个文件的所有本地修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout HEAD &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重置一个提交（通过创建一个截然不同的新提交）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git revert &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --hard &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将HEAD重置到上一次提交的版本，并保留未提交的本地修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset --keep &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Git进阶指南&quot;&gt;&lt;a href=&quot;#Git进阶指南&quot; class=&quot;headerlink&quot; title=&quot;Git进阶指南&quot;&gt;&lt;/a&gt;Git进阶指南&lt;/h2&gt;&lt;h2 id=&quot;问：如何修改-origin-仓库信息？&quot;&gt;&lt;a href=&quot;#问：如何修改-origin-仓库信息？&quot; class=&quot;headerlink&quot; title=&quot;问：如何修改 origin 仓库信息？&quot;&gt;&lt;/a&gt;问：如何修改 origin 仓库信息？&lt;/h2&gt;&lt;h3 id=&quot;1、添加-origin-仓库信息&quot;&gt;&lt;a href=&quot;#1、添加-origin-仓库信息&quot; class=&quot;headerlink&quot; title=&quot;1、添加 origin 仓库信息&quot;&gt;&lt;/a&gt;1、添加 origin 仓库信息&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git remote add origin &amp;lt;git仓库地址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2、查看-origin-仓库信息&quot;&gt;&lt;a href=&quot;#2、查看-origin-仓库信息&quot; class=&quot;headerlink&quot; title=&quot;2、查看 origin 仓库信息&quot;&gt;&lt;/a&gt;2、查看 origin 仓库信息&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#以下三种方式均可
git config get --remote.origin.url
git remote -v
git remote show origin
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3、删除-origin-仓库信息&quot;&gt;&lt;a href=&quot;#3、删除-origin-仓库信息&quot; class=&quot;headerlink&quot; title=&quot;3、删除 origin 仓库信息&quot;&gt;&lt;/a&gt;3、删除 origin 仓库信息&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git remote rm origin
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问：如何配置-git-ssh-keys-？&quot;&gt;&lt;a href=&quot;#问：如何配置-git-ssh-keys-？&quot; class=&quot;headerlink&quot; title=&quot;问：如何配置 git ssh keys ？&quot;&gt;&lt;/a&gt;问：如何配置 git ssh keys ？&lt;/h2&gt;&lt;p&gt;在本地生成 ssh 私钥 / 公钥 文件&lt;br&gt;将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台&lt;br&gt;测试 git ssh 连接是否成功&lt;br&gt;接下来以添加 github ssh keys 为例，请注意替换 github 文件名。&lt;/p&gt;
&lt;p&gt;注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#运行以下命令，一直回车，文件名可随意指定
ssh-keygen -t rsa -b 4096 -C &amp;quot;kaiye@macbook&amp;quot; -f ~/.ssh/github

#如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain
ssh-add -K ~/.ssh/github

#将 pub 公钥的内容粘贴到线上网站的后台
cat ~/.ssh/github.pub

#测试 git ssh 是否连接成功
ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问：如何撤销修改？&quot;&gt;&lt;a href=&quot;#问：如何撤销修改？&quot; class=&quot;headerlink&quot; title=&quot;问：如何撤销修改？&quot;&gt;&lt;/a&gt;问：如何撤销修改？&lt;/h2&gt;&lt;p&gt;  修改包含四种情况，需单独区分。&lt;/p&gt;
&lt;h3 id=&quot;1、新建的文件和目录，且从未提交至版本库&quot;&gt;&lt;a href=&quot;#1、新建的文件和目录，且从未提交至版本库&quot; class=&quot;headerlink&quot; title=&quot;1、新建的文件和目录，且从未提交至版本库&quot;&gt;&lt;/a&gt;1、新建的文件和目录，且从未提交至版本库&lt;/h3&gt;&lt;p&gt;  此类文件的状态为 Untracked files ，撤销方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fd .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，. 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。&lt;/p&gt;
&lt;h3 id=&quot;2、提交过版本库，但未提交至暂存区的文件（未执行-git-add）&quot;&gt;&lt;a href=&quot;#2、提交过版本库，但未提交至暂存区的文件（未执行-git-add）&quot; class=&quot;headerlink&quot; title=&quot;2、提交过版本库，但未提交至暂存区的文件（未执行 git add）&quot;&gt;&lt;/a&gt;2、提交过版本库，但未提交至暂存区的文件（未执行 git add）&lt;/h3&gt;&lt;p&gt;  此类文件的状态为&lt;code&gt;Changes not staged for commit&lt;/code&gt;，撤销方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout .
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3、已提交至暂存区的文件&quot;&gt;&lt;a href=&quot;#3、已提交至暂存区的文件&quot; class=&quot;headerlink&quot; title=&quot;3、已提交至暂存区的文件&quot;&gt;&lt;/a&gt;3、已提交至暂存区的文件&lt;/h3&gt;&lt;p&gt;  此类文件的状态为 Changes to be committed，撤销方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 –hard 参数，将会把修改过的文件也还原成版本库中的版本。&lt;/p&gt;
&lt;h3 id=&quot;4、已提交至版本库（执行了-git-commit）&quot;&gt;&lt;a href=&quot;#4、已提交至版本库（执行了-git-commit）&quot; class=&quot;headerlink&quot; title=&quot;4、已提交至版本库（执行了 git commit）&quot;&gt;&lt;/a&gt;4、已提交至版本库（执行了 git commit）&lt;/h3&gt;&lt;p&gt;  每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log
git reset &amp;lt;版本号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要「回滚至上一次提交」，可直接使用以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset head~1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 -f 强制提交参数，且当前用户需要具备「强制提交的权限」。&lt;/p&gt;
&lt;h3 id=&quot;5、如果回滚了之后又不想回滚了怎么办？&quot;&gt;&lt;a href=&quot;#5、如果回滚了之后又不想回滚了怎么办？&quot; class=&quot;headerlink&quot; title=&quot;5、如果回滚了之后又不想回滚了怎么办？&quot;&gt;&lt;/a&gt;5、如果回滚了之后又不想回滚了怎么办？&lt;/h3&gt;&lt;p&gt;  如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。&lt;/p&gt;
&lt;p&gt;  如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 git reflog 命令（所有使用过的版本号）找到回滚之前的版本号，然后 git reset &amp;lt;版本号&amp;gt; 。&lt;/p&gt;
&lt;h2 id=&quot;问：遇到冲突了怎么解决？&quot;&gt;&lt;a href=&quot;#问：遇到冲突了怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;问：遇到冲突了怎么解决？&quot;&gt;&lt;/a&gt;问：遇到冲突了怎么解决？&lt;/h2&gt;&lt;p&gt;  两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 Unmerged 状态，需要解决冲突。&lt;/p&gt;
&lt;h3 id=&quot;1、最快的办法&quot;&gt;&lt;a href=&quot;#1、最快的办法&quot; class=&quot;headerlink&quot; title=&quot;1、最快的办法&quot;&gt;&lt;/a&gt;1、最快的办法&lt;/h3&gt;&lt;p&gt;  大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 使用当前分支 HEAD 版本，通常是冲突源文件的 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 标记部分，======= 的上方
git checkout --ours &amp;lt;文件名&amp;gt;

 # 使用合并分支版本，通常是源冲突文件的 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 标记部分
 git checkout --theirs &amp;lt;文件名&amp;gt;

# 标记为解决状态加入暂存区
git add &amp;lt;文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2、最通用的办法&quot;&gt;&lt;a href=&quot;#2、最通用的办法&quot; class=&quot;headerlink&quot; title=&quot;2、最通用的办法&quot;&gt;&lt;/a&gt;2、最通用的办法&lt;/h3&gt;&lt;p&gt;  用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。&lt;/p&gt;
&lt;p&gt;  在 Mac 系统下，运行 git mergetool &amp;lt;文件名&amp;gt; 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 Meld 或 kdiff3，体验更佳。&lt;/p&gt;
&lt;h3 id=&quot;3、最好的习惯&quot;&gt;&lt;a href=&quot;#3、最好的习惯&quot; class=&quot;headerlink&quot; title=&quot;3、最好的习惯&quot;&gt;&lt;/a&gt;3、最好的习惯&lt;/h3&gt;&lt;p&gt;  有三个好的习惯，可以减少代码的冲突：&lt;br&gt; 在开始修改代码前先 git pull 一下；&lt;br&gt;  将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件；&lt;br&gt;  通过Gitflow 工作流也可以提升 git流程效率，减少发生冲突的可能性。&lt;/p&gt;
&lt;h3 id=&quot;4、最复杂的情况&quot;&gt;&lt;a href=&quot;#4、最复杂的情况&quot; class=&quot;headerlink&quot; title=&quot;4、最复杂的情况&quot;&gt;&lt;/a&gt;4、最复杂的情况&lt;/h3&gt;&lt;p&gt;  如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，git pull –rebase 可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。&lt;/p&gt;
&lt;p&gt;  它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。&lt;/p&gt;
&lt;p&gt;  rebase 大概的操作步骤如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将当前分支的版本追加到从远程 pull 回来的节点之后
git pull --rebase

# 若发生冲突，则按以上其他方法进行解决，解决后继续
git rebase --continue

# 直到所有冲突得以解决，待项目最后上线前再执行
git push origin

# 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可
git rebase --skip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问：如何在不提交修改的前提下，执行-pull-merge-等操作？&quot;&gt;&lt;a href=&quot;#问：如何在不提交修改的前提下，执行-pull-merge-等操作？&quot; class=&quot;headerlink&quot; title=&quot;问：如何在不提交修改的前提下，执行 pull / merge 等操作？&quot;&gt;&lt;/a&gt;问：如何在不提交修改的前提下，执行 pull / merge 等操作？&lt;/h2&gt;&lt;p&gt;  有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。&lt;/p&gt;
&lt;p&gt;  这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 git stash 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。&lt;/p&gt;
&lt;p&gt;  以下是 git stash 常用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看 stash 队列中已暂存了多少 WIP
git stash list

# 恢复上一次的 WIP 状态，并从队列中移除
git stash pop

# 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失
git stash

# 恢复指定编号的 WIP，同时从队列中移除
git stash pop stash@{num}

# 恢复指定编号的 WIP，但不从队列中移除
git stash apply stash@{num}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问：如何在-git-log-中查看修改的文件列表？&quot;&gt;&lt;a href=&quot;#问：如何在-git-log-中查看修改的文件列表？&quot; class=&quot;headerlink&quot; title=&quot;问：如何在 git log 中查看修改的文件列表？&quot;&gt;&lt;/a&gt;问：如何在 git log 中查看修改的文件列表？&lt;/h2&gt;&lt;p&gt;  默认的 git log 会显示较全的信息，且不包含文件列表。使用 –name-status 可以看到修改的文件列表，使用 –oneline 可以将参数简化成一行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log --name-status --oneline
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global alias.ls &amp;apos;log --name-status --oneline --graph&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  运行以上配置后，可通过 git ls 命令来实现「自定义 git log」效果，通过该方法也可以创建 git st 、 git ci 等一系列命令，以便沿用 svn 命令行习惯。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global alias.st &amp;apos;status --porcelain&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  更多 git log 参数，可通过 git help log 查看手册。&lt;/p&gt;
&lt;p&gt;  如果是看上一次提交的版本日志，直接运行 git show 即可。&lt;/p&gt;
&lt;p&gt;  此外，如果你的 Mac 安装了zsh（参考《全新Mac安装指南（编程篇），那么可以直接使用 gst、glog 等一系列快捷命令，详情见此列表：Plugin:git 。&lt;/p&gt;
&lt;h2 id=&quot;问：git-submodule-update-时出错怎么解决？&quot;&gt;&lt;a href=&quot;#问：git-submodule-update-时出错怎么解决？&quot; class=&quot;headerlink&quot; title=&quot;问：git submodule update 时出错怎么解决？&quot;&gt;&lt;/a&gt;问：git submodule update 时出错怎么解决？&lt;/h2&gt;&lt;p&gt;  例如，在执行 git submodule update 时有以下错误信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fatal: reference is not a tree: f869da471c5d8a185cd110bbe4842d6757b002f5&lt;br&gt;Unable to checkout ‘f869da471c5d8a185cd110bbe4842d6757b002f5’ in submodule path ‘source/i18n-php-server’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。&lt;/p&gt;
&lt;p&gt;  解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。&lt;/p&gt;
&lt;h2 id=&quot;其他问题&quot;&gt;&lt;a href=&quot;#其他问题&quot; class=&quot;headerlink&quot; title=&quot;其他问题&quot;&gt;&lt;/a&gt;其他问题&lt;/h2&gt;&lt;p&gt;  设置本地分支与远程分支保持同步，在第一次 git push 的时候带上 -u 参数即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin master -u 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config core.quotepath off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  常用的打 tag 操作，更多请查看《Git 基础 - 打标签》&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有本地 tag
git tag   

# 本地新增一个 tag，推送至 origin 服务器
git tag -a v1.0.0 -m &amp;apos;tag description&amp;apos;
git push origin v1.0.0

# 删除本地与 origin tag
git tag -d v1.0.0
git push origin --delete v1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  使用 git GUI 客户端（如，SoureTree、Github Desktop）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用 git pull 即可；从另外一个本地分支 merge 到当前分支，使用 git merge &amp;lt;分支名&amp;gt;，以下是常用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 新建分支 branch1，并切换过去
git checkout -b branch1

# 查看所有本地与远程分支
git branch -a

# 修改完成后，切换回 master 分支，将 branch1 分支合并进来
git checkout master
git merge branch1

# 删除已完成合并的分支 branch1
git branch -d branch1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Pro Git 简体中文版&lt;/li&gt;
&lt;li&gt;Git权威指南&lt;/li&gt;
&lt;li&gt;命令行man手册&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。&lt;br&gt;本文分为以下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git与SVN差异&lt;/li&gt;
&lt;li&gt;Git常用命令&lt;/li&gt;
&lt;li&gt;Git进阶指南&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.ezlippi.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.ezlippi.com/tags/Git/"/>
    
      <category term="VCS" scheme="http://www.ezlippi.com/tags/VCS/"/>
    
  </entry>
  
  <entry>
    <title>解决百度爬虫无法抓取github pages</title>
    <link href="http://www.ezlippi.com//blog/2016/02/baidu-spider-forbidden.html"/>
    <id>http://www.ezlippi.com//blog/2016/02/baidu-spider-forbidden.html</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2016-02-29T12:30:58.000Z</updated>
    
    <content type="html">&lt;p&gt;由于Github Pages禁止了百度爬虫，导致自己的博客无法被百度索引到，使用七牛云和又拍云做镜像存储能解决问题，但是要求域名要备案，由于我的域名从Godaddy上购买的，国内备案手续太复杂，故放弃了CDN的办法，琢磨了一段时间找到了Gitcafe的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;既然不想放弃Github，唯一的办法就是不让百度爬虫直接抓取GIthub的内容，而是抓取自己网站的一个镜像，将网站的内容镜像到&lt;a href=&quot;www.gitcafe.com&quot;&gt;gitcafe&lt;/a&gt;,步骤如下：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;注册 gitcafe 帐号&lt;/li&gt;
&lt;li&gt;创建一个跟用户名一样的项目,比如我的&lt;a href=&quot;https://gitcafe.com/ezlippi/ezlippi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gitcafe.com/ezlippi/ezlipp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;把 github 的项目推到 gitcafe 上面去，步骤如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add gitcafe https://gitcafe.com/ezlippi/ezlippi.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b gitcafe-pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;切换到一个新分支 &lt;span class=&quot;string&quot;&gt;&#39;gitcafe-pages&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push gitcafe master:gitcafe-pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Username &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://gitcafe.com&#39;&lt;/span&gt;:ezlippi &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Password &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://ezlippi@gitcafe.com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counting objects: &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Delta compression using up to &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; threads.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compressing objects: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;% (&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Writing objects: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;% (&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;1.06&lt;/span&gt; KiB | &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; bytes/s, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; (delta &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;), reused &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; (delta &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To https://gitcafe.com/ezlippi/ezlippi.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   f0d0296..&lt;span class=&quot;number&quot;&gt;51611&lt;/span&gt;d7  master -&amp;gt; gitcafe-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;gitcafe绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;点击项目的右上角的 项目配置&lt;/li&gt;
&lt;li&gt;在项目的 基础设置 中配置项目主页&lt;/li&gt;
&lt;li&gt;在 page服务 中添加自己的域名，比如我这里是&lt;a href=&quot;coolshell.info&quot;&gt;coolshell.info&lt;/a&gt;和&lt;a href=&quot;www.coolshell.info&quot;&gt;www.coolshell.info&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;DNS的配置中增加一项 CNAME.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我使用 dnspod 这个提供商来管理DNS.CNAME一般可以按解析路线或者网络类型来单独配置,网络类型选择国内或者联通，设置之后等待一段时间百度的抓取就 恢复正常了，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dnspod.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于Github Pages禁止了百度爬虫，导致自己的博客无法被百度索引到，使用七牛云和又拍云做镜像存储能解决问题，但是要求域名要备案，由于我的域名从Godaddy上购买的，国内备案手续太复杂，故放弃了CDN的办法，琢磨了一段时间找到了Gitcafe的解决办法。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;既然不想放弃Github，唯一的办法就是不让百度爬虫直接抓取GIthub的内容，而是抓取自己网站的一个镜像，将网站的内容镜像到&lt;a href=&quot;www.gitcafe.com&quot;&gt;gitcafe&lt;/a&gt;,步骤如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Unix/Linux" scheme="http://www.ezlippi.com/categories/Unix-Linux/"/>
    
    
      <category term="github" scheme="http://www.ezlippi.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Apache服务器的配置</title>
    <link href="http://www.ezlippi.com//blog/2016/01/apache-configuration-in-ubuntu.html"/>
    <id>http://www.ezlippi.com//blog/2016/01/apache-configuration-in-ubuntu.html</id>
    <published>2016-01-19T16:00:00.000Z</published>
    <updated>2016-02-29T13:53:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装Apache&quot;&gt;&lt;a href=&quot;#安装Apache&quot; class=&quot;headerlink&quot; title=&quot;安装Apache&quot;&gt;&lt;/a&gt;安装Apache&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;打开浏览器输入你的IP地址或者localhost,就会进入到Apache服务器的默认Index页面。结果如下所示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; It works!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; This is the default web page &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this server.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; The web server software is running but no content has been added, yet.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在Ubuntu系统下Apache的主要配置文件在/etc/apache2文件夹下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /etc/apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -F&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;apache2.conf  envvars     magic            mods-enabled/  sites-available/&lt;br&gt;conf.d/       httpd.conf  mods-available/  ports.conf     sites-enabled/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个目录下有许多纯文本文件和子目录，基本作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apache2.conf:这是服务器的主要配置文件，几乎所有的配置都通过这个文件来完成，但是为了简洁推荐使用单独的指定的文件来配置不同的模块。&lt;/li&gt;
&lt;li&gt;ports.conf:这个文件用来指定虚拟主机监听的端口号，如果你配置了SSL的时候要检查这个文件是否正确。&lt;/li&gt;
&lt;li&gt;conf.d/:这个目录用来控制Apache的一些特殊配置，比如SSL配置。&lt;/li&gt;
&lt;li&gt;sites-available/:这个目录包括所有不同web站点的虚拟主机文件，不同的请求对应不同的内容，这些都是已有的，并不是正在使用的。&lt;/li&gt;
&lt;li&gt;sites-enabled/:这个目录包含正在使用的虚拟主机的定义，通常只包含到sites-available目录下文件的符号链接。&lt;/li&gt;
&lt;li&gt;mods-[enabled,available]/:和上面的类似，只不过这里面包含的是可用的模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从Apache的配置目录结构可以知道，它并不是通过单一的文件来配置，贰拾通过模块化来把整个系统拆分成不同的功能，从而能够动态地增加和修改功能。&lt;/p&gt;
&lt;h2 id=&quot;深入Apache2-conf文件内容&quot;&gt;&lt;a href=&quot;#深入Apache2-conf文件内容&quot; class=&quot;headerlink&quot; title=&quot;深入Apache2.conf文件内容&quot;&gt;&lt;/a&gt;深入Apache2.conf文件内容&lt;/h2&gt;&lt;p&gt;文件主要分成三部分，全局配置、默认服务器配置和虚拟主机配置，在Ubuntu系统下，这个文件主要负责全局配置，默认服务器和虚拟主机可以通过Include语句来处理。&lt;/p&gt;
&lt;p&gt;Include语句允许Apache读取其他配置文件的内容到当前位置，结果就是Apache启动的时候动态生成一个配置文件，如果拉到文件底部会看到很多Include语句，比如ports.conf等。&lt;/p&gt;
&lt;h3 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h3&gt;&lt;h4 id=&quot;Timeout&quot;&gt;&lt;a href=&quot;#Timeout&quot; class=&quot;headerlink&quot; title=&quot;Timeout&quot;&gt;&lt;/a&gt;Timeout&lt;/h4&gt;&lt;p&gt;这个参数默认设置为300，意思是服务器有300s来处理每个请求。&lt;/p&gt;
&lt;h4 id=&quot;KeepAlive&quot;&gt;&lt;a href=&quot;#KeepAlive&quot; class=&quot;headerlink&quot; title=&quot;KeepAlive&quot;&gt;&lt;/a&gt;KeepAlive&lt;/h4&gt;&lt;p&gt;如果设置为On，将允许同个客户端每个连接一直保持来处理多个请求(HTTP长连接)&lt;/p&gt;
&lt;h4 id=&quot;MaxKeepAliveRequests&quot;&gt;&lt;a href=&quot;#MaxKeepAliveRequests&quot; class=&quot;headerlink&quot; title=&quot;MaxKeepAliveRequests&quot;&gt;&lt;/a&gt;MaxKeepAliveRequests&lt;/h4&gt;&lt;p&gt;这个参数用来设置每个连接最多能处理多少个单独的请求&lt;/p&gt;
&lt;h4 id=&quot;KeepAliveTimeout&quot;&gt;&lt;a href=&quot;#KeepAliveTimeout&quot; class=&quot;headerlink&quot; title=&quot;KeepAliveTimeout&quot;&gt;&lt;/a&gt;KeepAliveTimeout&lt;/h4&gt;&lt;p&gt;这个参数设置下一个请求来之前来等待多久，超过这个时间自动关闭这个connection。&lt;/p&gt;
&lt;h2 id=&quot;MPM-配置&quot;&gt;&lt;a href=&quot;#MPM-配置&quot; class=&quot;headerlink&quot; title=&quot;MPM 配置&quot;&gt;&lt;/a&gt;MPM 配置&lt;/h2&gt;&lt;p&gt;Ubuntu 14.04下MPM(Multi-Processing Module)配置默认采用了event module,如果你系统采用的是prefork module,可以通过如下方法来切换：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2dismod mpm_prefork&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo a2enmod mpm_event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service apache2 restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置虚拟主机&quot;&gt;&lt;a href=&quot;#配置虚拟主机&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟主机&quot;&gt;&lt;/a&gt;配置虚拟主机&lt;/h2&gt;&lt;p&gt;1.首先禁用默认的Apache虚拟主机：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2dissite &lt;span class=&quot;number&quot;&gt;000&lt;/span&gt;-default.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.在/etc/apache2/sites-available目录下创建一个example.com.conf文件，把example.com替换成你的域名：&lt;/p&gt;
&lt;p&gt;文件：/etc/apache2/sites-available/example.com.conf&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;VirtualHost *:&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ServerAdmin webmaster@example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ServerName example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ServerAlias www.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DocumentRoot /var/www/example.com/public_html/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ErrorLog /var/www/example.com/logs/error.log &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CustomLog /var/www/example.com/logs/access.log combined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 3.给你的网站内容和日志文件创建目录，把example.com替换成你的域名：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir -p /var/www/example.com/public_html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir /var/www/example.com/logs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 4.启用这个站点：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2ensite example.com.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 5.重启Apache&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo service apache2 restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;em&gt;安装对脚本语言的支持&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perl support:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libapache2-mod-perl2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Python support:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libapache2-mod-python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;PHP support:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libapache2-mod-php5 php5 php-pear php5-xcache&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Apache中启用和禁用网站和模块&quot;&gt;&lt;a href=&quot;#Apache中启用和禁用网站和模块&quot; class=&quot;headerlink&quot; title=&quot;Apache中启用和禁用网站和模块&quot;&gt;&lt;/a&gt;Apache中启用和禁用网站和模块&lt;/h3&gt;&lt;p&gt;1.启用和禁用网站：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2ensite 虚拟主机文件名(example.com.conf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo a2dissite 虚拟主机文件名(example.com.conf)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.启用和禁用模块&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2enmod 模块配置文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo a2dismod  模块配置文件名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启用用户文件夹实现文件服务器的功能&quot;&gt;&lt;a href=&quot;#启用用户文件夹实现文件服务器的功能&quot; class=&quot;headerlink&quot; title=&quot;启用用户文件夹实现文件服务器的功能&quot;&gt;&lt;/a&gt;启用用户文件夹实现文件服务器的功能&lt;/h2&gt;&lt;p&gt;1.使用如下命令启用userdir模块:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo a2enmod userdir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.编辑userdir.conf配置userdir模块:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/apache2/mods-enabled/userdir.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内容如下，把public_html改为你的个人文件夹名称，如果不存在则创建：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;IfModule mod_userdir.c&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        UserDir public_html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        UserDir disabled root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Directory /home/*/public_html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		AllowOverride All&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Options MultiViews Indexes SymLinksIfOwnerMatch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Limit GET POST OPTIONS&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        Order allow,deny&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        Allow from all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;comment&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        &lt;span class=&quot;comment&quot;&gt;#Require all granted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Limit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;LimitExcept GET POST OPTIONS&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        Order deny,allow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        Deny from all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;#Require all denied&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/LimitExcept&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.创建个人文件夹并重启APache&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo service apache2 restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /home/&lt;span class=&quot;variable&quot;&gt;$USER&lt;/span&gt;/public_html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来在浏览器中输入&lt;a href=&quot;http://localhost/~username/就可以访问你的个人文件夹了，把username替换为你的用户名。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/~username/就可以访问你的个人文件夹了，把username替换为你的用户名。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;给你的文件添加访问权限&quot;&gt;&lt;a href=&quot;#给你的文件添加访问权限&quot; class=&quot;headerlink&quot; title=&quot;给你的文件添加访问权限&quot;&gt;&lt;/a&gt;给你的文件添加访问权限&lt;/h3&gt;&lt;p&gt;把上面的AllowOverride All改为AllowOverride AuthConfig,然后给你的服务器添加认证用户，认证用户保存在/var/www/passwd/中，需要使用htpasswd命令来添加用户，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;htpasswd -c /var/www/passwd/public_html lippi &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;New password: mypassword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Re-type new password: mypassword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding password &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; user lippi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的userdir.conf是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;IfModule mod_userdir.c&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UserDir public_html &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UserDir disabled root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Directory /home/*/public_html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		AllowOverride FileInfo AuthConfig Limit Indexes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Limit GET POST OPTIONS&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#		Require all granted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			AuthType Basic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			AuthName &lt;span class=&quot;string&quot;&gt;&quot;lippi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			AuthUserFile /var/www/passwd/public_html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Require valid-user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Limit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;LimitExcept GET POST OPTIONS&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Require all denied&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/LimitExcept&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Apache&quot;&gt;&lt;a href=&quot;#安装Apache&quot; class=&quot;headerlink&quot; title=&quot;安装Apache&quot;&gt;&lt;/a&gt;安装Apache&lt;/h2&gt;
    
    </summary>
    
      <category term="Unix/Linux" scheme="http://www.ezlippi.com/categories/Unix-Linux/"/>
    
    
      <category term="linux" scheme="http://www.ezlippi.com/tags/linux/"/>
    
      <category term="web" scheme="http://www.ezlippi.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>终端复用软件之tmux简介</title>
    <link href="http://www.ezlippi.com//blog/2016/01/tmux-guide.html"/>
    <id>http://www.ezlippi.com//blog/2016/01/tmux-guide.html</id>
    <published>2016-01-18T17:05:13.000Z</published>
    <updated>2016-03-01T06:00:44.000Z</updated>
    
    <content type="html">&lt;p&gt;  Tmux是一个优秀的终端复用软件，支持多标签，也支持窗口内部面板的分割，更重要的是，Tmux提供了窗体随时保存和恢复的功能。想象一下假如你在公司的服务器上开了许多窗口调试程序，回到家时通过SSH连接公司电脑又要打开一堆繁琐的窗口，而且还忘记了当时调试到哪一步了，那Tmux可以帮你解决这个难题，当SSH连接断开重新连接后能够恢复到原来的工作环境。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install tmux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成后输入tmux进入软件，界面类似一个下方带有状态栏的终端。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;  Tmux基于典型的c/s模型，主要分为会话、窗口和面板三个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session：输入tmux后就创建了一个会话，一个会话是一组窗体的集合。&lt;/li&gt;
&lt;li&gt;Window：会话中一个可见的窗口。&lt;/li&gt;
&lt;li&gt;Pane:一个窗口可以分成多个面板。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/images/tmux.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中左下角的3显示为当前会话，随后1 vim,2 bash,3 ssh 分别是3个窗口，蓝色bash表示当前窗口，图中用蓝色数字标记的1,2,3分别是bash窗口的三个面板。你还可以在tmux配置文件中给状态栏添加时间、天气等信息。&lt;/p&gt;
&lt;h2 id=&quot;Tmux基本操作&quot;&gt;&lt;a href=&quot;#Tmux基本操作&quot; class=&quot;headerlink&quot; title=&quot;Tmux基本操作&quot;&gt;&lt;/a&gt;Tmux基本操作&lt;/h2&gt;&lt;p&gt;Tmux的所有操作必须使用一个前缀进入命令模式，默认前缀为Ctrl+b，很多人会改为Ctrl+a,你可以修改tmux.conf配置文件来修改默认前缀：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 前缀设置为&amp;lt;Ctrl-&lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;g&lt;/span&gt; prefix C-&lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 解除&amp;lt;Ctrl-&lt;span class=&quot;keyword&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubind C-&lt;span class=&quot;keyword&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改之后重启Tmux生效，或者先按Ctrl+b，然后输入：，进入命令行模式， 在命令行模式下输入：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;source&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; ~/.tmux.&lt;span class=&quot;keyword&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以在配置文件中加入下面这句话，以后改了配置文件只需要按前缀+r了。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 将&lt;span class=&quot;keyword&quot;&gt;r&lt;/span&gt; 设置为加载配置文件，并显示&lt;span class=&quot;string&quot;&gt;&quot;reloaded!&quot;&lt;/span&gt;信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind &lt;span class=&quot;keyword&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;source&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; ~/.tmux.&lt;span class=&quot;keyword&quot;&gt;conf&lt;/span&gt; \; &lt;span class=&quot;keyword&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Reloaded!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加入如下几条语句， 现在切换面板就和vim一样了：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# map Vi movement keys as pane movement keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind h select-pane -L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind j select-pane -D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind k select-pane -U&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind l select-pane -R&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 复制/粘贴&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 按前缀+[ 进入复制模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 按 space 开始复制，移动光标选择复制区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 按 Enter 复制并退出copy-mode。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 将光标移动到指定位置，按前缀+ ] 粘贴&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，只需要在配置文件(~/.tmux.conf)中加入如下行即可以像 vim一样使用hjkl移动:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` Vim Script &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#copy-mode 将快捷键设置为vi 模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setw -g mode-keys vi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;会话的创建和保存&quot;&gt;&lt;a href=&quot;#会话的创建和保存&quot; class=&quot;headerlink&quot; title=&quot;会话的创建和保存&quot;&gt;&lt;/a&gt;会话的创建和保存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;终端运行tmux + 会话名，创建或打开会话&lt;/li&gt;
&lt;li&gt;前缀 + d 退出并保存会话&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;窗口操作&quot;&gt;&lt;a href=&quot;#窗口操作&quot; class=&quot;headerlink&quot; title=&quot;窗口操作&quot;&gt;&lt;/a&gt;窗口操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前缀 + c 创建一个新的window&lt;/li&gt;
&lt;li&gt;前缀 + b 重命名当前window&lt;/li&gt;
&lt;li&gt;前缀 + &amp;amp; 关闭当前window&lt;/li&gt;
&lt;li&gt;前缀 + n 移动到下一个窗口&lt;/li&gt;
&lt;li&gt;前缀 + p 移动到前一个窗口&lt;/li&gt;
&lt;li&gt;前缀 + l 切换到上一个窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;面板操作&quot;&gt;&lt;a href=&quot;#面板操作&quot; class=&quot;headerlink&quot; title=&quot;面板操作&quot;&gt;&lt;/a&gt;面板操作&lt;/h2&gt;&lt;p&gt;在配置文件中添加下面两行就可以使用&lt;code&gt;前缀+ |-&lt;/code&gt;来水平和垂直分割窗口：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# use PREFIX | &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt; window horizontally &lt;span class=&quot;built_in&quot;&gt;and&lt;/span&gt; PREFIX - &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt; vertically&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind | &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;-window -&lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind - &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;-window -&lt;span class=&quot;keyword&quot;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加如下命令到配置文件后后可以使用HJKL来调整窗口大小:&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Script &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;resize&lt;/span&gt; panes using PREFIX H, J, K, L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind H &lt;span class=&quot;keyword&quot;&gt;resize&lt;/span&gt;-pane -L &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind J &lt;span class=&quot;keyword&quot;&gt;resize&lt;/span&gt;-pane -D &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind K &lt;span class=&quot;keyword&quot;&gt;resize&lt;/span&gt;-pane -U &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind L &lt;span class=&quot;keyword&quot;&gt;resize&lt;/span&gt;-pane -R &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ctrl-b&gt; + 方向键，切换窗口&lt;/ctrl-b&gt;&lt;/li&gt;
&lt;li&gt;&lt;ctrl-b&gt; + q 显示所有面板&lt;/ctrl-b&gt;&lt;/li&gt;
&lt;li&gt;&lt;ctrl-b&gt; + !/x 关闭当前面板&lt;/ctrl-b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看所有的按键，使用&lt;code&gt;&amp;lt;Ctrl-b&amp;gt; + ?&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tmux个性化&quot;&gt;&lt;a href=&quot;#Tmux个性化&quot; class=&quot;headerlink&quot; title=&quot;Tmux个性化&quot;&gt;&lt;/a&gt;Tmux个性化&lt;/h2&gt;&lt;p&gt;你可以使用&lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tmux-powerline&lt;/a&gt;来美化你的状态栏。&lt;/p&gt;
&lt;p&gt;美化之后的效果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/images/tmux2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后附上我的tmux配置文件：&lt;a href=&quot;https://github.com/LippiOuYang/Profiles/blob/master/tmux.conf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.tmux.conf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;  Tmux是一个优秀的终端复用软件，支持多标签，也支持窗口内部面板的分割，更重要的是，Tmux提供了窗体随时保存和恢复的功能。想象一下假如你在公司的服务器上开了许多窗口调试程序，回到家时通过SSH连接公司电脑又要打开一堆繁琐的窗口，而且还忘记了当时调试到哪一步了，那Tmux可以帮你解决这个难题，当SSH连接断开重新连接后能够恢复到原来的工作环境。&lt;/p&gt;
    
    </summary>
    
      <category term="Unix/Linux" scheme="http://www.ezlippi.com/categories/Unix-Linux/"/>
    
    
      <category term="linux" scheme="http://www.ezlippi.com/tags/linux/"/>
    
      <category term="shell" scheme="http://www.ezlippi.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>提高效率的Android Studio插件</title>
    <link href="http://www.ezlippi.com//blog/2015/09/android-studio-plugins.html"/>
    <id>http://www.ezlippi.com//blog/2015/09/android-studio-plugins.html</id>
    <published>2015-09-08T16:00:00.000Z</published>
    <updated>2016-02-29T13:14:18.000Z</updated>
    
    <content type="html">&lt;p&gt;这里记录那些可以显著提升Android开发效率的Studio插件，好的插件和快捷键可以提高效率，缩短开发周期。这里介绍的插件大部分都可以通过Studio的插件市场下载安装，安装方法如下：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;in Android Studio: go to Preferences → Plugins → Browse repositories,搜索你要安装的插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;download it and install via Preferences → Plugins → Install plugin from disk&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要的插件：&lt;/p&gt;
&lt;p&gt;1.H.A.X.M和GenyMotion这两个网上介绍的比较多，就不说了&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;https://github.com/avast/android-butterknife-zelezny&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ButterKnifeZelezny&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ButterKnife视图注入插件,如果你的Activity布局里面有很多组件，写一堆的findViewById岂不是很烦人，ButterKnife解决了这个烦人的问题,这个插件的效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/butterknife.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;https://github.com/winterDroid/android-drawable-importer-intellij-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-drawable-importer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它可以减少导入缩放图像到Android项目所需的工作量,Android  Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项,该插件包含三个主要功能，可以在New下的Android module的任意地方通过右键访问它们：&lt;br&gt;1、引入AndroidIcons Drawable&lt;br&gt;选择资源，指定颜色，改变目标资源名字以及选中所有你想引入的资源。然后会自动创建所有缺失的文件夹，如果已经存在相同名字的drawable，则会进行警告。&lt;/p&gt;
&lt;p&gt;2、Scaled Drawable&lt;br&gt;选择资源并指定分辨率。如果你想缩放引入的图片，你应该选择“其他”选项，然后填充目标分辨率和目标宽度/高度。&lt;/p&gt;
&lt;p&gt;3、Multisource-Drawable&lt;br&gt;引入不同资源的Drawable，设计者根据如下结构设计不同资源的Drawable zip文件，引入一个zip文件即可引入不同分辨率的Drawable。&lt;br&gt;    root/&lt;br&gt;          ./drawable_ldpi.png&lt;br&gt;          ./drawable_mdpi.png&lt;br&gt;          ./drawable_hdpi.png&lt;br&gt;          ./drawable_xhdpi.png&lt;br&gt;如图所示:&lt;br&gt;&lt;img src=&quot;/images/drawableimport.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;https://github.com/pbreault/adb-idea&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb-idea&lt;/a&gt;&lt;br&gt;支持直接在AS面板中进行ADB操作,快捷键:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OSX: Ctrl+Shift+A&lt;/li&gt;
&lt;li&gt;Windows/Linux: Ctrl+Alt+Shift+A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/adb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;https://github.com/inmite/android-selector-chapek&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SelectorChapek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照命名规范自动生成Selector,如图所示：&lt;/p&gt;
&lt;p&gt;如何使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在资源文件夹下右击，比如’drawable_xhdpi’下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/selector1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择Generate Android Selectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/selector2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的selector自动出现在drawable文件夹下 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/selector3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6.&lt;a href=&quot;https://github.com/zzz40500/GsonFormat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GsonFormat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据Gson　api接口生成相应的实体类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/gson_format.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;a href=&quot;https://github.com/mcharmas/android-parcelable-intellij-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ParcelableGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android中的序列化有两种方式，分别是实现Serializable接口和Parcelable接口，但在Android中是推荐使用Parcelable，只不过我们这种方式要比Serializable方式要繁琐,这个插件帮助我们解决繁琐的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/parcelable_generator.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;8.&lt;a href=&quot;https://github.com/konifar/android-material-design-icon-generator-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-material-design-icon-generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/capture.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;9.&lt;a href=&quot;https://github.com/nicoulaj/idea-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;idea-markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/preview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;10.&lt;a href=&quot;ns.jetbrains.com/plugin/7366?pr=&quot;&gt;Android Holo Colors Generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/holocolor.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;11.&lt;a href=&quot;https://www.codota.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codota&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜索代码的插件，他的搜索源，不仅只有Github，而且还有知名博客和开发者网站，让你搜索一个东西，不用在找上半天；&lt;/p&gt;
&lt;p&gt;除了搜索功能，首页的下方还罗列比较流行的类库，还提供保存代码的CodeBox，同时还提供了Chrome 插件和Android Studio 插件，最后通过Google，Github，Facebook 任意一个授权登录即可使用；&lt;/p&gt;
&lt;p&gt;而且当你点击搜索的结果（Java class）的时候，右侧会显示UML 视图，而且左边的代码如果点击会有高亮现实，而且还会显示Doc，并提供了API Doc 的链接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/codota.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;12.&lt;a href=&quot;https://github.com/JetBrains/ideavim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ideaVim&lt;/a&gt;&lt;br&gt;   有了它之后就可以在Idea里指尖如飞了&lt;/p&gt;
&lt;p&gt;13.&lt;a href=&quot;https://github.com/square/leakcanary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeakCanary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Square最近刚开源的一个非常有用的工具，强烈推荐，帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/leak.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;14.checkStyle 和　findBugs都还不错&lt;/p&gt;
&lt;p&gt;15.如果你像推荐其他插件，可以在本文最上方点击纠错后添加，然后pull request。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录那些可以显著提升Android开发效率的Studio插件，好的插件和快捷键可以提高效率，缩短开发周期。这里介绍的插件大部分都可以通过Studio的插件市场下载安装，安装方法如下：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.ezlippi.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.ezlippi.com/tags/android/"/>
    
      <category term="studio" scheme="http://www.ezlippi.com/tags/studio/"/>
    
  </entry>
  
  <entry>
    <title>Volley源码分析</title>
    <link href="http://www.ezlippi.com//blog/2015/08/volley-source-code.html"/>
    <id>http://www.ezlippi.com//blog/2015/08/volley-source-code.html</id>
    <published>2015-08-26T16:00:00.000Z</published>
    <updated>2016-02-29T13:54:57.000Z</updated>
    
    <content type="html">&lt;p&gt;说到Android的网络库，比较常用的就是Volley和okHttp了，最近重温了下Volley的源码，感觉应该写点什么．Volley 是 Google 推出的 Android 异步网络请求框架和图片加载框架，适合数据量小通信比较频繁的情形．&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;先看一下Volley的设计图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/volley.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;请求Request&quot;&gt;&lt;a href=&quot;#请求Request&quot; class=&quot;headerlink&quot; title=&quot;请求Request&quot;&gt;&lt;/a&gt;请求Request&lt;/h2&gt;&lt;p&gt;Volley里面每一个请求都是继承自Request抽象类，比如图中的StringRequest,JsonRequest,ImageRequest,请求最主要的几个属性有：http请求的方法method,请求资源url,是否应该缓存响应shouldCache,如果缓存的话就会有对应的缓存对象Cache.Entry,以及用来标识请求的序列号mSequence,当然这里的每一个请求是异步的，你还需要注册对应的响应监听器，&lt;code&gt;private final Listener&amp;lt;String&amp;gt; mListener;&lt;/code&gt;,这个后面再讲．&lt;/p&gt;
&lt;h2 id=&quot;请求队列&quot;&gt;&lt;a href=&quot;#请求队列&quot; class=&quot;headerlink&quot; title=&quot;请求队列&quot;&gt;&lt;/a&gt;请求队列&lt;/h2&gt;&lt;p&gt;请求队列是用来管理所有请求的，里面有四个集合类，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个waitingRequest是因为用户可能重复提交了相同的请求，第一次提交一个请求后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//会在这个Map里添加一个key,表示这个请求已经在处理了，如果再提交相同的请求就会&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//把这个请求添加到这个key对应的请求队列里，并把第一次的请求加入到缓存队列里，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//后面再发出这个请求就可以从缓存中获取响应了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Queue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;&amp;gt; mWaitingRequests =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Queue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用来存储当前所有的请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Set&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mCurrentRequests = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这是个优先队列，存储那些需要缓存的请求，处理这类请求时，先从缓存中查询，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果缓存miss再把它丢进networkRequest中从网络中获取数据  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mCacheQueue =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个队列用于存储需要直接从网络中获取数据的请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mNetworkQueue =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面讲到请求是保存在优先队列中，那么请求按照什么排序呢？自然是优先级了，&lt;br&gt;如果优先级一样就按照序列号排序，先进先出．请求一共有四个优先级，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Priority &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LOW,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NORMAL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HIGH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IMMEDIATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;既然是这样那么请求一定实现了java的&lt;code&gt;Comparable&lt;/code&gt;接口了，没错，而且正如前面所说请求按照优先级和序列号来排序，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Request&amp;lt;T&amp;gt; other)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Priority left = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getPriority();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Priority right = other.getPriority();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// High-priority requests are &quot;lesser&quot; so they are sorted to the front.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Equal priorities are sorted by sequence number to provide FIFO ordering.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left == right ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mSequence - other.mSequence :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        right.ordinal() - left.ordinal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;请求分派RequestDispatcher&quot;&gt;&lt;a href=&quot;#请求分派RequestDispatcher&quot; class=&quot;headerlink&quot; title=&quot;请求分派RequestDispatcher&quot;&gt;&lt;/a&gt;请求分派RequestDispatcher&lt;/h2&gt;&lt;p&gt;Volley里面有两个&lt;code&gt;Dispacher&lt;/code&gt;,一个是&lt;code&gt;CacheDispatcher&lt;/code&gt;,另一个是&lt;code&gt;NetworkDispatcher&lt;/code&gt;,两个都是继承自线程，&lt;code&gt;CacheDispatcher&lt;/code&gt;启动后从mCacheQueue里取出请求，根据请求的CacheKey(实际上是url)从缓存中检索数据，如果没有检索到数据就把它重新丢进&lt;code&gt;mNetworkQueue&lt;/code&gt;中从网络中获取数据，如果缓存命中同时检查下缓存是否过期，如果缓存过期了照样要重新获取数据，否则调用&lt;code&gt;ResponseDelivery&lt;/code&gt;把响应传递给相应的对象(实际上是调用请求注册的相应监听器)．&lt;br&gt;Volley默认启动了４个&lt;code&gt;NetworkDispatcher&lt;/code&gt;线程来处理网络请求，为了避免过多的网络请求造成UI卡死，Volley默认把这些线程的优先级设置为后台线程&lt;code&gt;Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;HttpStack&quot;&gt;&lt;a href=&quot;#HttpStack&quot; class=&quot;headerlink&quot; title=&quot;HttpStack&quot;&gt;&lt;/a&gt;HttpStack&lt;/h2&gt;&lt;p&gt;Volley的&lt;code&gt;NetworkDispatcher&lt;/code&gt;线程默认调用的是Network类的&lt;code&gt;HttpStack&lt;/code&gt;的方法来执行Http请求，HttpStack的实现有两种，如果系统在 Gingerbread 及之后(即 API Level &amp;gt;= 9)，采用基于 &lt;code&gt;HttpURLConnection&lt;/code&gt; 的 HurlStack，如果小于 9，采用基于 HttpClient 的 &lt;code&gt;HttpClientStack&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (stack == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HurlStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpClientStack(AndroidHttpClient.newInstance(userAgent));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到了 HttpStack,然后通过它构造一个代表网络（Network）的具体实现BasicNetwork。&lt;/p&gt;
&lt;h3 id=&quot;HttpURLConnection-和-AndroidHttpClient-HttpClient的封装-如何选择&quot;&gt;&lt;a href=&quot;#HttpURLConnection-和-AndroidHttpClient-HttpClient的封装-如何选择&quot; class=&quot;headerlink&quot; title=&quot;HttpURLConnection 和 AndroidHttpClient(HttpClient的封装)如何选择&quot;&gt;&lt;/a&gt;HttpURLConnection 和 AndroidHttpClient(HttpClient的封装)如何选择&lt;/h3&gt;&lt;p&gt;在 Froyo(2.2) 之前，HttpURLConnection 有个重大 Bug，调用 close() 函数会影响连接池，导致连接复用失效，所以在 Froyo 之前使用 HttpURLConnection 需要关闭 keepAlive。&lt;br&gt;另外在 Gingerbread(2.3) HttpURLConnection 默认开启了 gzip 压缩，提高了 HTTPS 的性能，Ice Cream Sandwich(4.0) HttpURLConnection 支持了请求结果缓存。&lt;br&gt;再加上 HttpURLConnection 本身 API 相对简单，所以对 Android 来说，在 2.3 之后建议使用 HttpURLConnection，之前建议使用 AndroidHttpClient。&lt;/p&gt;
&lt;h3 id=&quot;关于-User-Agent&quot;&gt;&lt;a href=&quot;#关于-User-Agent&quot; class=&quot;headerlink&quot; title=&quot;关于 User Agent&quot;&gt;&lt;/a&gt;关于 User Agent&lt;/h3&gt;&lt;p&gt;通过代码我们发现如果是使用 AndroidHttpClient，Volley 还会将请求头中的 User-Agent 字段设置为 App 的 ${packageName}/${versionCode}，如果异常则使用 “volley/0”，不过这个获取 User-Agent 的操作应该放到 if else 内部更合适。而对于 HttpURLConnection 却没有任何操作，为什么呢？&lt;br&gt;如果用 Fiddler 或 Charles 对数据抓包我们会发现，我们会发现 HttpURLConnection 默认是有 User-Agent 的，类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dalvik/1.6.0 (Linux; U; Android 4.1.1; Google Nexus 4 - 4.1.1 - API 16 - 768x1280_1 Build/JRO03S)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经常用 WebView 的同学会也许会发现似曾相识，是的，WebView 默认的 User-Agent 也是这个。实际在请求发出之前，会检测 User-Agent 是否为空，如果不为空，则加上系统默认 User-Agent。在 Android 2.1 之后，我们可以通过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String userAgent = System.getProperty(&amp;quot;http.agent&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到系统默认的 User-Agent，Volley 如果希望自定义 User-Agent，可在自定义 Request 中重写 getHeaders() 函数&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, String&amp;gt; getHeaders() &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; AuthFailureError &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// self-defined user agent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Map&amp;lt;String, String&amp;gt; headerMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headerMap.put(&lt;span class=&quot;string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;android-open-project-analysis/1.0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; headerMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DiskBasedCache&quot;&gt;&lt;a href=&quot;#DiskBasedCache&quot; class=&quot;headerlink&quot; title=&quot;DiskBasedCache&quot;&gt;&lt;/a&gt;DiskBasedCache&lt;/h2&gt;&lt;p&gt;Volley默认是把缓存保存在文件中，并在内存中保存了缓存的头部，缓存头部占的最大内存可以设置，便于快速查询缓存是否存在．CacheHeader的主要属性有&lt;br&gt;文件大小size,缓存的etag,获取缓存的key,ttl,softTtl以及responseHeader.根据key来查询缓存，先从内存中查询是否存在CacheHeader,如果存在再从文件中把响应的data再读出来．每次向缓存中插入数据时先看看是否达到了缓存的最大大小，如果超过了容量就按照LRU算法从缓存中删除一部分数据直到满足需求，LRU算法实现很简单，直接调用LinkedHashMap来实现，&lt;code&gt;private final Map&amp;lt;String, CacheHeader&amp;gt; mEntries = new LinkedHashMap&amp;lt;String, CacheHeader&amp;gt;(16,0.75f,true)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;ByteArrayPool&quot;&gt;&lt;a href=&quot;#ByteArrayPool&quot; class=&quot;headerlink&quot; title=&quot;ByteArrayPool&quot;&gt;&lt;/a&gt;ByteArrayPool&lt;/h2&gt;&lt;p&gt;ByteArrayPool很有意思，这是一个字节数组池，Volley进行网络操作的时候会把HTTP响应的内容写入到字节数组中，如果频繁的申请大的字节数组可能会对系统性能有所影响，所以Volley采取了对象池的方法来解决频繁申请内存的问题，它的实现也比较简单，用的两个字节数组链表，一个按照使用的先后排序，另一个按照字节数组的大小排序，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; mBuffersByLastUse = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; mBuffersBySize = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt;(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;池当然也有它的大小限制．申请字节数组的时候从mBuffersBySize中申请一个比请求大小更大的数组给他，如果没找到就调用new从堆中申请一个字节数组返回给它，数组用完之后调用returnBuff返回给数组池中，当数组池的大小超过了规定的大小时，就按照LRU算法删除一些数组．那么这个对象池具体在哪里用上了呢？答案是在BasicNetwork中，调用HttpStack返回了Http响应，然后需要把响应的Entity转换为字节数组，一般我们会用ByteArrayOutputStream来做，但是ByteArrayOutputStream是需要从堆中申请一个字节数组的，所以Volley创建了一个继承自ByteArrayOutputStream的类PoolingByteArrayOutputStream并覆写了相应的方法．不得不佩服谷歌的工程师啊，每个细节都考虑的很周到．&lt;/p&gt;
&lt;h2 id=&quot;关于Http缓存&quot;&gt;&lt;a href=&quot;#关于Http缓存&quot; class=&quot;headerlink&quot; title=&quot;关于Http缓存&quot;&gt;&lt;/a&gt;关于Http缓存&lt;/h2&gt;&lt;p&gt;Volley中对Http缓存作了相应的处理，在使用BasicNetwork执行Request之前，会给请求添加相应的缓存首部，利用&lt;code&gt;If-None-Match&lt;/code&gt;和&lt;code&gt;If-Modified-Since&lt;/code&gt;对过期缓存或者不新鲜缓存，进行请求再验证,代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addCacheHeaders&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Map&amp;lt;String, String&amp;gt; headers, Cache.Entry entry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// If there&#39;s no cache entry, we&#39;re done.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.etag != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    headers.put(&lt;span class=&quot;string&quot;&gt;&quot;If-None-Match&quot;&lt;/span&gt;, entry.etag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.serverDate &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Date refTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date(entry.serverDate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    headers.put(&lt;span class=&quot;string&quot;&gt;&quot;If-Modified-Since&quot;&lt;/span&gt;, DateUtils.formatDate(refTime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，在收到Http响应之后，Volley也会检查响应首部中的缓存字段，根据&lt;code&gt;Cache-Control&lt;/code&gt;和&lt;code&gt;Expires&lt;/code&gt;首部来计算缓存的过期时间。如果两个首部都存在情况下，以&lt;code&gt;Cache-Control&lt;/code&gt;为准。代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Cache.&lt;span class=&quot;function&quot;&gt;Entry &lt;span class=&quot;title&quot;&gt;parseCacheHeaders&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(NetworkResponse response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; now = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Map&amp;lt;String, String&amp;gt; headers = response.headers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serverDate = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serverExpires = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; softExpire = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; maxAge = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; hasCacheControl = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String serverEtag = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String headerValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headerValue = headers.get(&lt;span class=&quot;string&quot;&gt;&quot;Date&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (headerValue != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serverDate = parseDateAsEpoch(headerValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headerValue = headers.get(&lt;span class=&quot;string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (headerValue != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hasCacheControl = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String[] tokens = headerValue.split(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; tokens.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String token = tokens[i].trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.equals(&lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;) || token.equals(&lt;span class=&quot;string&quot;&gt;&quot;no-store&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;max-age=&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxAge = Long.parseLong(token.substring(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (token.equals(&lt;span class=&quot;string&quot;&gt;&quot;must-revalidate&quot;&lt;/span&gt;) || token.equals(&lt;span class=&quot;string&quot;&gt;&quot;proxy-revalidate&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxAge = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headerValue = headers.get(&lt;span class=&quot;string&quot;&gt;&quot;Expires&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (headerValue != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serverExpires = parseDateAsEpoch(headerValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serverEtag = headers.get(&lt;span class=&quot;string&quot;&gt;&quot;ETag&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cache-Control takes precedence over an Expires header, even if both exist and Expires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// is more restrictive.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasCacheControl) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    softExpire = now + maxAge * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (serverDate &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; serverExpires &amp;gt;= serverDate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Default semantic for Expire header in HTTP specification is softExpire.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    softExpire = now + (serverExpires - serverDate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache.Entry entry = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Cache.Entry();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.data = response.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.etag = serverEtag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.softTtl = softExpire;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.ttl = entry.softTtl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.serverDate = serverDate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry.responseHeaders = headers;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;读完Volley的源码之后只有一个感觉，就是&lt;code&gt;谷歌出品，必属精品&lt;/code&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说到Android的网络库，比较常用的就是Volley和okHttp了，最近重温了下Volley的源码，感觉应该写点什么．Volley 是 Google 推出的 Android 异步网络请求框架和图片加载框架，适合数据量小通信比较频繁的情形．&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.ezlippi.com/categories/java/"/>
    
      <category term="android" scheme="http://www.ezlippi.com/categories/java/android/"/>
    
    
      <category term="network,　异步, Volley, android" scheme="http://www.ezlippi.com/tags/network-%E5%BC%82%E6%AD%A5-Volley-android/"/>
    
  </entry>
  
  <entry>
    <title>Zsh-Linux下最好的Shell简介</title>
    <link href="http://www.ezlippi.com//blog/2015/08/linux-zsh.html"/>
    <id>http://www.ezlippi.com//blog/2015/08/linux-zsh.html</id>
    <published>2015-08-22T16:00:00.000Z</published>
    <updated>2016-02-29T13:12:52.000Z</updated>
    
    <content type="html">&lt;p&gt;没听过Shell?Shell是Unix/Linux系统下的外壳，负责外界和Linux内核的交互，将用户输入的命令转换成内核能懂的语言，执行相应的指令，然后将输出返回给用户．&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看当前系统所有的Shell&quot;&gt;&lt;a href=&quot;#查看当前系统所有的Shell&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统所有的Shell&quot;&gt;&lt;/a&gt;查看当前系统所有的Shell&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;ls /etc/shells
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果如下：&lt;br&gt;&lt;img src=&quot;/images/zsh1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Zsh&quot;&gt;&lt;a href=&quot;#安装Zsh&quot; class=&quot;headerlink&quot; title=&quot;安装Zsh&quot;&gt;&lt;/a&gt;安装Zsh&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;sudo apt-get install zsh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单吧？把它设置为默认Shell,&lt;code&gt;chsh -s /bin/zsh&lt;/code&gt;&lt;br&gt;它的默认配置为.zshrc,你可以在里面配置各种按键别名，你也可以使用Github上比较流行的oh-my-zsh配置，安装方法：&lt;/p&gt;
&lt;p&gt;自动安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;手动安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装之后进入一个Git分支，显示是这样的，很炫对吧？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/zsh2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前切换工作目录一直按cd加tab是不是很麻烦，现在有了Zsh只需要输入d,他会显示最近使用的工作目录，然后输入数字进入对应的目录，是不是很省事？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/zsh3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;它的功能不局限如此，时间长了忘记了tar的参数？输入&lt;code&gt;tar -&lt;/code&gt;按一下tab键会显示所有的命令行参数，再按一下tab进入选择模式，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/zsh4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前杀死进程是不是用&lt;code&gt;ps aux | grep python&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/zsh5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;现在只需要输入&lt;code&gt;kill python&lt;/code&gt;再按一下tab键，结果变成这样了,神奇把？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/zsh6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;p&gt;在.zshrc文件里可以配置你要使用的插件，Zsh提供上千种插件，你可以配置自己Shell的主题，我用的是&lt;code&gt;ZSH_THEME=”robbyrussell”&lt;/code&gt;,你还可以配置需要的插件，我的插件是&lt;code&gt;plugins=(git autojump mvn gradle)&lt;/code&gt;,简单介绍下git和autojump:&lt;/p&gt;
&lt;p&gt;git. 当你进入一个git目录时，Zsh会显示git和所在的分支，对git的命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh&lt;/p&gt;
&lt;p&gt;autojump. 安装方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/downloads/joelthelion/autojump/autojump_v21.1.2.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压缩后进入目录，执行&lt;code&gt;./install.sh&lt;/code&gt;,最后加上这一行代码到.zshrc中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;amp;&amp;amp; . ~/.autojump/etc/profile.d/autojump.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过workspace目录，输入j work 即可正确跳转。j –stat 可以看你的历史路径库。&lt;/p&gt;
&lt;p&gt;你还可以参考&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zsh&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;没听过Shell?Shell是Unix/Linux系统下的外壳，负责外界和Linux内核的交互，将用户输入的命令转换成内核能懂的语言，执行相应的指令，然后将输出返回给用户．&lt;br&gt;
    
    </summary>
    
      <category term="Unix/Linux" scheme="http://www.ezlippi.com/categories/Unix-Linux/"/>
    
    
      <category term="linux" scheme="http://www.ezlippi.com/tags/linux/"/>
    
      <category term="shell" scheme="http://www.ezlippi.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Latex中英文环境设置</title>
    <link href="http://www.ezlippi.com//blog/2015/08/latex-fonts-settings.html"/>
    <id>http://www.ezlippi.com//blog/2015/08/latex-fonts-settings.html</id>
    <published>2015-08-21T16:00:00.000Z</published>
    <updated>2016-02-29T13:12:29.000Z</updated>
    
    <content type="html">&lt;p&gt;Latex默认是不支持中文的,后来有人开发了XeLatex来支持非英文字符,xetex是一种使用Unicode的TeX排版引擎,并默认其输入文件为UTF-8编码，也即,英文字符与非英文字符不再有区别，原生支持系统字体，这意味着我们无需再额外编译字体, 故可以在不进行额外配置的情况下直接使用操作系统中安装的字体。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;安装完TexLive后,编写下面的tex文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\documentclass[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;pt,a4paper]&amp;#123;article&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\usepackage&amp;#123;xltxtra,fontspec,xunicode&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\setmainfont&amp;#123;WenQuanYi Zen Hei&amp;#125; % 设置文档默认字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\date&amp;#123;&amp;#125; % 不显示文档生成日期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\title&amp;#123;\XeTeX&amp;#123;&amp;#125; 中英文环境测试&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\maketitle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\XeTeX&amp;#123;&amp;#125; is a \TeX&amp;#123;&amp;#125; typesetting engine using Unicode and supporting modern font technologies.\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\XeTeX&amp;#123;&amp;#125; 是一个使用Unicode的\TeX&amp;#123;&amp;#125;排版系统，并支持一些现代字体技术.\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用下面命令编译:&lt;code&gt;XeLatex test.tex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/latex1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面的英文也使用了中文字体, 看上去不是很美观. 于是, xetex 和 CJK 商量了一下, 就有了xeCJK 宏包, 可以分别指定中英文字体, 于是可以很好的排版中英混合的文章了．&lt;/p&gt;
&lt;p&gt;当然首先是要使用xeCJK包,添加上&lt;code&gt;\usepackage[slantfont,boldfont]{xeCJK}&lt;/code&gt;&lt;br&gt;分别设置中英文字体, 英文字体可以不用设置, xetex会调用默认的字体:&lt;code&gt;\setCJKmainfont{SimKai}   % 设置缺省中文字体为楷体&lt;/code&gt;&lt;br&gt;下面是测试文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	\documentclass[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;pt,a4paper]&amp;#123;article&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\usepackage&amp;#123;xltxtra,fontspec,xunicode&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\usepackage[slantfont,boldfont]&amp;#123;xeCJK&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\setCJKmainfont&amp;#123;WenQuanYi Zen Hei&amp;#125;   % 设置缺省中文字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%\setCJKmonofont&amp;#123;Hei&amp;#125;   % 设置等宽字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%\setmainfont&amp;#123;Optima&amp;#125;   %% 不指定，使用Tex的默认英文衬线字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%\setmonofont&amp;#123;Monaco&amp;#125;   % 英文等宽字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%\setsansfont&amp;#123;Trebuchet MS&amp;#125; % 英文无衬线字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\date&amp;#123;&amp;#125; % 不显示文档生成日期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\title&amp;#123;\XeTeX&amp;#123;&amp;#125; 中英文环境测试&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\maketitle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\XeTeX&amp;#123;&amp;#125; is a \TeX&amp;#123;&amp;#125; typesetting engine using Unicode and supporting modern font technologies.\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\XeTeX&amp;#123;&amp;#125; 是一个使用Unicode的\TeX&amp;#123;&amp;#125;排版系统，并支持一些现代字体技术.\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果如下：&lt;br&gt;&lt;img src=&quot;/images/latex2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样效果就好很多了．&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Latex默认是不支持中文的,后来有人开发了XeLatex来支持非英文字符,xetex是一种使用Unicode的TeX排版引擎,并默认其输入文件为UTF-8编码，也即,英文字符与非英文字符不再有区别，原生支持系统字体，这意味着我们无需再额外编译字体, 故可以在不进行额外配置的情况下直接使用操作系统中安装的字体。&lt;br&gt;
    
    </summary>
    
      <category term="Latex" scheme="http://www.ezlippi.com/categories/Latex/"/>
    
    
      <category term="Latex" scheme="http://www.ezlippi.com/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Dagger依赖注入浅析</title>
    <link href="http://www.ezlippi.com//blog/2015/08/dagger-dependency-injection.html"/>
    <id>http://www.ezlippi.com//blog/2015/08/dagger-dependency-injection.html</id>
    <published>2015-08-12T16:00:00.000Z</published>
    <updated>2016-02-29T13:11:57.000Z</updated>
    
    <content type="html">&lt;p&gt;最早接触依赖注入这个概念是在使用Spring框架的时候，一开始没太在意它，后面开发项目的过程中发现使用依赖注入可以降低代码的耦合性,Spring的依赖注入是通过反射机制实现的，而Dagger依赖注入是在编译期生成辅助的类，这些类继承特定父类或实现特定接口，程序在运行时 Dagger 加载这些辅助类，调用相应接口完成依赖生成和注入.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是控制反转？&quot;&gt;&lt;a href=&quot;#什么是控制反转？&quot; class=&quot;headerlink&quot; title=&quot;什么是控制反转？&quot;&gt;&lt;/a&gt;什么是控制反转？&lt;/h2&gt;&lt;p&gt;比如你有一个DataProcessor类，DataProcessor里有一个DataFinder对象，用于查找数据，DataFinder是一个接口，它有一个实现类:IndexDataFinder,如果你要使用DataFinder来查找数据，传统的做法是在DataProcessor构造器里新建一个DataFinder对象，然后再调用DataFinder的findData方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dataFinder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IndexDataFinder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述的实现中，DataProcessor就和DataFinder紧密的耦合在一起．假设后来DataFinder又有一个新的实现类SQLDataFinder,根据需求来选择相应的实现，这时候你要怎么做呢？传统的做法就是给构造器传递一个int参数，根据参数的值来初始化DataFinder,还要处理异常参数如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dataFinderIndex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dataFinderIndex == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dataFinder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IndexDataFinder();	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dataFinderIndex == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dataFinder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SQLDataFinder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样子虽然代码变得简单，但是DataProcessor类仍然依赖于具体的实现，实际上DataProcessor不应该有这么多的控制逻辑，它只需要负责调用dataFinder的方法来完成它的逻辑，至于是什么类型的DataFinder它不应该考虑．我们试着将控制DataFinder的任务交给客户：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataFinder dataFinder)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dataFinder = dataFinder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样DataProcessor就不用依赖具体的实现了，不用管到底是哪种类型的DataFinder,也就是说将选择DataFinder的控制权交给了客户端，实现了”控制反转”．控制反转只是一个概念而已，依赖注入是他的一种实现方法，依赖注入就是将实例变量传递到一个对象中去，依赖注入的方法有两种：构造器注入和setter方法注入．&lt;/p&gt;
&lt;h2 id=&quot;Dagger依赖注入&quot;&gt;&lt;a href=&quot;#Dagger依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Dagger依赖注入&quot;&gt;&lt;/a&gt;Dagger依赖注入&lt;/h2&gt;&lt;p&gt;Spring IoC和Google Guice的依赖注入都很有名，但它们都是使用Java的反射机制来实现的，这对性能要求比较高的Android平台来说就不太适合了，于是Dagger应运而生.&lt;/p&gt;
&lt;h3 id=&quot;编译期&quot;&gt;&lt;a href=&quot;#编译期&quot; class=&quot;headerlink&quot; title=&quot;编译期&quot;&gt;&lt;/a&gt;编译期&lt;/h3&gt;&lt;p&gt;Dagger在编译时使用注解处理工具(APT)对所有的类进行扫描，这里包括两个工具InjectAdapterProcessor和ModuleAdapterProcessor,InjectAdapterProcessor会扫描所有的被@inject注解的元素，包括静态域，实例域和构造器，然后根据这几个元素生成一个内部对象InjectedClass，它的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InjectedClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; TypeElement type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Element&amp;gt; staticFields;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ExecutableElement constructor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Element&amp;gt; fields;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	..............&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据域是否是静态域注入方式会有不同，非静态域生成InjectAdapter对象并保存在同个被注入类同个目录下，比如被注入的类为A,生成的类名称为A$$InjectAdapter,InjectAdapter包含了所有需要注入的实例域和构造器参数的信息．如果被注解的是静态域，则生成A$$StaticInjection.这里需要注意的是如果你是在构造函数上用@inject注解而且构造函数有其他参数，你需要给这些参数添加@inject注解或者在Module中提供provide方法（下面会讲到Module）．InjectAdapter类的生成Dagger用到了JavaPoet这个用于生成Java源文件的类库，用法简介：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MethodSpec main = MethodSpec.methodBuilder(&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.addModifiers(Modifier.PUBLIC, Modifier.STATIC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.returns(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.addParameter(String[].class, &lt;span class=&quot;string&quot;&gt;&quot;args&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.addStatement(&lt;span class=&quot;string&quot;&gt;&quot;$T.out.println($S)&quot;&lt;/span&gt;, System.class, &lt;span class=&quot;string&quot;&gt;&quot;Hello, JavaPoet!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeSpec helloWorld = TypeSpec.classBuilder(&lt;span class=&quot;string&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.addModifiers(Modifier.PUBLIC, Modifier.FINAL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.addMethod(main)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaFile javaFile = JavaFile.builder(&lt;span class=&quot;string&quot;&gt;&quot;com.example.helloworld&quot;&lt;/span&gt;, helloWorld)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;javaFile.writeTo(System.out);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这种过注入依赖的方法适合我们自己编写的类，如果是第三方类库的话你没有修改它的源代码给它的构造器或者域添加@inject注解，这时候就需要使用第二种注入依赖的方法.通过新建一个用@Module注解的类，这个类告诉Dagger编译期哪些类要注入依赖，这个Module包含哪些子Module，通过编写provide方法来生成一些依赖实例．具体用法举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Module&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	injects = CoffeeApp.class&lt;span class=&quot;comment&quot;&gt;//表示CoffeeApp这个类需要注入依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	includes = PumpModule.class&lt;span class=&quot;comment&quot;&gt;//包括PumpModule这个Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	)	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DripCoffeeModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//所有需要被注入的实例都用@Provides方法提供&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;annotation&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@Singleton&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Heater &lt;span class=&quot;title&quot;&gt;provideHeater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ElectricHeater();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//方法可以有参数，前提是这个参数能够被注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;annotation&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Pump &lt;span class=&quot;title&quot;&gt;providePump&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Heater heater)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thermosiphon(heater);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译时Dagger编译期扫描所有被@Provides注解的方法，然后扫描它所在的类是否被＠Module注解，根据Module注解的参数injects,includes,complete,library生成ModuleAdapter类，保存为［Module名称］$$ModuleAdapter的形式,内部使用的是generateModuleAdapter方法，定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; JavaFile &lt;span class=&quot;title&quot;&gt;generateModuleAdapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TypeElement type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Map&amp;lt;String, Object&amp;gt; module, List&amp;lt;ExecutableElement&amp;gt; providerMethods)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object[] injects = (Object[]) module.get(&lt;span class=&quot;string&quot;&gt;&quot;injects&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object[] includes = (Object[]) module.get(&lt;span class=&quot;string&quot;&gt;&quot;includes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; complete = (Boolean) module.get(&lt;span class=&quot;string&quot;&gt;&quot;complete&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; library = (Boolean) module.get(&lt;span class=&quot;string&quot;&gt;&quot;library&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//省略了其他部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行时，在 Application 或某个具体模块的初始化处，使用ObjectGraph类来加载部分依赖(实质上是利用编译时生成的ModuleAdapters加载了所有的ProvidesBinding)，形成一个不完整的依赖关系图。 这个不完整的依赖关系图生成之后，就可以调用ObjectGraph的相应函数来获取实例和注入依赖了。实现依赖注入的函数有两个：&lt;code&gt;ObjectGraph.get(Class&amp;lt;T&amp;gt; type)&lt;/code&gt;函数，用于直接获取对象；&lt;code&gt;ObjectGraph.inject(T instance)&lt;/code&gt;函数，用于对指定对象进行属性的注入。在这些获取实例和注入依赖的过程中，如果用到了还未加载的依赖，程序会自动对它们进行加载(实质上是加载的编译时生成的InjectAdapter)。在此过程中，内存中的 DAG 也被补充地越来越完整。&lt;/p&gt;
&lt;p&gt;简单介绍一些Dagger的Binding 类，它相当于依赖关系 DAG 图中的节点，依赖关系 DAG 图中得每一个节点都有一个由 APT 生成的继承自 Binding 的类与之对应，而依赖关系 DAG 图中的每一个节点与Host和Dependency一一对应，所以每个Host或Dependency必然有一个由 APT 生成的继承自 Binding 的子类与之对应，Binding.java 实现了两个接口，第一个是 javax 的Provider接口，此接口提供了 get() 函数用于返回一个Dependency实例，当然也可以是Host实例。第二个接口是 Dagger 中的MembersInjector接口，此接口提供了 injectMembers() 用来向Host对象中注入Dependency。&lt;br&gt;单纯的DependencyBinding只要实现Provider接口，在 get() 函数中返回自己的实例即可。单纯的HostBinding只要实现MembersInjector，在 injectMembers() 函数中调用DependencyBinding的 get() 函数得到依赖，然后对自己的依赖进行注入即可。如果一个类既是Host又是Dependency，则与它对应的Binding这两个接口都需要实现。&lt;/p&gt;
&lt;p&gt;还是之前那个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeApp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@Inject&lt;/span&gt; CoffeeMaker coffeeMaker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		coffeeMaker.brew();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//建立依赖关系图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ObjectGraph objectGraph = ObjectGraph.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DripCoffeeModule());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//调用objectGraph．get(CoffeeApp.class)来获取一个CoffeeApp实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CoffeeApp coffeeApp = objectGraph.get(CoffeeApp.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	coffeeApp.run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CoffeeMaker的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@Inject&lt;/span&gt; Lazy&amp;lt;Heater&amp;gt; heater; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@Inject&lt;/span&gt; Pump pump;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 heater.get().on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pump.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; [_]P coffee! [_]P &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 heater.get().off();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;这样在运行中Dagger会自动注入CoffeeMaker实例以及它依赖的对象heater和pump.
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最早接触依赖注入这个概念是在使用Spring框架的时候，一开始没太在意它，后面开发项目的过程中发现使用依赖注入可以降低代码的耦合性,Spring的依赖注入是通过反射机制实现的，而Dagger依赖注入是在编译期生成辅助的类，这些类继承特定父类或实现特定接口，程序在运行时 Dagger 加载这些辅助类，调用相应接口完成依赖生成和注入.&lt;/p&gt;
    
    </summary>
    
      <category term="gradle" scheme="http://www.ezlippi.com/categories/gradle/"/>
    
    
      <category term="java, gradle" scheme="http://www.ezlippi.com/tags/java-gradle/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解Gradle的任务</title>
    <link href="http://www.ezlippi.com//blog/2015/07/gradle-tasks-guide.html"/>
    <id>http://www.ezlippi.com//blog/2015/07/gradle-tasks-guide.html</id>
    <published>2015-07-26T16:00:00.000Z</published>
    <updated>2016-02-29T13:10:22.000Z</updated>
    
    <content type="html">&lt;p&gt;在Gradle的build文件中，任务是构建活动最基本的单元，它是许多构建指令的集合，下面我将仔细介绍Gradle任务的细节。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明一个任务&quot;&gt;&lt;a href=&quot;#声明一个任务&quot; class=&quot;headerlink&quot; title=&quot;声明一个任务&quot;&gt;&lt;/a&gt;声明一个任务&lt;/h2&gt;&lt;p&gt;声明任务很简单，你只需要一个任务名：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在命令行中使用&lt;code&gt;gradle tasks&lt;/code&gt;来查看所有的任务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;------------------------------------------------------------
Root Project
------------------------------------------------------------
Help tasks
----------
dependencies - Displays the dependencies of root project &amp;apos;task-lab&amp;apos;.
help - Displays a help message
projects - Displays the subprojects of root project &amp;apos;task-lab&amp;apos;.
properties - Displays the properties of root project &amp;apos;task-lab&amp;apos;.
13
tasks - Displays the tasks in root project &amp;apos;task-lab&amp;apos;.
Other tasks
-----------
hello
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;任务的动作&quot;&gt;&lt;a href=&quot;#任务的动作&quot; class=&quot;headerlink&quot; title=&quot;任务的动作&quot;&gt;&lt;/a&gt;任务的动作&lt;/h2&gt;&lt;p&gt;很显然执行&lt;code&gt;gradle hello&lt;/code&gt;不会有任何结果，因为你没有给这个任务添加动作，我们可以通过左移操作符给任务添加一个动作(在Groovy语言中左移操作符可以重载成在任务的最后添加一个动作)：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task hello &amp;lt;&amp;lt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;hello,world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以在任务的后面引用前面声明的任务:&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &lt;span class=&quot;string&quot;&gt;&#39;hello,&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来在命令行中运行&lt;code&gt;gradle hello&lt;/code&gt;,输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle hello
hello, world
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##任务的配置&lt;/p&gt;
&lt;p&gt;Gradle新手可能会很容易混淆任务的动作和配置，看下面这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task initializeDatabase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;connect to database&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;update database schema&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;configuring database connection&#39;&lt;/span&gt; &amp;#125;&lt;span class=&quot;comment&quot;&gt;//这里没有左移操作符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行这个构建脚本，猜猜输出是什么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//－b 选项用于指定gradle构建脚本文件名
$ gradle -b scratch.gradle initializeDatabase
configuring database connection
:initializeDatabase
connect to database
update database schema
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果第三个代码块我们用的是&amp;lt;&amp;lt;操作浮，这个消息就是在最后而不是最先打印出来了，我把用{}扩起来的部分统称为一个闭包，上面第三个闭包并不是任务的动作，他直接使用了任务名+闭包，在这里它是一个配置块。在Gradle的构建生命周期里配置阶段是在执行阶段前运行的，所以这个块里的代码最先执行了。&lt;/p&gt;
&lt;p&gt;Gradle的构建生命周期分为三部分，初始化、配置和执行阶段。在执行阶段，任务按照他们的依赖顺序按序执行，在配置阶段所有的任务都转换成Gradle的内部对象模型，通常叫做有向无环图(DAG)。图的节点就是构建脚本里的任务，任务与任务之间可以定义依赖关系。初始化阶段是Gradle用来找出哪些项目会参与到项目构建中，这在多项目构建中很重要。&lt;/p&gt;
&lt;p&gt;和动作闭包一样，配置闭包也具有可加性，你可以像下面这样编写构建脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task initializeDatabase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;connect to database&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;update database schema&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;#123; print &lt;span class=&quot;string&quot;&gt;&#39;configuring &#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initializeDatabase &amp;#123; println &lt;span class=&quot;string&quot;&gt;&#39;database connection&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置块是用来放置变量和数据结构的地方，这些可能会在任务的执行过程中用到。&lt;/p&gt;
&lt;h2 id=&quot;一切任务都是对象&quot;&gt;&lt;a href=&quot;#一切任务都是对象&quot; class=&quot;headerlink&quot; title=&quot;一切任务都是对象&quot;&gt;&lt;/a&gt;一切任务都是对象&lt;/h2&gt;&lt;p&gt;前面讲过Gradle会在任务执行之前把他们创建成内部的对象模型，每一个你声明的任务都是一个任务对象，这个对象有自己的属性和方法，就和Java语言里的对象一样，我们可以控制每个任务对象的类型。默认情况每一个新创建的任务都是DefaultTask类型，就像Java语言里的java.lang.Object一样，每一个Gradle任务都继承自DefaultTask类型，你也可以定义自己的类型。DefaultTask事实上没有做任务事情，不过它具有基本的属性和方法用来和Gradle项目模型交互。接下来我会一一介绍每个任务都有的方法和属性。&lt;/p&gt;
&lt;h2 id=&quot;DefaultTask的方法&quot;&gt;&lt;a href=&quot;#DefaultTask的方法&quot; class=&quot;headerlink&quot; title=&quot;DefaultTask的方法&quot;&gt;&lt;/a&gt;DefaultTask的方法&lt;/h2&gt;&lt;h3 id=&quot;dependsOn-task&quot;&gt;&lt;a href=&quot;#dependsOn-task&quot; class=&quot;headerlink&quot; title=&quot;dependsOn(task)&quot;&gt;&lt;/a&gt;dependsOn(task)&lt;/h3&gt;&lt;p&gt;用于给任务添加一个依赖的任务，被依赖的任务总是在依赖它的任务之前运行，你可以有多种方式声明这种依赖关系，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//最简单的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	dependsOn createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用&amp;lt;&amp;lt;声明依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependsOn &amp;lt;&amp;lt; createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用单引号声明依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependsOn &lt;span class=&quot;string&quot;&gt;&#39;createSchema&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//显式调用dependsOn方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loadTestData.dependsOn createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 快捷方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData(&lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; createSchema)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;任务可以依赖多个任务，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//每次声明一个任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependsOn &amp;lt;&amp;lt; compileTestClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependsOn &amp;lt;&amp;lt; createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 依次传递任务名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task world &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependsOn compileTestClasses, createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 显式调用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;world.dependsOn compileTestClasses, createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//快捷方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task world(&lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; [ compileTestClasses, createSchema ])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;doFirst-closure&quot;&gt;&lt;a href=&quot;#doFirst-closure&quot; class=&quot;headerlink&quot; title=&quot;doFirst(closure)&quot;&gt;&lt;/a&gt;doFirst(closure)&lt;/h3&gt;&lt;p&gt;在任务的最开始添加一个可执行的代码块，doFirst方法允许你添加动作到现有的任务中，这个任务是在其他插件中定义的，你没有办法修改，但是你可以多次调用doFirst方法在任务执行之前添加一些代码块。&lt;br&gt;你可以使用任务对象调用doFirst方法，传递一个闭包给这个方法，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task setupDatabaseTests &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 任务现有的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &lt;span class=&quot;string&quot;&gt;&#39;load test data&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setupDatabaseTests.doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &lt;span class=&quot;string&quot;&gt;&#39;create schema&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后运行gradle setupDatabaseTests,结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle setupDatabaseTests
:setupDatabaseTests
create schema
load test data
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以在任务的配置块里面调用doFirst方法，不过要记住配置块里的代码在任务的动作之前执行：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task setupDatabaseTests &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;load test data&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setupDatabaseTests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;create schema&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;doFirst方法也是可加的，你可以多次调用这个方法在任务的最前面添加代码块，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task setupDatabaseTests &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;load test data&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setupDatabaseTests.doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;create database schema&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setupDatabaseTests.doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;drop database schema&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle world
:setupDatabaseTests
drop database schema
create database schema
load test data
$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;doLast-closure&quot;&gt;&lt;a href=&quot;#doLast-closure&quot; class=&quot;headerlink&quot; title=&quot;doLast(closure)&quot;&gt;&lt;/a&gt;doLast(closure)&lt;/h3&gt;&lt;p&gt;doLast方法和doFirst方法很类似，它用于在任务的最后面添加一段代码，这里就不重复了。&lt;/p&gt;
&lt;h3 id=&quot;onlyIf-closure&quot;&gt;&lt;a href=&quot;#onlyIf-closure&quot; class=&quot;headerlink&quot; title=&quot;onlyIf(closure)&quot;&gt;&lt;/a&gt;onlyIf(closure)&lt;/h3&gt;&lt;p&gt;onlyIf方法用于决定是否执行一个任务，这里使用闭包返回的值来作为onlyIf的判断依据，在Groovy语言中，一个闭包的最后一个表达式用来作为这个闭包的返回值，即使你没有声明return语句，看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createSchema &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &#39;create database schema&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadTestData(dependsOn: createSchema) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &#39;load test data&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loadTestData.onlyIf &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.properties[&#39;load.data&#39;] == &#39;true&#39;//当系统属性load.data为true时这个闭包返回true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;看下下面的运行结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//这里没有系统属性load.data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ build loadTestData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    create database schema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :loadTestData SKIPPED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在命令行中传递系统属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ gradle -Dload.data=true loadTestData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :createSchema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    create database schema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :loadTestData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    load test data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##DefaultTask的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###didWork&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个用来标识任务是否成功完成的boolean属性，不是所有的任务都是在完成之后设置didWork变量，一些自带的任务比如Compile,Copy和Delete会根据动作是否执行成功来设置这个变量，JavaCompiler任务的实现是只要有一个文件成功编译就返回true,你可以在你自己的任务中设置didWork属性来反映构建代码的执行结果，举例如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` Groovy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &#39;java&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task emailMe(dependsOn: compileJava) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(tasks.compileJava.didWork) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	println &#39;SEND EMAIL ANNOUNCING SUCCESS&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle -b didWork.gradle emailMe
SEND EMAIL ANNOUNCING SUCCESS
$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;enabled&quot;&gt;&lt;a href=&quot;#enabled&quot; class=&quot;headerlink&quot; title=&quot;enabled&quot;&gt;&lt;/a&gt;enabled&lt;/h3&gt;&lt;p&gt;一个用来设置任务是否会执行的一个属性，你可以设置enabled为false不让它运行，但是它依赖的任务依然会运行。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task templates &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;process email templates&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task sendEmails(&lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; templates) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;send emails&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendEmails.enabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle -b enabled.gradle sendEmails
:templates
process email templates
:sendEmails SKIPPED
$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;path&quot;&gt;&lt;a href=&quot;#path&quot; class=&quot;headerlink&quot; title=&quot;path&quot;&gt;&lt;/a&gt;path&lt;/h3&gt;&lt;p&gt;一个字符串属性包含任务的全限定路径名，默认是一个冒号加上任务名，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task echoMyPath &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &lt;span class=&quot;string&quot;&gt;&quot;THIS TASK&#39;S PATH IS $&amp;#123;path&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行一下，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle -b path.gradle echoMyPath
THIS TASK&amp;apos;S PATH IS :echoMyPath
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最开始的冒号表示这个任务在最顶级的构建文件里面，由于Gradle支持多项目构建，一个项目里面可能有多个子项目，假如echoMyPath在子项目subProject构建文件中,那它的全限定路径名就是:subProject:echoMyPath。&lt;/p&gt;
&lt;h3 id=&quot;description&quot;&gt;&lt;a href=&quot;#description&quot; class=&quot;headerlink&quot; title=&quot;description&quot;&gt;&lt;/a&gt;description&lt;/h3&gt;&lt;p&gt;正如它的名字一样，这个用来给一个任务添加一段容易阅读的描述，你可以使用如下几种方法给任务添加描述。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task helloWorld(&lt;span class=&quot;string&quot;&gt;description:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task helloWorld &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;helloWorld &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description = &lt;span class=&quot;string&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Another way to do it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;helloWorld.description = &lt;span class=&quot;string&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;任务的类型&quot;&gt;&lt;a href=&quot;#任务的类型&quot; class=&quot;headerlink&quot; title=&quot;任务的类型&quot;&gt;&lt;/a&gt;任务的类型&lt;/h2&gt;&lt;p&gt;我前面说过每个任务都有一个类型。除了DefaultTask之外，还有许多其他类型，你可以继承DefaultTask来声明新的类型，下面介绍几种比较重要的类型，以后可能经常会用到。&lt;/p&gt;
&lt;h3 id=&quot;Copy&quot;&gt;&lt;a href=&quot;#Copy&quot; class=&quot;headerlink&quot; title=&quot;Copy&quot;&gt;&lt;/a&gt;Copy&lt;/h3&gt;&lt;p&gt;Copy任务用于把文件从一个地方复制到另一个地方，你可以设置源目录、目标目录和要复制的文件类型，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task copyFiles(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Copy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from &lt;span class=&quot;string&quot;&gt;&#39;resources&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    into &lt;span class=&quot;string&quot;&gt;&#39;target&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    include &lt;span class=&quot;string&quot;&gt;&#39;**/*.xml&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;**/*.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;**/*.properties&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果目标目录不存在,Copy任务会自动创建，上面这个任务会把resources目录下所有的xml、txt和propertied文件都复制到target目录。&lt;/p&gt;
&lt;h3 id=&quot;Jar&quot;&gt;&lt;a href=&quot;#Jar&quot; class=&quot;headerlink&quot; title=&quot;Jar&quot;&gt;&lt;/a&gt;Jar&lt;/h3&gt;&lt;p&gt;Jar任务用于打包源代码生成Jar文件，Java插件就自带这种类型，任务类型就叫做jar,这个任务把源代码文件和资源文件打包成Jar文件，并保存在build/libs目录下，文件名默认是用项目的名称。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task customJar(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Jar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manifest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置一些属性值(以键值对的形式)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attributes &lt;span class=&quot;string&quot;&gt;firstKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;firstValue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;secondKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;secondValue&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;archiveName = &lt;span class=&quot;string&quot;&gt;&#39;hello.jar&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//目标路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;destinationDir = file(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;buildDir&amp;#125;/jars&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//file方法用于把一个字符串变成文件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//要打包的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from sourceSets.main.classes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;JavaExec&quot;&gt;&lt;a href=&quot;#JavaExec&quot; class=&quot;headerlink&quot; title=&quot;JavaExec&quot;&gt;&lt;/a&gt;JavaExec&lt;/h3&gt;&lt;p&gt;用于执行一个Java类的main()方法。举例说明：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//maven中央仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//项目依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime &lt;span class=&quot;string&quot;&gt;&#39;commons-codec:commons-codec:1.5&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task encode(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; JavaExec, &lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; classes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main = &lt;span class=&quot;string&quot;&gt;&#39;org.gradle.example.commandline.MetaphoneEncoder&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args = &lt;span class=&quot;string&quot;&gt;&quot;The rain in Spain falls mainly in the plain&quot;&lt;/span&gt;.split().toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classpath sourceSets.main.classesDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classpath configurations.runtime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个构建文件声明了一个外部依赖，Apache Commons Codec库。一般情况下，在命令行运行一个class文件的步骤是编译Java源文件，然后在命令行中设置class文件的路径和依赖的库文件。我们上面encode任务声明了main函数所在的类，给他传递了命令行参数，设置classpath参数。&lt;/p&gt;
&lt;h2 id=&quot;编写自定义的任务类型&quot;&gt;&lt;a href=&quot;#编写自定义的任务类型&quot; class=&quot;headerlink&quot; title=&quot;编写自定义的任务类型&quot;&gt;&lt;/a&gt;编写自定义的任务类型&lt;/h2&gt;&lt;p&gt;如果Gradle自带的任务类型不满足你的工作需求时，最简单的办法就是编写自定义的任务类型，Gradle提供了多种方法来实现，这里我介绍两种最常用的方法。&lt;/p&gt;
&lt;h3 id=&quot;在Build文件中编写自定义任务类型&quot;&gt;&lt;a href=&quot;#在Build文件中编写自定义任务类型&quot; class=&quot;headerlink&quot; title=&quot;在Build文件中编写自定义任务类型&quot;&gt;&lt;/a&gt;在Build文件中编写自定义任务类型&lt;/h3&gt;&lt;p&gt;假设你的构建脚本需要对MySQL数据库执行一些随机的查询，下面我们来编写一个任务执行数据库查询：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createDatabase(type: MySqlTask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &#39;CREATE DATABASE IF NOT EXISTS example&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createUser(type: MySqlTask, dependsOn: createDatabase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &quot;GRANT ALL PRIVILEGES ON example.*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TO exampleuser@localhost IDENTIFIED BY &#39;passw0rd&#39;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createTable(type: MySqlTask, dependsOn: createUser) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = &#39;exampleuser&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password = &#39;passw0rd&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    database = &#39;example&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &#39;CREATE TABLE IF NOT EXISTS users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (id BIGINT PRIMARY KEY, username VARCHAR(100))&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class MySqlTask extends DefaultTask &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //声明任务的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def hostname = &#39;localhost&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def port = 3306&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def database&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def username = &#39;root&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def password = &#39;password&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//表示这是任务的动作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@TaskAction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def runQuery() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	def cmd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(database) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &quot;mysql -u $&amp;#123;username&amp;#125; -p$&amp;#123;password&amp;#125; -h 	$&amp;#123;hostname&amp;#125;-P $&amp;#123;port&amp;#125; $&amp;#123;database&amp;#125; -e &quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &quot;mysql -u $&amp;#123;username&amp;#125; -p$&amp;#123;password&amp;#125; -h $&amp;#123;hostname&amp;#125; -P $&amp;#123;port&amp;#125; -e &quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.exec &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	commandLine = cmd.split().toList() + sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的MySqlTask继承自DefaultTask,所有的任务都必须继承自这个类或者它的子类。任务声明了几个属性，然后声明了一个方法runQuery(),这个方法用@TaskAction注解了，表示这个方法会在任务执行的时候执行。最上面定义的三个任务都声明为MySqlTask类型，因此他们都自动继承了它的属性和方法，有些属性有默认值，你可以覆写这些默认值，来添加你的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;在源码树中定义自定义任务类型&quot;&gt;&lt;a href=&quot;#在源码树中定义自定义任务类型&quot; class=&quot;headerlink&quot; title=&quot;在源码树中定义自定义任务类型&quot;&gt;&lt;/a&gt;在源码树中定义自定义任务类型&lt;/h3&gt;&lt;p&gt;前面你在build文件中定义了一个自定义的MySqlTask类型，这样的缺点就是你无法在其他构建文件中使用它，只能把它的源码复制过去。我们可以在源码树的buildSrc目录下定义自定义任务类型，这个目录下的文件会被自动编译然后添加到项目的classpath中，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//任务MySqlTask并没有定义在构建脚本中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createDatabase(type: MySqlTask) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &#39;CREATE DATABASE IF NOT EXISTS example&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createUser(type: MySqlTask, dependsOn: createDatabase) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &quot;GRANT ALL PRIVILEGES ON example.*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TO exampleuser@localhost IDENTIFIED BY &#39;passw0rd&#39;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task createTable(type: MySqlTask, dependsOn: createUser) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = &#39;exampleuser&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password = &#39;passw0rd&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    database = &#39;example&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql = &#39;CREATE TABLE IF NOT EXISTS users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (id BIGINT PRIMARY KEY, username VARCHAR(100))&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在buildSrc目录下新建一个文件MysqlTask.groovy,然后添加下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.DefaultTask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.tasks.TaskAction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MySqlTask&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultTask&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//声明任务的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; hostname = &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; database&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; username = &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; password = &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表示这是任务的动作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@TaskAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; runQuery() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; cmd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(database) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &lt;span class=&quot;string&quot;&gt;&quot;mysql -u $&amp;#123;username&amp;#125; -p$&amp;#123;password&amp;#125; -h 	$&amp;#123;hostname&amp;#125;-P $&amp;#123;port&amp;#125; $&amp;#123;database&amp;#125; -e &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &lt;span class=&quot;string&quot;&gt;&quot;mysql -u $&amp;#123;username&amp;#125; -p$&amp;#123;password&amp;#125; -h $&amp;#123;hostname&amp;#125; -P $&amp;#123;port&amp;#125; -e &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.exec &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	commandLine = cmd.split().toList() + sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译之后buildSrc目录树如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/gradle-tasks.png&quot; alt=&quot;/images/gradle-tasks.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;对Gradle的任务介绍就到此为止，大家如果还有不懂的地方可以去查看Gradle的官方文档&lt;a href=&quot;https://docs.gradle.org/current/release-notes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.gradle.org/current/release-notes&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Gradle的build文件中，任务是构建活动最基本的单元，它是许多构建指令的集合，下面我将仔细介绍Gradle任务的细节。&lt;br&gt;
    
    </summary>
    
      <category term="gradle" scheme="http://www.ezlippi.com/categories/gradle/"/>
    
    
      <category term="java, gradle" scheme="http://www.ezlippi.com/tags/java-gradle/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate缓存配置笔记</title>
    <link href="http://www.ezlippi.com//blog/2015/07/hibernate-cache-guide.html"/>
    <id>http://www.ezlippi.com//blog/2015/07/hibernate-cache-guide.html</id>
    <published>2015-07-23T16:00:00.000Z</published>
    <updated>2016-02-29T13:57:50.000Z</updated>
    
    <content type="html">&lt;p&gt;Hibernate中提供了两级Cache，第一级别的缓存是Session级别的缓存，这一级别的缓存由hibernate管理的，一般情况下无需进行干预；第二级别的缓存是SessionFactory级别的缓存，它是属于进程范围或群集范围的缓存,这一级别的缓存可以进行配置和更改，并且可以动态加载和卸载。 Hibernate还为查询结果提供了一个查询缓存，它依赖于第二级缓存。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;一级缓存和二级缓存的要点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/hibernate1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/hibernate2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/hibernate3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用二级缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里以EhCache作为二级缓存的插件为例介绍Hibernate二级缓存的配置。&lt;/p&gt;
&lt;p&gt;（1）打开二级缓存：&lt;/p&gt;
&lt;p&gt;为Hibernate配置二级缓存：&lt;/p&gt;
&lt;p&gt;在主配置文件中hibernate.cfg.xml ：&lt;/p&gt;
&lt;p&gt;Hibernate3.3以上：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property     name=&amp;quot;hibernate.cache.region.factory_class&amp;quot;&amp;gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hibernate4.0以上,使用&lt;code&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/code&gt;代替&lt;code&gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--二级缓存--&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
&amp;lt;!--查询缓存--&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.cache.use_query_cache&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
在查询定义的地方加入setCacheable(true)，这次查询就被缓存起来了 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（2）配置ehcache.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ehcache&amp;gt;
&amp;lt;!--缓存到硬盘的路径--&amp;gt;
&amp;lt;diskStore path=&amp;quot;/home/lippi/ehcache&amp;quot;/&amp;gt;
&amp;lt;defaultCache
maxElementsInMemory=&amp;quot;200&amp;quot;&amp;lt;!-- 最多缓存多少个对象 --&amp;gt;
eternal=&amp;quot;false&amp;quot;&amp;lt;!-- 内存中的对象是否永远不变 --&amp;gt;
timeToIdleSeconds=&amp;quot;50&amp;quot;&amp;lt;!--空闲了多长时间，超过这个时间清除 --&amp;gt;
timeToLiveSeconds=&amp;quot;60&amp;quot;&amp;lt;!--总共存活时间 --&amp;gt;
overflowToDisk=&amp;quot;true&amp;quot;&amp;lt;!--内存中溢出就放到硬盘上 --&amp;gt;
/&amp;gt;

&amp;lt;cache name=&amp;quot;org.hibernate.cache.spi.UpdateTimestampsCache&amp;quot;  
       maxElementsInMemory=&amp;quot;5000&amp;quot;   
       eternal=&amp;quot;true&amp;quot;   
       overflowToDisk=&amp;quot;true&amp;quot; /&amp;gt;  
&amp;lt;cache name=&amp;quot;org.hibernate.cache.internal.StandardQueryCache&amp;quot;  
       maxElementsInMemory=&amp;quot;10000&amp;quot;   
       eternal=&amp;quot;false&amp;quot;   
       timeToLiveSeconds=&amp;quot;120&amp;quot;  
       overflowToDisk=&amp;quot;true&amp;quot; /&amp;gt; 
&amp;lt;!--
java文件注解查找cache方法名的策略：如果不指定java文件注解中的    region=&amp;quot;ehcache.xml中的name的属性值&amp;quot;, 则使用name名为全限定包名, 如果不存在与类名匹配的cache名称, 则用 defaultCache，如果类中包含set集合, 则需要另行指定其cache指定缓存的对象，缓存哪一个实体类，下面出现的的属性覆盖上面出现的，没出现的继承上面的。
--&amp;gt;
&amp;lt;cache name=&amp;quot;com.lippi.hibernate.pojos.Order&amp;quot;
maxElementsInMemory=&amp;quot;200&amp;quot;
eternal=&amp;quot;true&amp;quot;
timeToIdleSeconds=&amp;quot;0&amp;quot;
timeToLiveSeconds=&amp;quot;0&amp;quot;
overflowToDisk=&amp;quot;false&amp;quot;
/&amp;gt;
&amp;lt;/ehcache&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（3）使用二级缓存需要在实体类中加入注解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Load默认使用二级缓存，就是当查一个对象的时候，它先会去二级缓存里面去找，如果找到了就不去数据库中查了。&lt;/p&gt;
&lt;p&gt;Iterator默认的也会使用二级缓存，有的话就不去数据库里面查了，不发送select语句了。&lt;/p&gt;
&lt;p&gt;List默认的往二级缓存中加数据，假如有一个query，把数据拿出来之后会放到二级缓存，但是执行查询的时候不会到二级缓存中查，会在数据库中查。原因每个query中查询条件不一样。&lt;/p&gt;
&lt;p&gt;（4）也可以在需要被缓存的对象中hbm文件中的&lt;class&gt;标签下添加一个&lt;cache&gt;子标签:&lt;/cache&gt;&lt;/class&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;hibernate-mapping&amp;gt;
&amp;lt;class name=&amp;quot;com.lippi.hibernate.pojos.Order&amp;quot; table=&amp;quot;Orders&amp;quot;&amp;gt;
&amp;lt;cache usage=&amp;quot;read-only&amp;quot;/&amp;gt;
&amp;lt;id name=&amp;quot;id&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;
&amp;lt;column name=&amp;quot;id&amp;quot;&amp;gt;&amp;lt;/column&amp;gt;
&amp;lt;generator class=&amp;quot;uuid&amp;quot;&amp;gt;&amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;
&amp;lt;property name=&amp;quot;orderNumber&amp;quot; column=&amp;quot;orderNumber&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;cost&amp;quot; column=&amp;quot;cost&amp;quot; type=&amp;quot;integer&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;many-to-one name=&amp;quot;customer&amp;quot; class=&amp;quot;com.lippi.hibernate.pojos.Customer&amp;quot;
column=&amp;quot;customer_id&amp;quot; cascade=&amp;quot;save-update&amp;quot;&amp;gt;
&amp;lt;/many-to-one&amp;gt;
&amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;存在一对多的关系，想要在在获取一方的时候将关联的多方缓存起来，需要在集合属性下添加&lt;cache&gt;子标签，这里需要将关联的对象的hbm文件中必须在存在&lt;class&gt;标签下也添加&lt;cache&gt;标签，不然Hibernate只会缓存OID。&lt;/cache&gt;&lt;/class&gt;&lt;/cache&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;hibernate-mapping&amp;gt;
&amp;lt;class name=&amp;quot;com.lippi.hibernate.pojos.Customer&amp;quot; table=&amp;quot;customer&amp;quot;&amp;gt;
&amp;lt;!-- 主键设置--&amp;gt;
&amp;lt;id name=&amp;quot;id&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;
&amp;lt;column name=&amp;quot;id&amp;quot;&amp;gt;&amp;lt;/column&amp;gt;
&amp;lt;generator class=&amp;quot;uuid&amp;quot;&amp;gt;&amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;
&amp;lt;!-- 属性设置--&amp;gt;
&amp;lt;property name=&amp;quot;username&amp;quot; column=&amp;quot;username&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;balance&amp;quot; column=&amp;quot;balance&amp;quot; type=&amp;quot;integer&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;set name=&amp;quot;orders&amp;quot; inverse=&amp;quot;true&amp;quot; cascade=&amp;quot;all&amp;quot; lazy=&amp;quot;false&amp;quot; fetch=&amp;quot;join&amp;quot;&amp;gt;
&amp;lt;cache usage=&amp;quot;read-only&amp;quot;/&amp;gt;
&amp;lt;key column=&amp;quot;customer_id&amp;quot; &amp;gt;&amp;lt;/key&amp;gt;
&amp;lt;one-to-many class=&amp;quot;com.lippi.hibernate.pojos.Order&amp;quot;/&amp;gt;
&amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(5)在hibernate.cfg.xml中配置ehcache.xml文件的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;cache.provider_configuration_file_resource_path&amp;quot;&amp;gt;config/hibernate/ehcache/ehcache.xml&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(6)和Spring集成&lt;/p&gt;
&lt;p&gt;在Spring集成Hibernate配置中，添加如下属性:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;prop key=&amp;quot;hibernate.cache.use_second_level_cache&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;
&amp;lt;prop key=&amp;quot;hibernate.cache.use_query_cache&amp;quot;&amp;gt;true&amp;lt;/prop&amp;gt;
&amp;lt;prop key=&amp;quot;hibernate.cache.region.factory_class&amp;quot;&amp;gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&amp;lt;/prop&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Hibernate中提供了两级Cache，第一级别的缓存是Session级别的缓存，这一级别的缓存由hibernate管理的，一般情况下无需进行干预；第二级别的缓存是SessionFactory级别的缓存，它是属于进程范围或群集范围的缓存,这一级别的缓存可以进行配置和更改，并且可以动态加载和卸载。 Hibernate还为查询结果提供了一个查询缓存，它依赖于第二级缓存。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.ezlippi.com/categories/java/"/>
    
    
      <category term="cache" scheme="http://www.ezlippi.com/tags/cache/"/>
    
      <category term="hibernate" scheme="http://www.ezlippi.com/tags/hibernate/"/>
    
      <category term="java" scheme="http://www.ezlippi.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Lambda简明教程</title>
    <link href="http://www.ezlippi.com//blog/2015/06/java-lambda-expression.html"/>
    <id>http://www.ezlippi.com//blog/2015/06/java-lambda-expression.html</id>
    <published>2015-06-02T16:00:00.000Z</published>
    <updated>2016-02-29T13:03:46.000Z</updated>
    
    <content type="html">&lt;p&gt;许多热门的编程语言如今都有一个叫做lambda或者闭包的语言特性，包括比较经典的函数式编程语言Lisp,Scheme,也有稍微年轻的语言比如JavaScript,Python,Ruby,Groovy,Scale,C#,甚至C++也有Lambda表达式。一些语言是运行在java虚拟机上，作为虚拟机最具代表的语言java当然也不想落后。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;究竟什么是Lambda表达式&quot;&gt;&lt;a href=&quot;#究竟什么是Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;究竟什么是Lambda表达式?&quot;&gt;&lt;/a&gt;究竟什么是Lambda表达式?&lt;/h1&gt;&lt;p&gt;Lambda表达式的概念来自于Lambda演算，下面是一个java lambda的简单例子，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单来看lambda像一个没有名字的方法，它具有一个方法应该有的部分：参数列表&lt;code&gt;int x&lt;/code&gt;，方法body　&lt;code&gt;return x+1&lt;/code&gt;,和方法相比lambda好像缺少了一个返回值类型、异常抛出和名字。返回值类型和异常是通过编译器在方法体中推导出来，在上面这个例子中返回值类型是int,没有抛出异常。真正缺少的就是一个名字，从这个角度来看，lambda表达式是一种匿名方法。&lt;/p&gt;
&lt;h1 id=&quot;Lambda表达式和匿名内部类&quot;&gt;&lt;a href=&quot;#Lambda表达式和匿名内部类&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式和匿名内部类&quot;&gt;&lt;/a&gt;Lambda表达式和匿名内部类&lt;/h1&gt;&lt;p&gt;从上面的分析可以看出lambda和java内部类的特性有点相似，匿名内部类不只是一个方法，而是一个包含一个或多个方法的类，他们的作用都是一样的，都是作为方法的参数传递，我从JDK源码中提取出来&lt;code&gt;listFiles(FileFilter)&lt;/code&gt; 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; File[] listFiles(FileFilter filter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String ss[] = list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ss == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ArrayList&amp;lt;File&amp;gt; files = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (String s : ss) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		File f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(s, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((filter == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) || filter.accept(f))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		files.add(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; files.toArray(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File[files.size()]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;listFilter&lt;/code&gt;方法接收一个功能接口作为参数，在这里是FileFilter接口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileFilter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File pathname)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;fileFilter&lt;/code&gt;接收一个&lt;code&gt;File&lt;/code&gt;对象返回一个&lt;code&gt;boolean&lt;/code&gt;值，&lt;code&gt;listFiles&lt;/code&gt;方法把&lt;code&gt;Filter&lt;/code&gt;应用到所有的&lt;code&gt;File&lt;/code&gt;对象接收 那些&lt;code&gt;accept&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;的文件。对于&lt;code&gt;listFiles&lt;/code&gt;方法来讲我们必须传递一个函数式接口给他，这是&lt;code&gt;FileFileter&lt;/code&gt;的一个实现，一般我们通过匿名类来完成：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File myDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;／home/user/files&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myDir.isDirectory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File[] files = myDir.listFiles(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileFilter() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File f)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　我们现在可以用lambda来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File myDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;／home/user/files&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myDir.isDirectory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File[] files = myDir.listFiles(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(File f) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两种情况我们都是传递了一个函数式接口给方法就像传递对象一样，我们使用代码就像使用数据一样，使用匿名类我们实际上传递了一个对象给方法，使用lambda不再需要创建对象，我们只需要把lambda代码传递给方法。&lt;/p&gt;
&lt;p&gt;除了传递lambda之外我们还可以传递一个方法引用，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File[] files = myDir.listFiles( File::isFile );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Lambda表达式的表示&quot;&gt;&lt;a href=&quot;#Lambda表达式的表示&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式的表示&quot;&gt;&lt;/a&gt;Lambda表达式的表示&lt;/h1&gt;&lt;p&gt;在之前的例子，我们使用lambda表达式定义了一个函数，我们可以把它作为参数传递给一个方法，方法把它当成一个对象来使用，lambda表达式有函数和对象的一些属性，看你从什么角度来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从概念来讲，lambda表达式是一个匿名函数，它有签名和方法体但是没有名字&lt;/li&gt;
&lt;li&gt;当lambda表达式作为参数传递给方法时，接收方法把它当对象使用，在&lt;code&gt;listFiles&lt;/code&gt;方法内部，lambda表达式是一个对象的引用，在这里lambda表达式是一种常规的对象，比如有地址和类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从实际的角度来分析，lambda对象是由编译期和运行时系统来创建的，这就允许编译期进行优化而使用者不需要关心具体细节，编译器从lambda表达式的上下文环境来获取lambda对象的语义类型，但是编译期并不创建那个对象而是直到运行时由虚拟机动态创建，这里说的动态创建是指调用&lt;code&gt;invokedynamic&lt;/code&gt;字节码指令来创建。使用动态创建可以推迟对象的创建到对象第一次被使用时，如果你只是定义了lambda表达式而从未使用，它的类型和对象都不会创建。&lt;/p&gt;
&lt;h1 id=&quot;函数式接口&quot;&gt;&lt;a href=&quot;#函数式接口&quot; class=&quot;headerlink&quot; title=&quot;函数式接口&quot;&gt;&lt;/a&gt;函数式接口&lt;/h1&gt;&lt;p&gt;整个魔幻之处就在于类型的推导，这个类型称为目标类型，运行时系统动态创建的类型是目标类型的子类型。之前的那个例子我们看到目标类型是&lt;code&gt;FileFilter&lt;/code&gt;,在例子中我们定义了一个lambda表达式把它传递给listFiles方法，然后listFiles方法把它作为&lt;code&gt;FileFilter&lt;/code&gt;子类的一个对象来使用。这里看起来好像有点神奇，我们并没有声明lambda表达式实现了&lt;code&gt;FileFilter&lt;/code&gt;接口，&lt;code&gt;listFiles&lt;/code&gt;方法也没有表明它很愉快的接收了lambda表达式，它只是需要一个&lt;code&gt;FileFilter&lt;/code&gt;的子类的对象，这是如何工作的？&lt;/p&gt;
&lt;p&gt;这里面的魔术在于编译期执行了类型推导，编译器根据lambda表达式的上下文来决定需要什么类型的对象，然后编译器观察lambda表达式是否兼容需要的类型。如果Java是一种函数式编程语言的话lambda表达式最自然的类型就是某种函数式类型，用来描述函数的一种特殊类型。函数式类型仅仅描述了函数的签名比如&lt;code&gt;(int,int)-&amp;gt;boolean&lt;/code&gt;.但是Java不是函数式编程语言因此没有函数式类型，语言的设计者可以选择添加一种新的类型，由于他们不想给Java的类型系统引入太多的改变，因此他们尝试寻找一种办法来集成lambda表达式到语言中而不需要添加函数式类型。&lt;/p&gt;
&lt;p&gt;结果他们使用函数式接口来代替，函数式接口是只有一个方法的接口，这样的接口在JDK里有很多，比如经典的Runnable接口，它只有一个方法&lt;code&gt;void run()&lt;/code&gt;,还有很多其他的，比如&lt;code&gt;Readable,Callable,Iterable,closeable,Flushnable,Formattable,Comparable,Comparator&lt;/code&gt;,或者我们前面提到的&lt;code&gt;FileFilter&lt;/code&gt;接口。函数是接口和lambda表达式奕扬都只有一个方法，语言的设计者决定让编译器把lambda表达式转换成匹配的函数式接口。这种转换通常是自动的。比如我们前面提到的&lt;code&gt;(File f) -&amp;gt; { return f.isFile(); }&lt;/code&gt;,编译器知道listFiles方法的签名，因此我们需要的类型就是&lt;code&gt;FileFilter&lt;/code&gt;,&lt;code&gt;FileFilter&lt;/code&gt;是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileFilter&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File pathname)&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;FileFilter仅仅需要一个方法因此它是函数式接口类型，我们定义的lambda表达式有一个相匹配的签名，接收一个&lt;code&gt;File&lt;/code&gt;对象，返回一个&lt;code&gt;boolean&lt;/code&gt;值，不抛出检查的异常，因此编译器把lambda表达式转换成函数式接口&lt;code&gt;FileFilter&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;假如我们有下面两个函数式接口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileFilter&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File pathname)&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Predicate&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的lambda表达式兼容两种函数式接口类型：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FileFilter filter = (File f) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Predicate&amp;lt;File&amp;gt; predicate = (File f) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter = predicate;&lt;span class=&quot;comment&quot;&gt;//错误，不兼容的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们试图给两个变量相互赋值时编译器会报错，虽然两个变量都是同一个lambda表达式，原因很简单两个变量是不同的类型。也有可能出现编译器无法判断匹配的函数式接口类型，比如这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object ref　= (File f) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个赋值语句的上下文没有提供足够的信息来转换，因此编译器会报错，解决这个问题最简单的方法就是添加一个类型转换：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　	Object ref　= (FileFilter) (File f) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Lambda表达式和匿名内部类的区别&quot;&gt;&lt;a href=&quot;#Lambda表达式和匿名内部类的区别&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式和匿名内部类的区别&quot;&gt;&lt;/a&gt;Lambda表达式和匿名内部类的区别&lt;/h1&gt;&lt;p&gt;Lambda表达式出现在我们通常需要匿名内部类的地方，在很多场合他们是可以互换的。但是他们还是有几个区别：&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;匿名类一般这样编写：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File[] fs = myDir.&lt;span class=&quot;function&quot;&gt;lis &lt;span class=&quot;title&quot;&gt;tFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	new FileFilter()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File f)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而Lambda表达式有多种形式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;File[] files = myDir.listFiles( (File f) -&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.isFile();&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File[] files = myDir.listFiles( f -&amp;gt; f.isFile() );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F ile[] fil e s = myDir.listFiles( File::isFile );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;运行时成本&quot;&gt;&lt;a href=&quot;#运行时成本&quot; class=&quot;headerlink&quot; title=&quot;运行时成本&quot;&gt;&lt;/a&gt;运行时成本&lt;/h3&gt;&lt;p&gt;匿名类相对Lambda表达式来讲多了一些成本，使用匿名类或造成新类型的创建、新类型对象的创建。运行时匿名内需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类加载&lt;/li&gt;
&lt;li&gt;内存分配、对象初始化&lt;/li&gt;
&lt;li&gt;调用非静态方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lambda表达式需要函数式接口的转换和最终的调用，类型推导发生在编译期，不需要运行时消耗，之前提到过，lambda对象的创建是通过字节码指令&lt;code&gt;invokedynamic&lt;/code&gt;来完成的，减少了类型和实例的创建消耗。&lt;/p&gt;
&lt;h3 id=&quot;变量绑定&quot;&gt;&lt;a href=&quot;#变量绑定&quot; class=&quot;headerlink&quot; title=&quot;变量绑定&quot;&gt;&lt;/a&gt;变量绑定&lt;/h3&gt;&lt;p&gt;匿名类可以访问外部域的&lt;code&gt;final&lt;/code&gt;变量，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Runnable r = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;count: &quot;&lt;/span&gt; + cnt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Thread t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cnt++;&lt;span class=&quot;comment&quot;&gt;// error: cnt is final&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于lambda表达式，cnt变量不需要显式声明为final的，一旦变量在lambda中使用编译期会自动把它当成是&lt;code&gt;final&lt;/code&gt;的变量，换句话说在lambda中使用的外部域变量是隐式final的，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Runnable r = () -&amp;gt; &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;count: &quot;&lt;/span&gt; + cnt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Thread t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cnt++;&lt;span class=&quot;comment&quot;&gt;// error: cnt is implicitly final&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从java8开始匿名内部类也不需要再显式声明final类，编译器会自动把它当成是final。&lt;/p&gt;
&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;p&gt;匿名内部类是一个类，也就是说它自己引入了一个作用域，你可以在里面定义变量，而lambda表达式没有自己的作用域。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Runnable r = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// fine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;cnt is: &quot;&lt;/span&gt; + cnt); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lambda表达式：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Runnable r = () -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// error: cnt has already been defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;cnt is: &quot;&lt;/span&gt; + cnt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同的作用域规则对于&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;super&lt;/code&gt;关键字有不同的效果，在匿名类中&lt;code&gt;this&lt;/code&gt;表示匿名类对象本身的引用，&lt;code&gt;super&lt;/code&gt;表示匿名类的父类。在lambda表达式&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;super&lt;/code&gt;关键字意思和外部域中&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;super&lt;/code&gt;的意思一样，&lt;code&gt;this&lt;/code&gt;一般是包含它的那个对象，&lt;code&gt;super&lt;/code&gt;表示包含它的类的父类。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;许多热门的编程语言如今都有一个叫做lambda或者闭包的语言特性，包括比较经典的函数式编程语言Lisp,Scheme,也有稍微年轻的语言比如JavaScript,Python,Ruby,Groovy,Scale,C#,甚至C++也有Lambda表达式。一些语言是运行在java虚拟机上，作为虚拟机最具代表的语言java当然也不想落后。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.ezlippi.com/categories/java/"/>
    
      <category term="lambda" scheme="http://www.ezlippi.com/categories/java/lambda/"/>
    
    
      <category term="java" scheme="http://www.ezlippi.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>安卓开发者必备的42个链接</title>
    <link href="http://www.ezlippi.com//blog/2015/05/android-links.html"/>
    <id>http://www.ezlippi.com//blog/2015/05/android-links.html</id>
    <published>2015-05-18T16:00:00.000Z</published>
    <updated>2016-03-18T10:09:39.000Z</updated>
    
    <content type="html">&lt;p&gt;官方网站&lt;/p&gt;&lt;br&gt;&lt;p&gt;1、&lt;a href=&quot;http://developer.android.com/develop/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;谷歌安卓开发者页面 &lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里是主站点，在这您可以找到一切资源帮助您开始安卓开发。此站包含了很多关于学习基础知识的资源，完整的API引用，以及你开始开发所需的各种工具。此站共分为五个部分：&lt;/p&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;作为初学者，你应该从&lt;a href=&quot;http://developer.android.com/tools/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;工具&lt;/a&gt;开始，这部分讲解了如何安装安卓SDK。&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://developer.android.com/training/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;教程&lt;/a&gt;为你提供了关于安卓的基本介绍，教给你如何写出你的第一个程序。它包括很多的资源，即便成为高级程序员你仍需阅读这里面的文章。&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;(http://developer.android.com/guide/components/index.html &quot;&gt;API指南&lt;/a&gt;是对于不同API更技术性的手册，在更加深入理解安卓内部工作方面十分有用。&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/packages.html &quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考手册&lt;/a&gt;包含关于安卓库的完整的类引用。&lt;/li&gt;&lt;br&gt;&lt;li&gt;在&lt;a href=&quot;http://developer.android.com/google/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google Services&lt;/a&gt;部分你会找到更多库的信息，这些库可以让你连接到Google的服务，例如地图和Google+。&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;教程&lt;/p&gt;&lt;br&gt;&lt;p&gt;2、&lt;a href=&quot;http://www.vogella.com/android.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Vogella的安卓教程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里面包括许多给初学者以及高级安卓开发者的教程。这些文章由Lars Vogel编写，文章十分专业，为你提供对安卓架构的深入理解。&lt;/p&gt;&lt;br&gt;&lt;p&gt;3、&lt;a href=&quot;http://www.edumobile.org/android/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;EduMobile 安卓开发与编程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;在这里你可以找到许多基于单独话题的教程。这些教程并非按照循序渐进的顺序排列的，但是却包含了多种多样的独立话题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;4、&lt;a href=&quot;http://www.coreservlets.com/android-tutorial/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;CoreServlets安卓编程教程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一个更循序渐进的教程系列，可以在你迈出安卓编程的第一步时为你指导。&lt;/p&gt;&lt;br&gt;&lt;p&gt;5、&lt;a href=&quot;http://www.linux.com/learn/docs/683628-android-programming-for-beginners-part-1&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;给初学者的安卓Linux编程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;该教程由三部分组成的，是由linux.com主办目标受众是具有Java背景的安卓初学者。&lt;/p&gt;&lt;br&gt;&lt;p&gt;6、&lt;a href=&quot; http://androiddevblog.blogspot.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安卓快乐编程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一个程序员学习安卓的博客。Kinam Choi在他了解安卓架构过程中通过他的经验帮助你来理解。&lt;/p&gt;&lt;br&gt;&lt;p&gt;7、&lt;a href=&quot;http://blog.stylingandroid.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Styling Android&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;在这个博客中Mark Allison 专注于设计和安卓应用程序的布局。对于那些想要写出有着杰出UI、漂亮的程序的人来说，这是非常有用的资源。&lt;/p&gt;&lt;br&gt;&lt;p&gt;8、&lt;a href=&quot;http://forum.xda-developers.com/showthread.php?t=2092271&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;“How To Make An Android App”  XDA 论坛&lt;/a&gt;&lt;br&gt;&lt;br&gt;这里包含了一系列的论坛帖子，这些帖子指导你开发简单的安卓应用程序。&lt;/p&gt;&lt;br&gt;&lt;p&gt;视频教程&lt;/p&gt;&lt;br&gt;&lt;p&gt;9、&lt;a href=&quot;http://www.youtube.com/playlist?list=PL2F07DBCDCC01493A&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;TheNewBoston 安卓教程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里有200个视频教程，这些教程专注于安卓开发的各个方面，从下载和安装安卓SDK开始。大多数视频在5分钟左右，这使得你可以在任何小憩的时候看上一段。&lt;/p&gt;&lt;br&gt;&lt;p&gt;10、&lt;a href=&quot;http://www.youtube.com/playlist?list=PLGLfVvz_LVvQUjiCc8lUT9aO0GsWA4uNe&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Derek Banas 安卓开发教程&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Derek 定期的上传关于各种主题的视频教程。目前共有五个关于安卓开发的视频。&lt;/p&gt;&lt;br&gt;&lt;p&gt;11、&lt;a href=&quot; http://www.youtube.com/watch?v=I7i7B4SK0Z4&amp;amp;feature=channel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; “如何进行Android编程”&lt;/a&gt; — tgent07&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里有10个简单的视频为你介绍安卓开发。有些视频是其它教程很少涉及到的内容。全部看完10个视频大概需要两个小时左右。&lt;/p&gt;&lt;br&gt;&lt;p&gt;12、&lt;a href=&quot;http://www.youtube.com/user/androiddevelopers&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓开发者&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果你想紧跟安卓开发的步伐，那么你应该订阅官方的安卓开发者（Android Developers）频道。这里你会学习到最新的特性以及独门绝技。&lt;/p&gt;&lt;br&gt;&lt;p&gt;13、&lt;a href=&quot;http://www.youtube.com/user/AndroidAuthority&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Authority&lt;/a&gt; （安卓权威）&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是另一个专注于安卓的频道。主要是面向用户，但是作为一个好的开发者，你也应该时刻了解用户的观点。&lt;/p&gt;&lt;br&gt;&lt;p&gt;工具&lt;/p&gt;&lt;br&gt;&lt;p&gt;14、&lt;a href=&quot;http://developer.android.com/tools/sdk/eclipse-adt.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ADT Plugin for Eclipse&lt;/a&gt; （ADT 插件）&lt;/p&gt;&lt;br&gt;&lt;p&gt;对于新手而言，这是目前开发程序的标准的方式，也是最佳选项。Android Developer Tools 插件在&lt;span class=&quot;wp_keywordlink&quot;&gt;&lt;a href=&quot;http://res.importnew.com/eclipse&quot; title=&quot;Eclipse ImportNew主页&quot; target=&quot;_blank&quot;&gt;Eclipse&lt;/a&gt;&lt;/span&gt;中集成了安卓SDK并且包括一个图形化的布局编辑器，它能自动生成布局XML文件。如果你不喜欢Eclipse，你也可以尝试用&lt;a href=&quot;http://www.jetbrains.com/idea/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 12&lt;/a&gt; 来替代。&lt;/p&gt;&lt;br&gt;&lt;p&gt;15、&lt;a href=&quot;http://androidannotations.org/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;AndroidAnnotations&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;AndroidAnnotations 通过使用Java注解来创建样板代码，从而简化了安卓应用程序的开发。它负责替你来最常用的任务从而显著地提高代码开发速度，同时增加了代码的可读性。&lt;/p&gt;&lt;br&gt;&lt;p&gt;16、&lt;a href=&quot;https://github.com/roboguice/roboguice&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;RoboGuice&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;RoboGuice的目的在与为安卓开发加入依赖注入。 RoboGuice同时利用了标注以及Java映像来达到它的目标。&lt;/p&gt;&lt;br&gt;&lt;p&gt;资源&lt;/p&gt;&lt;br&gt;&lt;p&gt;17、&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tual&amp;#038;hl=en&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Ultimate Android Library&lt;/a&gt; (T.U.A.L) 终极安卓库&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一个展现了许多定制库、图标和视图的程序。你可以在你的设备上安装这个程序并且在action中看到这些元素。你也可以在他们的网站上贡献新的的库。&lt;/p&gt;&lt;br&gt;&lt;p&gt;18、&lt;a href=&quot;http://www.androidviews.net/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;AndroidViews&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里有许多定制视图、库和其它资源。你不用重新发明已有的东西，所以可以节省很多时间。&lt;/p&gt;&lt;br&gt;&lt;p&gt;19、&lt;a href=&quot;http://www.chupamobile.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Chupa Mobile&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果你愿意为应用程序组件花钱的话，那么这个市场就是为你而存在的。同是你也可以考虑卖出你自己的定制组件，小工具等等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;APP UI 设计&lt;/p&gt;&lt;br&gt;&lt;p&gt;20、&lt;a href=&quot; http://developer.android.com/design/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方设计指南&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是安卓网页上的官方站点。它包含所有程序设计的基本信息。&lt;/p&gt;&lt;br&gt;&lt;p&gt;21、&lt;a href=&quot;http://www.androidpatterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Patterns&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一个UI模式的目录，它解释了与你的应用程序交互的最常用和直观的方法。如果你想为用户创建无缝体验，那么这个网站是必须要看的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;22、&lt;a href=&quot;http://www.android-app-patterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android App Patterns&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里有很多截图，这些截图来自不同种类的应用程序。例如，你可以比较各种导航界面来发现哪一种最适合你的程序。&lt;/p&gt;&lt;br&gt;&lt;p&gt;23、&lt;a href=&quot;http://www.mobile-patterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Mobile Patterns&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是另一个有很多截图的网站，既有安卓的也有iPhone。&lt;/p&gt;&lt;br&gt;&lt;p&gt;24、&lt;a href=&quot;http://speckyboy.com/2010/10/27/30-fresh-web-ui-mobile-ui-and-wireframe-kits/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;30 Web、Mobile Wireframe Toolkits&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一篇文章，文章包含了30个资源的链接。Wireframe 工具包让你可以更加专业地布局你的程序设计。&lt;/p&gt;&lt;br&gt;&lt;p&gt;25、&lt;a href=&quot;http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Graphic Designers Cheatsheet&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果你想创建、实现你想要的布局，并快速发布的话，这是一个非常有用的资源。&lt;/p&gt;&lt;br&gt;&lt;p&gt;灵感&lt;/p&gt;&lt;br&gt;&lt;p&gt;26、&lt;a href=&quot;http://androidniceties.tumblr.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Niceties&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是Tumblr上的一些内容展示了最优美的安卓程序，它是启发灵感的好资源。&lt;/p&gt;&lt;br&gt;&lt;p&gt;27、&lt;a href=&quot; http://www.lovelyui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lovely.ui&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这是一个展示漂亮的手机程序的网站。不仅有安卓程序也有其他的，但是对于手机程序设计者来说都非常有用。&lt;/p&gt;&lt;br&gt;&lt;p&gt;博客&lt;/p&gt;&lt;br&gt;&lt;p&gt;28、&lt;a href=&quot;http://android-developers.blogspot.co.uk/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓官方开发者博客&lt;/a&gt;  &lt;/p&gt;&lt;br&gt;&lt;p&gt;这个官方博客来自于谷歌的安卓开发者。与这些内部人士保持联系以获得最新资讯是非常有必要的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;29、&lt;a href=&quot;http://androidweekly.net/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓周刊&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这个其实不太像是一个博客，它更像是一个每周的新闻通讯，它让你知道最新的安卓开发的问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;30、&lt;a href=&quot;http://cyrilmottier.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cyril Mottier&lt;/a&gt;&lt;br&gt;&lt;br&gt;这是一个非常好的博客，它关注与安卓界当前的发展趋势。&lt;/p&gt;&lt;br&gt;&lt;p&gt;31、&lt;a href=&quot;http://commonsware.com/blog/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Commons Blog&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;对于了解安卓开发的更深层次的信息， 这个博客是非常必要的读物。Mark Murphy关注与开发者需要注意的细节以及陷阱。&lt;/p&gt;&lt;br&gt;&lt;p&gt;32、&lt;a href=&quot;http://www.androiduipatterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android UI Patterns&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;在Juhani的这个博客中，他专注于应用程序的设计和可用性。&lt;/p&gt;&lt;br&gt;&lt;p&gt;人物&lt;/p&gt;&lt;br&gt;&lt;p&gt;要保证时刻获取最新的安卓开发的信息，最好的方式就是与那些开发或为架构出力的人们保持联系。因为安卓是谷歌创建的，你会发现开发者社区主要在Google+上（而不是Facebook上）。但是你同样可以在其他社交网站上找到他们。&lt;/p&gt;&lt;br&gt;&lt;p&gt;33、&lt;a href=&quot;https://plus.google.com/114205433913370454414/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Mark Murphy&lt;/a&gt; （Commonsware）&lt;/p&gt;&lt;br&gt;&lt;p&gt;Mark Murphy撰写了“The Busy Coder’s Guide to Android Development”这本书，此书共有2300页，其中包含了大量有用的信息。他主要使用&lt;a href=&quot;https://plus.google.com/114205433913370454414/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;，但他也有一个&lt;a href=&quot;http://commonsware.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;自己的网站&lt;/a&gt;，同时也会在&lt;a href=&quot;http://stackoverflow.com/users/115145/commonsware&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;stack overflow&lt;/a&gt;上回答问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;34、&lt;a href=&quot;https://plus.google.com/+TorNorbye/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Tor Norbye&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Tor Norbye 是谷歌公司安卓部门的一员。在安卓开发上，他从事视觉工具方面的工作。你也可在&lt;a href=&quot;https://twitter.com/tornorbye&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;http://www.youtube.com/user/tnorbye&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;上找到他，同时他也是&lt;a href=&quot;http://javaposse.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Java Posse&lt;/a&gt;的一员。他的&lt;a href=&quot;http://tornorbye.blogspot.co.uk/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;已经不在更新，因为他已经把主要活动转移至&lt;a href=&quot;https://plus.google.com/+TorNorbye/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;35、&lt;a href=&quot;https://plus.google.com/+RomainGuy/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Romain Guy&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Romain Guy 是安卓UI部门内部的专家，他专注于图形性能和动画。他使用&lt;a href=&quot;https://plus.google.com/+RomainGuy/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/romainguy&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;, 也在&lt;a href=&quot;http://stackoverflow.com/users/298575/romain-guy&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题，同时有自己的&lt;a href=&quot;http://www.curious-creature.org/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;。请务必看看他的这个在2013 Google I/O大会上关于安卓&lt;a href=&quot;http://www.youtube.com/watch?v=vQZFaec9NpA &quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图形和性能&lt;/a&gt;以及&lt;a href=&quot;http://www.youtube.com/watch?v=ihzZrS69i_s&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;动画&lt;/a&gt;的视频。&lt;/p&gt;&lt;br&gt;&lt;p&gt;36、&lt;a href=&quot;https://plus.google.com/105051985738280261832/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Dianne Hackborn&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Dianne Hackborn 是一名安卓架构工程师。除了使用&lt;a href=&quot;https://plus.google.com/105051985738280261832/about&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;，他还在&lt;a href=&quot;http://stackoverflow.com/users/236398/hackbod&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;37、&lt;a href=&quot;https://plus.google.com/+ChrisBanes/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Chris Banes&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Chris Banes 是ActionBar-&lt;a href=&quot;https://github.com/chrisbanes/ActionBar-PullToRefresh&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PullToRefresh&lt;/a&gt;、&lt;a href=&quot;https://github.com/chrisbanes/PhotoView&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PhotoView&lt;/a&gt;和Android-&lt;a href=&quot;https://github.com/chrisbanes/Android-BitmapCache&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;BitmapCache&lt;/a&gt;的作者，这三个均为对于安卓开发者非常有用的库。你可以在&lt;a href=&quot;https://plus.google.com/+ChrisBanes/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/chrisbanes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/users/474997/chris-banes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;、&lt;a href=&quot;http://chris.banes.me/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;甚至&lt;a href=&quot;https://www.facebook.com/chris.banes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;上找到他。&lt;/p&gt;&lt;br&gt;&lt;p&gt;38、&lt;a href=&quot;https://plus.google.com/+JakeWharton/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Jake Wharton&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Jake Wharton是Android-&lt;a href=&quot;https://github.com/JakeWharton/Android-ViewPagerIndicator&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ViewPagerIndicator&lt;/a&gt;和&lt;a href=&quot;http://actionbarsherlock.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ActionBarSherlock&lt;/a&gt;的开发者，这两者简化了所有版本安卓中action bar&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;#038;tag=importnew-23&amp;#038;linkCode=as2&amp;#038;camp=536&amp;#038;creative=3200&amp;#038;creativeASIN=B001130JN8&quot; title=&quot;设计模式:可复用面向对象软件的基础&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; class=&quot;external&quot;&gt;设计模式&lt;/a&gt;&lt;/span&gt;的使用。他使用&lt;a href=&quot;https://plus.google.com/+JakeWharton/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/JakeWharton&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;, 同时也在&lt;a href=&quot;http://stackoverflow.com/users/132047/jake-wharton&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;39、&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Roman Nurik&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Roman Nurik 对于安卓的贡献主要是改善了用户体验和视觉设计。你可以在&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/romannurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/users/102703/roman-nurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;和&lt;a href=&quot;http://dribbble.com/romannurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Dribbble&lt;/a&gt;上关注他。&lt;/p&gt;&lt;br&gt;&lt;p&gt;40、&lt;a href=&quot;https://plus.google.com/+AdamWPowell/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Adam Powell&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Adam Powell 是一名安卓架构开发者，他主要从事UI工具箱的工作。你可以在&lt;a href=&quot;https://plus.google.com/+AdamWPowell/about&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/adamwp&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;http://stackoverflow.com/users/342605/adamp&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上找到他。&lt;/p&gt;&lt;br&gt;&lt;p&gt;41、&lt;a href=&quot;https://plus.google.com/+RichHyndman/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Richard Hyndman&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Richard Hyndman是安卓开发组的一员。他主要在&lt;a href=&quot;https://plus.google.com/+RichHyndman/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/geekyouup&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;上发帖。&lt;/p&gt;&lt;br&gt;&lt;p&gt;42、&lt;a href=&quot;https://plus.google.com/+CyrilMottier/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cyril Mottier&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Cyril Mottier 是&lt;a href=&quot;https://github.com/cyrilmottier/GreenDroid&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;GreenDroid&lt;/a&gt;和常规&lt;a href=&quot;http://cyrilmottier.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;blogger&lt;/a&gt;的开发者。你可以在&lt;a href=&quot;https://plus.google.com/+CyrilMottier/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/cyrilmottier&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;上找到他。&lt;/p&gt;&lt;br&gt;&lt;p&gt;片尾备注&lt;/p&gt;&lt;br&gt;&lt;p&gt;我希望这些链接都是有用的，我也相信它们会让你忙活一阵子的。我尝试在适合初学者的内容和高级内容之间找到一个平衡点，并将二者均匀地结合起来。如果你有任何更多的评论或者建议，如果你发现了任何错误，或者你想让我知道哪些链接对你来说是最重要的，请给通过留言告诉我。&lt;/p&gt;


&lt;p&gt;原文链接： &lt;a target=&quot;_blank&quot; href=&quot;http://cogitolearning.co.uk/?p=858&quot; class=&quot;external&quot; rel=&quot;nofollow&quot;&gt;cogitolearning&lt;/a&gt;    翻译： &lt;a href=&quot;http://www.importnew.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; ImportNew.com &lt;/a&gt; - &lt;a href=&quot;http://www.importnew.com/author/lijuanlong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;汤米猫&lt;/a&gt;&lt;br&gt;译文链接： &lt;a href=&quot;http://www.importnew.com/8229.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.importnew.com/8229.html&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;官方网站&lt;/p&gt;&lt;br&gt;&lt;p&gt;1、&lt;a  href=&quot;http://developer.android.com/develop/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;谷歌安卓开发者页面 &lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里是主站点，在这您可以找到一切资源帮助您开始安卓开发。此站包含了很多关于学习基础知识的资源，完整的API引用，以及你开始开发所需的各种工具。此站共分为五个部分：&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.ezlippi.com/categories/android/"/>
    
    
      <category term="android" scheme="http://www.ezlippi.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义视图教程</title>
    <link href="http://www.ezlippi.com//blog/2015/05/define-custom-view.html"/>
    <id>http://www.ezlippi.com//blog/2015/05/define-custom-view.html</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2016-03-18T10:11:51.000Z</updated>
    
    <content type="html">&lt;p&gt;Android的UI元素都是基于View(屏幕中单个元素)和ViewGroup(元素的集合),Android有许多自带的组件和布局，比如Button、TextView、RelativeLayout。在app开发过程中我们需要自定义视图组件来满足我们的需求。通过继承自View或者View的子类，覆写onDraw或者onTouchEvent等方法来覆盖视图的行为。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建完全自定义的组件&quot;&gt;&lt;a href=&quot;#创建完全自定义的组件&quot; class=&quot;headerlink&quot; title=&quot;创建完全自定义的组件&quot;&gt;&lt;/a&gt;创建完全自定义的组件&lt;/h2&gt;&lt;p&gt;创建自定义的组件主要围绕着以下五个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绘图(Drawing)： 控制视图的渲染，通常通过覆写onDraw方法来实现&lt;/li&gt;
&lt;li&gt;交互(Interaction)： 控制用户和视图的交互方式，比如OnTouchEvent,gestures&lt;/li&gt;
&lt;li&gt;尺寸(Measurement)： 控制视图内容的维度，通过覆写onMeasure方法&lt;/li&gt;
&lt;li&gt;属性(Attributes)： 在XML中定义视图的属性，使用TypedArray来获取属性值&lt;/li&gt;
&lt;li&gt;持久化(Persistence)： 配置发生改变时保存和恢复状态，通过onSaveInstanceState和onRestoreInstanceState&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个栗子，假设我们想创建一个图形允许用户点击的时候改变形状（方形、圆形、三角形）。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dag48.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;定义视图类&quot;&gt;&lt;a href=&quot;#定义视图类&quot; class=&quot;headerlink&quot; title=&quot;定义视图类&quot;&gt;&lt;/a&gt;定义视图类&lt;/h3&gt;&lt;p&gt;我们创建一个ShapeSelectorView继承自View，实现必要的构造器，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // We must provide a constructor that takes a Context and an AttributeSet.
  // This constructor allows the UI to create and edit an instance of your view.
  public ShapeSelectorView(Context context, AttributeSet attrs) {
    super(context, attrs);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;添加视图到布局中&quot;&gt;&lt;a href=&quot;#添加视图到布局中&quot; class=&quot;headerlink&quot; title=&quot;添加视图到布局中&quot;&gt;&lt;/a&gt;添加视图到布局中&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;
    &amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView
    android:id=&amp;quot;@+id/shapeSelector&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:layout_alignParentRight=&amp;quot;true&amp;quot;
    android:layout_alignParentTop=&amp;quot;true&amp;quot;
    android:layout_alignParentLeft=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来我们定义一个命名空间app,这个命名空间允许Android自动解析而不需要指定具体的包名。&lt;/p&gt;
&lt;h3 id=&quot;自定义属性&quot;&gt;&lt;a href=&quot;#自定义属性&quot; class=&quot;headerlink&quot; title=&quot;自定义属性&quot;&gt;&lt;/a&gt;自定义属性&lt;/h3&gt;&lt;p&gt;视图可以通过XML来配置属性和样式，你需要想清楚要添加那些自定义的属性，比如我们想让用户可以选择形状的颜色、是否显示形状的名称，比如我们想让视图可以像下面一样配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView
    app:shapeColor=&amp;quot;#7f0000&amp;quot;
    app:displayShapeName=&amp;quot;true&amp;quot;
    android:id=&amp;quot;@+id/shapeSelector&amp;quot;
    ... /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了能够定义shapeColor和displayShapeName,我们需要在res/values/attrs.xml中配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;
   &amp;lt;declare-styleable name=&amp;quot;ShapeSelectorView&amp;quot;&amp;gt;
       &amp;lt;attr name=&amp;quot;shapeColor&amp;quot; format=&amp;quot;color&amp;quot; /&amp;gt;
       &amp;lt;attr name=&amp;quot;displayShapeName&amp;quot; format=&amp;quot;boolean&amp;quot; /&amp;gt;
   &amp;lt;/declare-styleable&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于每个你想自定义的属性你需要定义attr节点，每个节点有name和format属性，format属性是我们期望的值的类型，比如color,dimension,boolean,integer,float等。一旦定义好了属性，你可以像使用自带属性一样使用他们，唯一的区别在于你的自定义属性属于一个不同的命名空间，你可以在根视图的layout里面定义命名空间，一般情况下你只需要这样子指定：&lt;code&gt;http://schemas.android.com/apk/res/&amp;lt;package_name&amp;gt;&lt;/code&gt;,但是你可以使用&lt;code&gt;http://schemas.android.com/apk/res-auto&lt;/code&gt;自动解析命名空间。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;
    &amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView
       app:shapeColor=&amp;quot;#7f0000&amp;quot;
       app:displayShapeName=&amp;quot;true&amp;quot;
       android:id=&amp;quot;@+id/shapeSelector&amp;quot;
       android:layout_width=&amp;quot;wrap_content&amp;quot;
       android:layout_height=&amp;quot;wrap_content&amp;quot;
       android:layout_above=&amp;quot;@+id/btnSelect&amp;quot;
       android:layout_alignParentLeft=&amp;quot;true&amp;quot;
       android:layout_below=&amp;quot;@+id/tvPrompt&amp;quot; /&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;应用自定义属性&quot;&gt;&lt;a href=&quot;#应用自定义属性&quot; class=&quot;headerlink&quot; title=&quot;应用自定义属性&quot;&gt;&lt;/a&gt;应用自定义属性&lt;/h3&gt;&lt;p&gt;在前面我们定义了shapeColor和displayShapeName两个属性值，我们需要提取这两个属性值来用在自定义的视图中，可以使用TypedArray和obtainStyledAttributes方法来完成，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  private int shapeColor;
  private boolean displayShapeName;

  public ShapeSelectorView(Context context, AttributeSet attrs) {
    super(context, attrs);
    setupAttributes(attrs);
  }

  private void setupAttributes(AttributeSet attrs) {
    // Obtain a typed array of attributes
    TypedArray a = getContext().getTheme().obtainStyledAttributes(attrs, R.styleable.ShapeSelectorView, 0, 0);
    // Extract custom attributes into member variables
    try {
      shapeColor = a.getColor(R.styleable.ShapeSelectorView_shapeColor, Color.BLACK);
      displayShapeName = a.getBoolean(R.styleable.ShapeSelectorView_displayShapeName, false);
    } finally {
      // TypedArray objects are shared and must be recycled.
      a.recycle();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来添加一些getter和setter方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // ...
  public boolean isDisplayingShapeName() {
    return displayShapeName;
  }

  public void setDisplayingShapeName(boolean state) {
    this.displayShapeName = state;
    invalidate();
    requestLayout();
  }

  public int getShapeColor() {
    return shapeColor;
  }

  public void setShapeColor(int color) {
    this.shapeColor = color;
    invalidate();
    requestLayout();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当视图属性发生改变的时候可能需要重新绘图，你需要调用invalidate()和requestLayout()来刷新显示。&lt;/p&gt;
&lt;h3 id=&quot;画图&quot;&gt;&lt;a href=&quot;#画图&quot; class=&quot;headerlink&quot; title=&quot;画图&quot;&gt;&lt;/a&gt;画图&lt;/h3&gt;&lt;p&gt;假设我们要使用前面的属性画一个长方形，所有的绘图都是在onDraw方法里执行，使用Canvas对象来绘图，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // ...
  private int shapeWidth = 100;
  private int shapeHeight = 100;
  private int textXOffset = 0;
  private int textYOffset = 30;
  private Paint paintShape;

  // ...
  public ShapeSelectorView(Context context, AttributeSet attrs) {
    super(context, attrs);
    setupAttributes(attrs);
    setupPaint();
  }

  @Override
  protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    canvas.drawRect(0, 0, shapeWidth, shapeHeight, paintShape);
    if (displayShapeName) {
      canvas.drawText(&amp;quot;Square&amp;quot;, shapeWidth + textXOffset, shapeHeight + textXOffset, paintShape);
    }
  }

  private void setupPaint() { 
      paintShape = new Paint();
      paintShape.setStyle(Style.FILL);
      paintShape.setColor(shapeColor);
      paintShape.setTextSize(30);
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码就会根据XML里设置的shapeColor来画图，根据displayShapeName属性来决定是否显示图形的名称，结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dag49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多画图的教程可以参考这里&lt;a href=&quot;http://developer.android.com/guide/topics/graphics/2d-graphics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Custom 2D Drawing Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;计算尺寸&quot;&gt;&lt;a href=&quot;#计算尺寸&quot; class=&quot;headerlink&quot; title=&quot;计算尺寸&quot;&gt;&lt;/a&gt;计算尺寸&lt;/h3&gt;&lt;p&gt;为了更好的理解自定义视图的宽度和高度，我们需要定义onMeasure方法，这个方法根据视图的内容来决定它的宽度和高度，在这里宽度和高度是由形状和下面的文本决定的，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  @Override
  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    // Defines the extra padding for the shape name text
    int textPadding = 10;
    int contentWidth = shapeWidth;

    // Resolve the width based on our minimum and the measure spec
    int minw = contentWidth + getPaddingLeft() + getPaddingRight();
    int w = resolveSizeAndState(minw, widthMeasureSpec, 0);

    // Ask for a height that would let the view get as big as it can
    int minh = shapeHeight + getPaddingBottom() + getPaddingTop();
    if (displayShapeName) { 
    minh += textYOffset + textPadding;
    }
    int h = resolveSizeAndState(minh, heightMeasureSpec, 0);

    // Calling this method determines the measured width and height
    // Retrieve with getMeasuredWidth or getMeasuredHeight methods later
    setMeasuredDimension(w, h);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;宽度和高度都是基于MeasureSpec来讨论的，一个MeasureSpec封装了父布局传递给子布局的布局要求，每个MeasureSpec代表了一组宽度和高度的要求。一个MeasureSpec由大小和模式组成。它有三种模式：UNSPECIFIED(未指定),父元素未给子元素施加任何束缚，子元素可以得到任意想要的大小；EXACTLY(完全)，父元素决定子元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小；AT_MOST(至多)，子元素至多达到指定大小的值。resolveSizeAndState()方法根据视图想要的大小和MeasureSpec返回一个合适的值，最后你需要调用setMeasureDimension()方法生效。&lt;/p&gt;
&lt;h3 id=&quot;不同形状之间切换&quot;&gt;&lt;a href=&quot;#不同形状之间切换&quot; class=&quot;headerlink&quot; title=&quot;不同形状之间切换&quot;&gt;&lt;/a&gt;不同形状之间切换&lt;/h3&gt;&lt;p&gt;如果想实现用户点击之后改变形状，需要在onTouchEvent方法里添加自定义逻辑：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // ...
  private String[] shapeValues = { &amp;quot;square&amp;quot;, &amp;quot;circle&amp;quot;, &amp;quot;triangle&amp;quot; };
  private int currentShapeIndex = 0;

  // Change the currentShapeIndex whenever the shape is clicked
  @Override
  public boolean onTouchEvent(MotionEvent event) {
    boolean result = super.onTouchEvent(event);
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      currentShapeIndex ++;
      if (currentShapeIndex &amp;gt; (shapeValues.length - 1)) {
    currentShapeIndex = 0;
      }
      postInvalidate();
      return true;
    }
    return result;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在不管什么时候视图被单击，选择的形状的下标会改变，调用postInvalisate()方法后会显示一个不同的形状，接下来更新onDraw()方法来实现更改形状的逻辑：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // ...

  @Override
  protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    String shapeSelected = shapeValues[currentShapeIndex];
    if (shapeSelected.equals(&amp;quot;square&amp;quot;)) {
      canvas.drawRect(0, 0, shapeWidth, shapeHeight, paintShape);
      textXOffset = 0;
    } else if (shapeSelected.equals(&amp;quot;circle&amp;quot;)) {
      canvas.drawCircle(shapeWidth / 2, shapeHeight / 2, shapeWidth / 2, paintShape);
      textXOffset = 12;
    } else if (shapeSelected.equals(&amp;quot;triangle&amp;quot;)) {
      canvas.drawPath(getTrianglePath(), paintShape);
      textXOffset = 0;
    }
    if (displayShapeName) {
      canvas.drawText(shapeSelected, 0 + textXOffset, shapeHeight + textYOffset, paintShape);
    }
  }

  protected Path getTrianglePath() {
    Point p1 = new Point(0, shapeHeight), p2 = null, p3 = null;
    p2 = new Point(p1.x + shapeWidth, p1.y);
    p3 = new Point(p1.x + (shapeWidth / 2), p1.y - shapeHeight);
    Path path = new Path();
    path.moveTo(p1.x, p1.y);
    path.lineTo(p2.x, p2.y);
    path.lineTo(p3.x, p3.y);
    return path;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在每次点击都会显示一个不同的形状，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dag50.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来添加一个获取形状的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // ...
  // Returns selected shape name
  public String getSelectedShape() {
    return shapeValues[currentShapeIndex];
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保存视图的状态&quot;&gt;&lt;a href=&quot;#保存视图的状态&quot; class=&quot;headerlink&quot; title=&quot;保存视图的状态&quot;&gt;&lt;/a&gt;保存视图的状态&lt;/h3&gt;&lt;p&gt;当配置发生改变的时候(比如屏幕旋转)视图需要保存它们的状态，你可以实现onSaveInstanceState()和onRestoreInstanceState()方法来保存和恢复视图状态，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ShapeSelectorView extends View {
  // This is the view state for this shape selector
  private int currentShapeIndex = 0;

  @Override
  public Parcelable onSaveInstanceState() {
    // Construct bundle
    Bundle bundle = new Bundle();
    // Store base view state
    bundle.putParcelable(&amp;quot;instanceState&amp;quot;, super.onSaveInstanceState());
    // Save our custom view state to bundle
    bundle.putInt(&amp;quot;currentShapeIndex&amp;quot;, this.currentShapeIndex);
    // ... store any other custom state here ...
    // Return the bundle
    return bundle;
  }

  @Override
  public void onRestoreInstanceState(Parcelable state) {
    // Checks if the state is the bundle we saved
    if (state instanceof Bundle) {
      Bundle bundle = (Bundle) state;
      // Load back our custom view state
      this.currentShapeIndex = bundle.getInt(&amp;quot;currentShapeIndex&amp;quot;);
      // ... load any other custom state here ...
      // Load base view state back
      state = bundle.getParcelable(&amp;quot;instanceState&amp;quot;);
    }
    // Pass base view state on to super
    super.onRestoreInstanceState(state);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦你实现了这些保存和恢复的逻辑，当手机配置改变的时候你的视图能够自动保存状态。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android的UI元素都是基于View(屏幕中单个元素)和ViewGroup(元素的集合),Android有许多自带的组件和布局，比如Button、TextView、RelativeLayout。在app开发过程中我们需要自定义视图组件来满足我们的需求。通过继承自View或者View的子类，覆写onDraw或者onTouchEvent等方法来覆盖视图的行为。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.ezlippi.com/categories/android/"/>
    
    
      <category term="android, view" scheme="http://www.ezlippi.com/tags/android-view/"/>
    
  </entry>
  
  <entry>
    <title>Gradle系列教程之依赖管理</title>
    <link href="http://www.ezlippi.com//blog/2015/05/gradle-dependency-management.html"/>
    <id>http://www.ezlippi.com//blog/2015/05/gradle-dependency-management.html</id>
    <published>2015-05-04T16:00:00.000Z</published>
    <updated>2016-03-18T10:27:11.000Z</updated>
    
    <content type="html">&lt;p&gt;这一章我将介绍Gradle对依赖管理的强大支持，学习依赖分组和定位不同类型仓库。依赖管理看起来很容易，但是当出现依赖解析冲突时就会很棘手，复杂的依赖关系可能导致构建中依赖一个库的多个版本。Gradle通过分析依赖树得到依赖报告，你将很容易找到一个指定的依赖的来源。&lt;/p&gt;
&lt;p&gt;Gradle有自己的依赖管理实现，除了支持ant和Maven的特性外，Gradle关心的是性能、可靠性和复用性。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简要概述依赖管理&quot;&gt;&lt;a href=&quot;#简要概述依赖管理&quot; class=&quot;headerlink&quot; title=&quot;简要概述依赖管理&quot;&gt;&lt;/a&gt;简要概述依赖管理&lt;/h2&gt;&lt;p&gt;几乎所有基于JVM的项目都会或多或少依赖其他库，假设你在开发一个基于web的项目，你很可能会依赖很受欢迎的开源框架比如Spring MVC来提高效率。Java的第三方库一般以JAR文件的形式存在，一般用库名加版本号来标识。随着开发的进行依赖的第三方库增多小的项目变的越来越大，组织和管理你的JAR文件就很关键。&lt;/p&gt;
&lt;h2 id=&quot;不算完美的依赖管理技术&quot;&gt;&lt;a href=&quot;#不算完美的依赖管理技术&quot; class=&quot;headerlink&quot; title=&quot;不算完美的依赖管理技术&quot;&gt;&lt;/a&gt;不算完美的依赖管理技术&lt;/h2&gt;&lt;p&gt;由于Java语言并没提供依赖管理的工具，所以你的团队需要自己开发一套存储和检索依赖的想法。你可能会采取以下几种常见的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动复制JAR文件到目标机器，这是最原始的很容易出错的方法。&lt;/li&gt;
&lt;li&gt;使用一个共享的存储介质来存储JAR文件(比如共享的网盘)，你可以加载网络硬盘或者通过FTP检索二进制文件。这种方法需要开发者事先建立好与仓库的连接，手动添加新的依赖到仓库中。&lt;/li&gt;
&lt;li&gt;把依赖的JAR文件同源代码都添加到版本控制系统中。这种方法不需要任何额外的步骤，你的同伴在拷贝仓库的时候就能检索依赖的改变。另一方面，这些JAR文件占用了不必要的空间，当你的项目存在相互之间依赖的时候你需要频繁的check-in的检查源代码是否发生了改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自动管理依赖的重要性&quot;&gt;&lt;a href=&quot;#自动管理依赖的重要性&quot; class=&quot;headerlink&quot; title=&quot;自动管理依赖的重要性&quot;&gt;&lt;/a&gt;自动管理依赖的重要性&lt;/h2&gt;&lt;p&gt;尽管上面的方法都能用，但是这距离理想的解决方案差远了，因为他们没有提供一个标准化的方法来命名和管理JAR文件。至少你得需要开发库的准确版本和它依赖的库(传递依赖)，这个为什么这么重要？&lt;/p&gt;
&lt;h3 id=&quot;准确知道依赖的版本&quot;&gt;&lt;a href=&quot;#准确知道依赖的版本&quot; class=&quot;headerlink&quot; title=&quot;准确知道依赖的版本&quot;&gt;&lt;/a&gt;准确知道依赖的版本&lt;/h3&gt;&lt;p&gt;如果在项目中你没有准确声明依赖的版本这将会是一个噩梦，如果没有文档你根本无法知道这个库支持哪些特性，是否升级一个库到新的版本就变成了一个猜谜游戏因为你不知道你的当前版本。&lt;/p&gt;
&lt;h3 id=&quot;管理传递依赖&quot;&gt;&lt;a href=&quot;#管理传递依赖&quot; class=&quot;headerlink&quot; title=&quot;管理传递依赖&quot;&gt;&lt;/a&gt;管理传递依赖&lt;/h3&gt;&lt;p&gt;在项目的早期开发阶段传递依赖就会是一个隐患，这些库是第一层的依赖需要的，比如一个比较常见的开发方案是将Spring和Hibernate结合起来这会引入超过20个其他的开发库，一个库需要很多其他库来正常工作。下图展示了Hibernate核心库的依赖图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果没有正确的管理依赖，你可以会遇到没想到过的编译期错误和运行期类加载问题。我们可以总结到我们需要一个更好的方式来管理依赖，一般来讲你想在项目元数据中声明你的依赖和它的版本号。作为一个项目自动化的过程，这个版本的库会自动从中央仓库下载、安装到你的项目中，我们来看几个现有的开源解决方案。&lt;/p&gt;
&lt;h3 id=&quot;使用自动化的依赖管理&quot;&gt;&lt;a href=&quot;#使用自动化的依赖管理&quot; class=&quot;headerlink&quot; title=&quot;使用自动化的依赖管理&quot;&gt;&lt;/a&gt;使用自动化的依赖管理&lt;/h3&gt;&lt;p&gt;在Java领域里支持声明的自动依赖管理的有两个项目：Apache Ivy(Ant项目用的比较多的依赖管理器)和Maven(在构建框架中包含一个依赖管理器)，我不再详细介绍这两个的细节而是解释自动依赖管理的概念和机制。&lt;/p&gt;
&lt;p&gt;Ivy和Maven是通过XML描述文件来表达依赖配置，配置包含两部分：依赖的标识加版本号和中央仓库的位置(可以是一个HTTP链接)，依赖管理器根据这个信息自动定位到需要下载的仓库然后下载到你的机器中。库可以定义传递依赖，依赖管理器足够聪明分析这个信息然后解析下载传递依赖。如果出现了依赖冲突比如上面的Hibernate core的例子，依赖管理器会试着解决。库一旦被下载就会存储在本地的缓存中，构建系统先检查本地缓存中是否存在需要的库然后再从远程仓库中下载。下图显示了依赖管理的关键元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Gradle通过DSL来描述依赖配置，实现了上面描述的架构。&lt;/p&gt;
&lt;h3 id=&quot;自动依赖管理面临的挑战&quot;&gt;&lt;a href=&quot;#自动依赖管理面临的挑战&quot; class=&quot;headerlink&quot; title=&quot;自动依赖管理面临的挑战&quot;&gt;&lt;/a&gt;自动依赖管理面临的挑战&lt;/h3&gt;&lt;p&gt;虽然依赖管理器简化了手工的操作，但有时也会遇到问题。你会发现你的依赖图中会依赖同个库的不同版本，使用日志框架经常会遇到这个问题，依赖管理器基于一个特定的解决方案只选择其中一个版本来避免版本冲突。如果你想知道某个库引入了什么版本的传递依赖，Gradle提供了一个非常有用的依赖报告来回答这个问题。下一节我会通过一个例子来讲解。&lt;/p&gt;
&lt;h2 id=&quot;声明依赖&quot;&gt;&lt;a href=&quot;#声明依赖&quot; class=&quot;headerlink&quot; title=&quot;声明依赖&quot;&gt;&lt;/a&gt;声明依赖&lt;/h2&gt;&lt;p&gt;DSL配置block dependencies用来给配置添加一个或多个依赖，你的项目不仅可以添加外部依赖，下面这张表显示了Gradle支持的各种不同类型的依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这一章直接扫外部模块依赖和文件依赖，我们来看看Gradle APi是怎么表示依赖的。&lt;/p&gt;
&lt;h3 id=&quot;理解依赖的API表示&quot;&gt;&lt;a href=&quot;#理解依赖的API表示&quot; class=&quot;headerlink&quot; title=&quot;理解依赖的API表示&quot;&gt;&lt;/a&gt;理解依赖的API表示&lt;/h3&gt;&lt;p&gt;每个Gradle项目都有一个DependencyHandler的实例，你可以通过getDependencies()方法来获取依赖处理器的引用，上表中每一种依赖类型在依赖处理器中都有一个相对应的方法。每一个依赖都是Dependency的一个实例，group, name, version, 和classifier这几个属性用来标识一个依赖，下图清晰的表示了项目(Project)、依赖处理器(DependencyHandler)和依赖三者之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;外部模块依赖&quot;&gt;&lt;a href=&quot;#外部模块依赖&quot; class=&quot;headerlink&quot; title=&quot;外部模块依赖&quot;&gt;&lt;/a&gt;外部模块依赖&lt;/h3&gt;&lt;p&gt;在Gradle的术语里，外部库通常是以JAR文件的形式存在，称之为外部模块依赖，代表项目层次外的一个模块，这种类型的依赖是通过属性来唯一的标识，接下来我们来介绍每个属性的作用。&lt;/p&gt;
&lt;h3 id=&quot;依赖属性&quot;&gt;&lt;a href=&quot;#依赖属性&quot; class=&quot;headerlink&quot; title=&quot;依赖属性&quot;&gt;&lt;/a&gt;依赖属性&lt;/h3&gt;&lt;p&gt;当依赖管理器从仓库中查找依赖时，需要通过属性的结合来定位，最少需要提供一个name。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;group： 这个属性用来标识一个组织、公司或者项目，可以用点号分隔，Hibernate的group是org.hibernate。&lt;/li&gt;
&lt;li&gt;name： name属性唯一的描述了这个依赖，hibernate的核心库名称是hibernate-core。&lt;/li&gt;
&lt;li&gt;version： 一个库可以有很多个版本，通常会包含一个主版本号和次版本号，比如Hibernate核心库3.6.3-Final。&lt;/li&gt;
&lt;li&gt;classifier： 有时候需要另外一个属性来进一步的说明，比如说明运行时的环境，Hibernate核心库没有提供classifier。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;依赖的写法&quot;&gt;&lt;a href=&quot;#依赖的写法&quot; class=&quot;headerlink&quot; title=&quot;依赖的写法&quot;&gt;&lt;/a&gt;依赖的写法&lt;/h3&gt;&lt;p&gt;你可以使用下面的语法在项目中声明依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	configurationName dependencyNotation1, 	dependencyNotation2, ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你先声明你要给哪个配置添加依赖，&lt;br&gt;Java插件指定了若干依赖配置项，其描述如下：当项目的源代码被编译时，compile配置项中的依赖是必须的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runtime配置项中包含的依赖在运行时是必须的。&lt;/li&gt;
&lt;li&gt;testCompile配置项中包含的依赖在编译项目的测试代码时是必须的。&lt;/li&gt;
&lt;li&gt;testRuntime配置项中包含的依赖在运行测试代码时是必须的。&lt;/li&gt;
&lt;li&gt;archives配置项中包含项目生成的文件（如Jar文件）。&lt;/li&gt;
&lt;li&gt;default配置项中包含运行时必须的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后添加依赖列表，你可以用map的形式来注明，你也可以直接用冒号来分隔属性，比如这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明外部属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext.cargoGroup = &lt;span class=&quot;string&quot;&gt;&#39;org.codehaus.cargo&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext.cargoVersion = &lt;span class=&quot;string&quot;&gt;&#39;1.3.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//使用映射声明依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	compile &lt;span class=&quot;string&quot;&gt;group:&lt;/span&gt; cargoGroup, &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;cargo-core-uberjar&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;version:&lt;/span&gt; cargoVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//用快捷方式来声明，引用了前面定义的外部属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo &lt;span class=&quot;string&quot;&gt;&quot;$cargoGroup:cargo-ant:$cargoVersion&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你项目中依赖比较多，你把一些共同的依赖属性定义成外部属性可以简化build脚本。&lt;/p&gt;
&lt;p&gt;Gradle没有给项目选择默认的仓库，当你没有配置仓库的时候运行deployTOLocalTomcat任务的时候回出现如下的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle deployToLocalTomcat
:deployToLocalTomcat FAILED
FAILURE: Build failed with an exception.

Where: Build file &amp;apos;/Users/benjamin/gradle-in-action/code/chapter5/cargo-configuration/build.gradle&amp;apos; line: 10

What went wrong:
Execution failed for task &amp;apos;:deployToLocalTomcat&amp;apos;.
&amp;gt; Could not resolve all dependencies for configuration &amp;apos;:cargo&amp;apos;.
    &amp;gt; Could not find group:org.codehaus.cargo, module:cargo-core-uberjar, version:1.3.1.
    Required by:
        :cargo-configuration:unspecified
&amp;gt; Could not find group:org.codehaus.cargo, module:cargo-ant,version:1.3.1.
    Required by:
    :cargo-configuration:unspecified
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到目前为止还没讲到怎么配置不同类型的仓库，比如你想使用MavenCentral仓库，添加下面的配置代码到你的build脚本中：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;检查依赖报告&quot;&gt;&lt;a href=&quot;#检查依赖报告&quot; class=&quot;headerlink&quot; title=&quot;检查依赖报告&quot;&gt;&lt;/a&gt;检查依赖报告&lt;/h3&gt;&lt;p&gt;当你运行dependencies任务时，这个依赖树会打印出来，依赖树显示了你build脚本声明的顶级依赖和它们的传递依赖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/5-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;仔细观察你会发现有些传递依赖标注了*号，表示这个依赖被忽略了，这是因为其他顶级依赖中也依赖了这个传递的依赖，Gradle会自动分析下载最合适的依赖。&lt;/p&gt;
&lt;h3 id=&quot;排除传递依赖&quot;&gt;&lt;a href=&quot;#排除传递依赖&quot; class=&quot;headerlink&quot; title=&quot;排除传递依赖&quot;&gt;&lt;/a&gt;排除传递依赖&lt;/h3&gt;&lt;p&gt;Gradle允许你完全控制传递依赖，你可以选择排除全部的传递依赖也可以排除指定的依赖，假设你不想使用UberJar传递的xml-api的版本而想声明一个不同版本，你可以使用exclude方法来排除它：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo(&lt;span class=&quot;string&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.3.1&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		exclude &lt;span class=&quot;string&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;xml-apis&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;module:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;xml-apis&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo &lt;span class=&quot;string&quot;&gt;&#39;xml-apis:xml-apis:2.0.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;exclude属性值和正常的依赖声明不太一样，你只需要声明group和(或)module，Gradle不允许你只排除指定版本的依赖。&lt;/p&gt;
&lt;p&gt;有时候仓库中找不到项目依赖的传递依赖，这会导致构建失败，Gradle允许你使用transitive属性来排除所有的传递依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo(&lt;span class=&quot;string&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.3.1&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	transitive = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 选择性的声明一些需要的库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;动态版本声明&quot;&gt;&lt;a href=&quot;#动态版本声明&quot; class=&quot;headerlink&quot; title=&quot;动态版本声明&quot;&gt;&lt;/a&gt;动态版本声明&lt;/h3&gt;&lt;p&gt;如果你想使用一个依赖的最新版本，你可以使用latest.integration，比如声明 Cargo Ant tasks的最新版本，你可以这样写 &lt;code&gt;org.codehaus
.cargo:cargo-ant:latest-integration&lt;/code&gt;，你也可以用一个+号来动态的声明：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//依赖最新的1.x版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo &lt;span class=&quot;string&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.+&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Gradle的dependencies任务可以清晰的看到选择了哪个版本，这里选择了1.3.1版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle –q dependencies
------------------------------------------------------------
Root project
------------------------------------------------------------
Listing 5.4 Excluding a single dependency
Listing 5.5 Excluding all transitive dependencies
Listing 5.6 Declaring a dependency on the latest Cargo 1.x version
Exclusions can be
declared in a shortcut
or map notation.
120 CHAPTER 5 Dependency management
cargo - Classpath for Cargo Ant tasks.
\--- org.codehaus.cargo:cargo-ant:1.+ -&amp;gt; 1.3.1
\--- ...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;文件依赖&quot;&gt;&lt;a href=&quot;#文件依赖&quot; class=&quot;headerlink&quot; title=&quot;文件依赖&quot;&gt;&lt;/a&gt;文件依赖&lt;/h3&gt;&lt;p&gt;如果你没有使用自动的依赖管理工具，你可能会把外部库作为源代码的一部分或者保存在本地文件系统中，当你想把项目迁移到Gradle的时候，你不想去重构，Gradle很简单就能配置文件依赖。下面这段代码复制从Maven中央仓库解析的依赖到libs/cargo目录。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task copyDependenciesToLocalDir(&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Copy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//Gradle提供的语法糖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	from configurations.cargo.asFileTree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	into &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;System.properties[&#39;user.home&#39;]&amp;#125;/libs/cargo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行这个任务之后你就可以在依赖中声明Cargo库了，下面这段代码展示了怎么给cargo配置添加JAR文件依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cargo fileTree(&lt;span class=&quot;string&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;System.properties[&#39;user.home&#39;]&amp;#125;/libs/cargo&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置远程仓库&quot;&gt;&lt;a href=&quot;#配置远程仓库&quot; class=&quot;headerlink&quot; title=&quot;配置远程仓库&quot;&gt;&lt;/a&gt;配置远程仓库&lt;/h2&gt;&lt;p&gt;Gradle支持下面三种不同类型的仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下图是配置不同仓库对应的Gradle API：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面以Maven仓库来介绍，Maven仓库是Java项目中使用最为广泛的一个仓库，库文件一般是以JAR文件的形式存在，用XML(POM文件)来来描述库的元数据和它的传递依赖。所有的库文件都存储在仓库的指定位置，当你在构建脚本中声明了依赖时，这些属性用来找到库文件在仓库中的准确位置。group属性标识了Maven仓库中的一个子目录，下图展示了Cargo依赖属性是怎么对应到仓库中的文件的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/5-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;RepositoryHandler接口提供了两个方法来定义Maven仓库，mavenCentral方法添加一个指向仓库列表的引用，mavenLocal方法引用你文件系统中的本地Maven仓库。&lt;/p&gt;
&lt;h3 id=&quot;添加Maven仓库&quot;&gt;&lt;a href=&quot;#添加Maven仓库&quot; class=&quot;headerlink&quot; title=&quot;添加Maven仓库&quot;&gt;&lt;/a&gt;添加Maven仓库&lt;/h3&gt;&lt;p&gt;要使用Maven仓库你只需要调用mavenCentral方法，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加本地仓库&quot;&gt;&lt;a href=&quot;#添加本地仓库&quot; class=&quot;headerlink&quot; title=&quot;添加本地仓库&quot;&gt;&lt;/a&gt;添加本地仓库&lt;/h3&gt;&lt;p&gt;本地仓库默认在 &lt;user_home&gt;/.m2/repository目录下，只需要添加如下脚本来引用它：&lt;/user_home&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mavenLocal()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加自定义Maven仓库&quot;&gt;&lt;a href=&quot;#添加自定义Maven仓库&quot; class=&quot;headerlink&quot; title=&quot;添加自定义Maven仓库&quot;&gt;&lt;/a&gt;添加自定义Maven仓库&lt;/h3&gt;&lt;p&gt;如果指定的依赖不存在与Maven仓库或者你想通过建立自己的企业仓库来确保可靠性，你可以使用自定义的仓库。仓库管理器允许你使用Maven布局来配置一个仓库，这意味着你要遵守artifact的存储模式。你也可以添加验证凭证来提供访问权限，Gradle的API提供两种方法配置自定义的仓库：maven()和mavenRepo()。下面这段代码添加了一个自定义的仓库，如果Maven仓库中不存在相应的库会从自定义仓库中查找：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	maven &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name &lt;span class=&quot;string&quot;&gt;&#39;Custom Maven Repository&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	url &lt;span class=&quot;string&quot;&gt;&#39;http://repository.forge.cloudbees.com/release/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这一章我将介绍Gradle对依赖管理的强大支持，学习依赖分组和定位不同类型仓库。依赖管理看起来很容易，但是当出现依赖解析冲突时就会很棘手，复杂的依赖关系可能导致构建中依赖一个库的多个版本。Gradle通过分析依赖树得到依赖报告，你将很容易找到一个指定的依赖的来源。&lt;/p&gt;
&lt;p&gt;Gradle有自己的依赖管理实现，除了支持ant和Maven的特性外，Gradle关心的是性能、可靠性和复用性。&lt;br&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://www.ezlippi.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://www.ezlippi.com/tags/Gradle/"/>
    
      <category term="项目构建" scheme="http://www.ezlippi.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Gradle系列教程之任务管理</title>
    <link href="http://www.ezlippi.com//blog/2015/04/gradle-task-management.html"/>
    <id>http://www.ezlippi.com//blog/2015/04/gradle-task-management.html</id>
    <published>2015-04-29T16:00:00.000Z</published>
    <updated>2016-03-18T10:23:01.000Z</updated>
    
    <content type="html">&lt;p&gt;Gradle有两个最基本的概念：project和task,Gradle里面的所有东西都基于这两个概念。project通常指一个项目，而task指构建过程中的任务。一次构建可以有1到n个project，每个project有1到n个task，这篇文章主要介绍Gradle任务的创建和管理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;管理任务&quot;&gt;&lt;a href=&quot;#管理任务&quot; class=&quot;headerlink&quot; title=&quot;管理任务&quot;&gt;&lt;/a&gt;管理任务&lt;/h2&gt;&lt;p&gt;每个新创建的任务都是org.gradle.api.DefaultTask类型，org.gradle.api.Task的标准实现，DefaultTask所有的域都是私有的，意味着他们只能通过setter和getter方法来访问，庆幸的是Groovy提供了一些语法糖来允许你通过名字来使用域。&lt;/p&gt;
&lt;h3 id=&quot;管理项目的版本&quot;&gt;&lt;a href=&quot;#管理项目的版本&quot; class=&quot;headerlink&quot; title=&quot;管理项目的版本&quot;&gt;&lt;/a&gt;管理项目的版本&lt;/h3&gt;&lt;p&gt;许多公司或者开源组织有他们自己的发布版本的措施，一般用主版本号和次版本号来表示，也会用SNAPSHOT来表示项目正在开发中，版本号是通过String类型来表示，如果你想准确获得项目的主版本号，那应该怎么办？使用正则表达式匹配点号然后过滤得到主版本号和次版本号？如果我们用一个类来表示是不是更简单？&lt;/p&gt;
&lt;p&gt;你可以很简单的通过类的域来设置、查询和修改你的版本号的某个部分，甚至你可以把版本信息直接保存在一个文件里，比如一个文件或者数据库里，避免通过修改构建脚本来更改版本号，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dag26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过编程来控制版本表单对于自动化项目生命周期很有必要，比如：你的代码通过了单元测试准备交付了，当前的版本是1.3-SNAPSHOT,在打包成war文件之前你想把它变成发布版本1.3然后自动部署到服务器中，这些步骤可以划分为多个任务：一个用来修改项目的版本号另一个用于打包WAR文件。&lt;/p&gt;
&lt;h3 id=&quot;声明任务的动作-actions&quot;&gt;&lt;a href=&quot;#声明任务的动作-actions&quot; class=&quot;headerlink&quot; title=&quot;声明任务的动作(actions)&quot;&gt;&lt;/a&gt;声明任务的动作(actions)&lt;/h3&gt;&lt;p&gt;动作就是在你的任务中放置构建逻辑的地方，Task接口提供了两个接口来声明任务的动作：&lt;br&gt;doFirst和doLast，当任务执行的时候，定义在闭包里的动作逻辑就按顺序执行。&lt;/p&gt;
&lt;p&gt;接下来我们会写一个简单的任务printVersion,任务的作用就是打印项目的版本号，在任务&lt;br&gt;的最后一个动作定义这个逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;version = &lt;span class=&quot;string&quot;&gt;&#39;0.1-SNAPSHOT&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task printVersion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面我们讲过左移操作符是方法doLast的快捷键，他们的作用是一样的，当你执行gradle printVersion,你应该得到下面的输出：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gradle printVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:printVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;-SNAPSHOT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你用doFirst方法的话输出的结果是一样的：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task printVersion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;给已经存在的任务添加动作&quot;&gt;&lt;a href=&quot;#给已经存在的任务添加动作&quot; class=&quot;headerlink&quot; title=&quot;给已经存在的任务添加动作&quot;&gt;&lt;/a&gt;给已经存在的任务添加动作&lt;/h3&gt;&lt;p&gt;到目前为止，你只是给printVersion这个任务添加了单个动作，要么是第一个或者最后一个，对于每个任务可以有多个动作，实际上，当任务创建的时候你可以添加任意多个动作，每一个任务都有一个动作清单，他们在运行的时候是执行的，接下来我们来修改之前的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task printVersion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//任务的初始声明可以添加first和last动作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doFirst &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;Before reading the project version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;//你可以在任务的动作列表的最前面添加其他任务，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;printVersion.doFirst &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;First action&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可知，我们可以添加额外的动作给已经存在的任务，当你想添加动作的那个任务不是你自己写的时候这会非常有用，你可以添加一些自定义的逻辑，比如你可以添加doFirst动作到compile-Java任务来检查项目是否包含至少一个source文件。&lt;/p&gt;
&lt;h3 id=&quot;访问任务属性&quot;&gt;&lt;a href=&quot;#访问任务属性&quot; class=&quot;headerlink&quot; title=&quot;访问任务属性&quot;&gt;&lt;/a&gt;访问任务属性&lt;/h3&gt;&lt;p&gt;接下来我们来改善一下输出版本号的方法，Gradle提供一个基于SLF4J库的日子实现，除了实现了基本的日子级别（DEBUG, ERROR, INFO, TRACE, WARN)）外，还添加了额外的级别，日子实例可以通过任务的方法来直接访问，接下来，你将用QUIET级别打印项目的版本号：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task printVersion &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logger.quiet &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问任务的属性是不是很容易？接下来我将给你展示两个其他的属性，group和description，两个都是documentation任务的一部分，description属性简短的表示任务的目的，group表示任务的逻辑分组。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task printVersion(&lt;span class=&quot;string&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;versioning&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;description:&lt;/span&gt; 	&lt;span class=&quot;string&quot;&gt;&#39;Prints project version.&#39;&lt;/span&gt;) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logger.quiet &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以通过setter方法来设置属性：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task printVersion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	group = &lt;span class=&quot;string&quot;&gt;&#39;versioning&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	description = &lt;span class=&quot;string&quot;&gt;&#39;Prints project version.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logger.quiet &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你运行gradle tasks,你会看到任务显示在正确的分组里和它的描述信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle tasks
:tasks
...
Versioning tasks
----------------
printVersion - Prints project version.
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义任务依赖&quot;&gt;&lt;a href=&quot;#定义任务依赖&quot; class=&quot;headerlink&quot; title=&quot;定义任务依赖&quot;&gt;&lt;/a&gt;定义任务依赖&lt;/h3&gt;&lt;p&gt;dependsOn方法用来声明一个任务依赖于一个或者多个任务，接下来通过一个例子来讲解运用不同的方法来应用依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task first &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;first&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task second &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;second&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明多个依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task printVersion(&lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; [second, first]) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.quiet &lt;span class=&quot;string&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task third &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;third&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过任务名称来声明依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;third.dependsOn(&lt;span class=&quot;string&quot;&gt;&#39;printVersion&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过命令行调用third任务来执行这个任务依赖链：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle -q third
first
second
Version: 0.1-SNAPSHOT
third
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;仔细看这个执行顺序，你有没用发现printVersion声明了对second和first任务的依赖，但是first在second任务前执行了，Gradle里面任务的执行顺序并不是确定的。&lt;/p&gt;
&lt;h3 id=&quot;任务依赖执行顺序&quot;&gt;&lt;a href=&quot;#任务依赖执行顺序&quot; class=&quot;headerlink&quot; title=&quot;任务依赖执行顺序&quot;&gt;&lt;/a&gt;任务依赖执行顺序&lt;/h3&gt;&lt;p&gt;Gradle并不保证依赖的任务能够按顺序执行，dependsOn方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如ant）这可能会难以理解。在Gradle里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。&lt;/p&gt;
&lt;h3 id=&quot;终结者任务&quot;&gt;&lt;a href=&quot;#终结者任务&quot; class=&quot;headerlink&quot; title=&quot;终结者任务&quot;&gt;&lt;/a&gt;终结者任务&lt;/h3&gt;&lt;p&gt;在实际情况中，你可能需要在一个任务执行之后进行一些清理工作，一个典型的例子就是Web容器在部署应用之后要进行集成测试，Gradle提供了一个finalizer任务来实现这个功能，你可以用finalizedBy方法来结束一个指定的任务：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task first &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;first&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task second &amp;lt;&amp;lt; &amp;#123; println &lt;span class=&quot;string&quot;&gt;&quot;second&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明first结束后执行second任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;first.finalizedBy second&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现任务first结束后自动触发任务second：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle -q first
first
second
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;添加随意的代码&quot;&gt;&lt;a href=&quot;#添加随意的代码&quot; class=&quot;headerlink&quot; title=&quot;添加随意的代码&quot;&gt;&lt;/a&gt;添加随意的代码&lt;/h3&gt;&lt;p&gt;接下来我们来学习怎么在build脚本中定义一些随机的代码，在实际情况下，如果你熟悉Groovy的语法你可以编写一些类或者方法，接下来你将会创建一个表示版本的类，在Java中一个class遵循bean的约定（POJO），就是添加setter和getter方法来访问类的域，到后面发现手工写这些方法很烦人，Groovy有个对应的概念叫POGO(plain-old Groovy object),他们的setter和getter方法在生成字节码的时候自动添加，因此运行的时候可以直接访问，看下面这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;version = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProjectVersion(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProjectVersion&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Integer major&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Integer minor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Boolean release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ProjectVersion(Integer major, Integer minor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.major = major&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.minor = minor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.release = Boolean.FALSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ProjectVersion(Integer major, Integer minor, 	Boolean release) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(major, minor)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.release = release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//只有release为false的时候才添加后缀SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;$major.$minor$&amp;#123;release ? &#39;&#39; : &#39;-SNAPSHOT&#39;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当运行这个修改的脚本之后，你可以看到printVersion的输出和之前一样，但是你还是得手工修改build脚本来更改版本号，接下来你将学习如何把版本号存储在一个文件里然后配置你的脚本去读取这个配置。&lt;/p&gt;
&lt;h3 id=&quot;任务的配置&quot;&gt;&lt;a href=&quot;#任务的配置&quot; class=&quot;headerlink&quot; title=&quot;任务的配置&quot;&gt;&lt;/a&gt;任务的配置&lt;/h3&gt;&lt;p&gt;在你写代码之前，你要新建一个属性文件version.properties,内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;major = 0
minor = 1
release = false
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;添加任务配置块&quot;&gt;&lt;a href=&quot;#添加任务配置块&quot; class=&quot;headerlink&quot; title=&quot;添加任务配置块&quot;&gt;&lt;/a&gt;添加任务配置块&lt;/h3&gt;&lt;p&gt;接下来我们将声明一个任务loadVersion来从属性文件中读取版本号并赋给ProjectVersion实例，第一眼看起来和其他定义的任务一样，仔细一看你会主要到你没有定义动作或者使用左移操作符，在Gradle里称之为task configuration。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ext.versionFile = file(&lt;span class=&quot;string&quot;&gt;&#39;version.properties&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//配置任务没有左移操作符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadVersion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.version = readVersion()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ProjectVersion readVersion() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logger.quiet &lt;span class=&quot;string&quot;&gt;&#39;Reading the version file.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//如果文件不存在抛出异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!versionFile.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GradleException(&lt;span class=&quot;string&quot;&gt;&quot;Required version file does not exist:$versionFile.canonicalPath&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Properties versionProps = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Properties()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//groovy的file实现了添加方法通过新创建的流来读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;versionFile.withInputStream &amp;#123; stream -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;versionProps.load(stream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在Groovy中如果这是最后一个语句你可以省略return关键字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProjectVersion(versionProps.major.toInteger(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; versionProps.minor.toInteger(), versionProps.release.toBoolean())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来运行printVersion，你会看到loadVersion任务先执行了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle printVersion
Reading the version file.
:printVersion
Version: 0.1-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也许会很奇怪这个任务是怎么调用的，你没有声明依赖，也没有在命令行中调用它。&lt;strong&gt;任务配置块总是在任务动作之前执行的&lt;/strong&gt;，理解这个行为的关键就是Gradle的构建生命周期，我们来看下Gradle的构建阶段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/4-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Gradle的构建生命周期&quot;&gt;&lt;a href=&quot;#Gradle的构建生命周期&quot; class=&quot;headerlink&quot; title=&quot;Gradle的构建生命周期&quot;&gt;&lt;/a&gt;Gradle的构建生命周期&lt;/h3&gt;&lt;p&gt;无论你什么时候执行一个gradle build,都会经过三个不同的阶段：初始化、配置和执行。&lt;/p&gt;
&lt;p&gt;在初始化阶段，Gradle给你的项目创建一个Project实例，你的构建脚本只定义了单个项目，在多项目构建的上下文环境中，构建的阶段更为重要。根据你正在执行的项目，Gradle找出这个项目的依赖。&lt;/p&gt;
&lt;p&gt;下一个阶段就是配置阶段，Gradle构建一些在构建过程中需要的一些模型数据，当你的项目或者指定的任务需要一些配置的时候这个阶段很有帮助。&lt;/p&gt;
&lt;h3 id=&quot;记住不管你执行哪个build哪怕是gradle-tasks配置代码都会执行&quot;&gt;&lt;a href=&quot;#记住不管你执行哪个build哪怕是gradle-tasks配置代码都会执行&quot; class=&quot;headerlink&quot; title=&quot;记住不管你执行哪个build哪怕是gradle tasks配置代码都会执行&quot;&gt;&lt;/a&gt;记住不管你执行哪个build哪怕是gradle tasks配置代码都会执行&lt;/h3&gt;&lt;p&gt;在执行阶段任务按顺序执行，执行顺序是通过依赖关系决定的，标记为up-to-date的任务会跳过，比如任务B依赖于任务A，当你运行gradle B的时候执行顺序将是A-&amp;gt;B。&lt;/p&gt;
&lt;h3 id=&quot;声明任务的输入和输出&quot;&gt;&lt;a href=&quot;#声明任务的输入和输出&quot; class=&quot;headerlink&quot; title=&quot;声明任务的输入和输出&quot;&gt;&lt;/a&gt;声明任务的输入和输出&lt;/h3&gt;&lt;p&gt;Gradle通过比较两次build之间输入和输出有没有变化来确定这个任务是否是最新的，如果从上一个执行之后这个任务的输入和输出没有发生改变这个任务就标记为up-to-date，跳过这个任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/4-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;输入可以是一个目录、一个或者多个文件或者随机的属性，任务的输出可以是路径或者文件，输入和输出在DefaultTask类中用域来表示。假设你想创建一个任务把项目的版本由SNAPSHOT改为release，下面的代码定义一个新任务给release变量赋值为true，然后把改变写入到文件中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;task makeReleaseVersion(group: &amp;apos;versioning&amp;apos;, description: &amp;apos;Makes project a release version.&amp;apos;) &amp;lt;&amp;lt; {
    version.release = true
    //ant的propertyfile任务提供很方便的方法来修改属性文件
    ant.propertyfile(file: versionFile) {
        entry(key: &amp;apos;release&amp;apos;, type:&amp;apos;string&amp;apos;,operation: &amp;apos;=&amp;apos;, value: &amp;apos;true&amp;apos;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行这个任务会修改版本属性并写入到文件中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle makeReleaseVersion
:makeReleaseVersion

$ gradle printVersion
:printVersion
Version: 0.1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;编写自定义的任务&quot;&gt;&lt;a href=&quot;#编写自定义的任务&quot; class=&quot;headerlink&quot; title=&quot;编写自定义的任务&quot;&gt;&lt;/a&gt;编写自定义的任务&lt;/h3&gt;&lt;p&gt;makeReleaseVersion的逻辑比较简单，你可能不用考虑代码维护的问题，随着构建逻辑越来越复杂，你添加了越来越多的简单的任务，这时候你就有需要用类和方法来结构化你的代码，你可以把你编写源代码的那一套代码实践搬过来。&lt;/p&gt;
&lt;h3 id=&quot;编写自定义任务类&quot;&gt;&lt;a href=&quot;#编写自定义任务类&quot; class=&quot;headerlink&quot; title=&quot;编写自定义任务类&quot;&gt;&lt;/a&gt;编写自定义任务类&lt;/h3&gt;&lt;p&gt;之前提到过，Gradle会给每一个任务创建一个DefaultTask类型的实例，当你要创建一个自定义的任务时，你需要创建一个继承自DefaultTask的类，看看下面这个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ReleaseVersionTask extends DefaultTask {
    //通过注解声明任务的输入和输出    
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        //在构造器里设置任务的分组和描述
        group = &amp;apos;versioning&amp;apos;
        description = &amp;apos;Makes project a release version.&amp;apos;
    }
    //通过注解声明要执行的任务
    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
        entry(key: &amp;apos;release&amp;apos;, type: &amp;apos;string&amp;apos;, operation: &amp;apos;=&amp;apos;, value: &amp;apos;true&amp;apos;)
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;通过注解来表达输入和输出&quot;&gt;&lt;a href=&quot;#通过注解来表达输入和输出&quot; class=&quot;headerlink&quot; title=&quot;通过注解来表达输入和输出&quot;&gt;&lt;/a&gt;通过注解来表达输入和输出&lt;/h3&gt;&lt;p&gt;任务输入和输出注解给你的实现添加了语法糖，他们和调用TasksInputs和TaskOutputs方法是一样的效果，你一眼就知道任务期望什么样的输入数据以及会产生什么输出。我们使用@Input注解来声明输入属性release，用@OutputFile来定义输出文件。&lt;/p&gt;
&lt;h3 id=&quot;使用自定义的任务&quot;&gt;&lt;a href=&quot;#使用自定义的任务&quot; class=&quot;headerlink&quot; title=&quot;使用自定义的任务&quot;&gt;&lt;/a&gt;使用自定义的任务&lt;/h3&gt;&lt;p&gt;上面我们实现了自定义的动作方法，但是我们怎么使用这个方法，你需要在build脚本中创建一个ReleaseVersionTask类型的任务，通过给属性赋值来设定输入和输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//定义一个ReleaseVersionTask类型的任务
task makeReleaseVersion(type: ReleaseVersionTask) {
    //设定任务属性
    release = version.release
    destFile = versionFile
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;复用自定义的任务&quot;&gt;&lt;a href=&quot;#复用自定义的任务&quot; class=&quot;headerlink&quot; title=&quot;复用自定义的任务&quot;&gt;&lt;/a&gt;复用自定义的任务&lt;/h3&gt;&lt;p&gt;假设你在另一个项目中想使用前面这个自定义的任务，在另一个项目中需求又不太一样，用来表示版本的POGO有不同的域，比如下面这个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ProjectVersion {
    Integer min
    Integer maj
    Boolean prodReady

    @Override
    String toString() {
    &amp;quot;$maj.$min${prodReady? &amp;apos;&amp;apos; : &amp;apos;-SNAPSHOT&amp;apos;}&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外，你还想把版本文件名改为project-version.properties,需要怎么做才能复用上面那个自定义的任务呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;task makeReleaseVersion(type: ReleaseVersionTask) {
    release = version.prodReady
    //不同的版本文件
    destFile = file(&amp;apos;project-version.properties&amp;apos;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Gradle自带的任务类型&quot;&gt;&lt;a href=&quot;#Gradle自带的任务类型&quot; class=&quot;headerlink&quot; title=&quot;Gradle自带的任务类型&quot;&gt;&lt;/a&gt;Gradle自带的任务类型&lt;/h3&gt;&lt;p&gt;Gradle自带的任务类型继承自DefaultTask，Gradle提供了很多自带的任务类型，这里我只介绍两个，Zip和copy用在发布项目中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//eg.使用任务类型来备份发布版本

task createDistribution(type: Zip, dependsOn:     makeReleaseVersion) {
    //引用war任务的输出
    from war.outputs.files
    //把所有文件放进ZIP文件的src目录
    from(sourceSets*.allSource) {
    into &amp;apos;src&amp;apos;
    }
    //添加版本文件
    from(rootDir) {
    include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
        //引用createDistribution的输出
        from createDistribution.outputs.files
        into &amp;quot;$buildDir/backup&amp;quot;
    }

    task release(dependsOn: backupReleaseDistribution)     &amp;lt;&amp;lt; {
        logger.quiet &amp;apos;Releasing the project...&amp;apos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;任务依赖推导&quot;&gt;&lt;a href=&quot;#任务依赖推导&quot; class=&quot;headerlink&quot; title=&quot;任务依赖推导&quot;&gt;&lt;/a&gt;任务依赖推导&lt;/h3&gt;&lt;p&gt;你可能注意到上面通过dependsOn方法来显示声明两个任务之间的依赖，可是，一些任务并不是直接依赖于其他任务(比如上面createDistribution依赖于war)。Gradle怎么知道在任务之前执行哪个任务？通过使用一个任务的输出作为另一个任务的输入，依赖就推导出来了，结果依赖的任务自动执行了，我们来看一下完整的执行图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle release
:makeReleaseVersion
:compileJava
:processResources UP-TO-DATE
:classes
:war
:createDistribution
:backupReleaseDistribution
:release
Releasing the project...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行build之后你可以在build/distribution目录找到生成的ZIP文件，这是打包任务的默认输出目录，下面这个图是生成的目录树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/4-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;在buildSrc目录创建代码&quot;&gt;&lt;a href=&quot;#在buildSrc目录创建代码&quot; class=&quot;headerlink&quot; title=&quot;在buildSrc目录创建代码&quot;&gt;&lt;/a&gt;在buildSrc目录创建代码&lt;/h3&gt;&lt;p&gt;在前面我们创建了两个类，ProjectVersion和ReleaseVersionTask，这些类可以移动到你项目的buildSrc目录，buildSrc目录是一个放置源代码的可选目录，你可以很容易的管理你的代码。Gradle采用了标准的项目布局，java代码在src/main/java目录，Groovy代码应该在src/main/groovy目录，在这些目录的任何代码都会自动编译然后放置到项目的classpath目录。这里你是在处理class，你可以把他们放到指定的包里面，假如com.manning.gia,下面显示了Groovy类在项目中的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/4-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过要记住把这些类放在源代码目录需要额外的工作，这和在脚本文件中定义有点不一样，你需要导入Gradle的API，看看下面这个例子：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.manning.gia&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.DefaultTask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.tasks.Input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.tasks.OutputFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.gradle.api.tasks.TaskAction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReleaseVersionTask&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultTask&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;反过来，你的构建脚本需要从buildSrc中导入编译的classes(比如 &lt;code&gt;com.manning.gia.ReleaseVersionTask&lt;/code&gt;)，下面这个是编译任务输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle makeReleaseVersion
:buildSrc:compileJava UP-TO-DATE
:buildSrc:compileGroovy
:buildSrc:processResources UP-TO-DATE
:buildSrc:classes
:buildSrc:jar
:buildSrc:assemble
:buildSrc:compileTestJava UP-TO-DATE
:buildSrc:compileTestGroovy UP-TO-DATE
:buildSrc:processTestResources UP-TO-DATE
:buildSrc:testClasses UP-TO-DATE
:buildSrc:test
:buildSrc:check
:buildSrc:build
:makeReleaseVersion UP-TO-DATE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到此为止你学习了简单任务的创建，自定义的task类，指定Gradle API提供的task类型，查看了任务动作和任务配置的区别，以及他们的使用情形，任务配置和任务动作是在不同阶段执行的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle有两个最基本的概念：project和task,Gradle里面的所有东西都基于这两个概念。project通常指一个项目，而task指构建过程中的任务。一次构建可以有1到n个project，每个project有1到n个task，这篇文章主要介绍Gradle任务的创建和管理。&lt;br&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://www.ezlippi.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://www.ezlippi.com/tags/Gradle/"/>
    
      <category term="项目构建" scheme="http://www.ezlippi.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机简介</title>
    <link href="http://www.ezlippi.com//blog/2015/04/java-virtual-mechine.html"/>
    <id>http://www.ezlippi.com//blog/2015/04/java-virtual-mechine.html</id>
    <published>2015-04-17T16:00:00.000Z</published>
    <updated>2016-02-29T12:55:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Java虚拟机是整个Java平台的基础，是Java语言用于实现与硬件、操作系统无关的关键，Java虚拟机类似一个微型的计算机，它有自己的指令集和运行时的内存区域。java虚拟机和java语言并没有必然的联系，它只与特定的二进制文件–class文件相关联，只要符合java虚拟机规范的class文件都能在虚拟机上运行。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;下面讲到虚拟机的特性时，都只限于 SE 7，因为前不久出了SE8，虚拟机的有些特性发生了改变，以后再来阐述。&lt;br&gt;这个系列将分为几个部分来阐述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java虚拟机结构简介&lt;/li&gt;
&lt;li&gt;Java虚拟机编译器&lt;/li&gt;
&lt;li&gt;Class文件格式&lt;/li&gt;
&lt;li&gt;加载、链接和初始化&lt;/li&gt;
&lt;li&gt;虚拟机指令集&lt;/li&gt;
&lt;li&gt;SE 8 的新特性&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Java虚拟机结构简介&quot;&gt;&lt;a href=&quot;#Java虚拟机结构简介&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机结构简介&quot;&gt;&lt;/a&gt;Java虚拟机结构简介&lt;/h1&gt;&lt;h2 id=&quot;Class文件格式&quot;&gt;&lt;a href=&quot;#Class文件格式&quot; class=&quot;headerlink&quot; title=&quot;Class文件格式&quot;&gt;&lt;/a&gt;Class文件格式&lt;/h2&gt;&lt;p&gt;编译后Java虚拟机采用了一种与平台无关的二进制格式来表示，为了确保class文件能在不同的平台上运行，所以虚拟机也约定了一些惯例，比如字节序。具体的请参考第三部分。&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;与Java语言的数据类型相似，Java虚拟机可以操作的数据类型分为2类：原生类型(primitive type)和引用类型，可用于变量复制、参数传递、方法返回和运算操作。&lt;/p&gt;
&lt;p&gt;Java虚拟机希望在程序运行之前尽可能多的进行类型检查，使得虚拟机在运行期间无需进行这些操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原生类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整数类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte类型：8位有符号整数，默认为0&lt;/li&gt;
&lt;li&gt;char类型：16位&lt;strong&gt;无符号&lt;/strong&gt;整数，默认为Unicode的null（’\u0000’）&lt;/li&gt;
&lt;li&gt;short类型：16位有符号整数，默认为0&lt;/li&gt;
&lt;li&gt;int类型：32位有符号整数，默认为0&lt;/li&gt;
&lt;li&gt;long类型：64位有符号整数，默认为0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浮点数类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float单精度浮点数：默认值为正数0&lt;/li&gt;
&lt;li&gt;double双精度浮点数：默认为正数0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊的类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean类型： 默认为false，虚拟机对boolean类型没有提供任何专用的字节码指令，在java语言中有关boolean类型的运算在编译之后都转换成int类型来代替，对于boolean类型的数组，虚拟机的newarray指令可以创建这种数组，在Oracle公司的虚拟机里，boolean数组会编译成byte数组，每个boolean元素占8位。&lt;/li&gt;
&lt;li&gt;返回地址：作为一条字节码指令的操作数，这是唯一一个在虚拟机支持的类型当中不能直接与java语言的数据类型相对应的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java虚拟机有三种引用类型：类类型、数组类型和接口类型，这些引用类型的值分别由类实例、数组实例和实现某种接口的类实例创建。&lt;/p&gt;
&lt;h2 id=&quot;运行时数据区&quot;&gt;&lt;a href=&quot;#运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区&quot;&gt;&lt;/a&gt;运行时数据区&lt;/h2&gt;&lt;h3 id=&quot;PC程序计数器&quot;&gt;&lt;a href=&quot;#PC程序计数器&quot; class=&quot;headerlink&quot; title=&quot;PC程序计数器&quot;&gt;&lt;/a&gt;PC程序计数器&lt;/h3&gt;&lt;p&gt;每一个虚拟机线程都有自己的pc，在任何时刻，一个虚拟机线程只会执行一个方法的代码，这个方法称为该线程的当前方法，如果这个方法不是native的，pc寄存器就保存虚拟机正在执行的字节码指令的地址，如果方法是native的，那么pc寄存器的值是undefined,pc寄存器的容量至少应当保存一个returnAddress类型的数据或者一个与平台相关的本地指针的值。&lt;/p&gt;
&lt;h3 id=&quot;虚拟机栈&quot;&gt;&lt;a href=&quot;#虚拟机栈&quot; class=&quot;headerlink&quot; title=&quot;虚拟机栈&quot;&gt;&lt;/a&gt;虚拟机栈&lt;/h3&gt;&lt;p&gt;每一个虚拟机线程都有自己的虚拟机栈，这个栈与线程同时创建，用于存储栈帧(frame),虚拟机栈的作用就是用于存储一些局部变量和过程调用的返回结果，在方法调用和返回中起了重要的作用。栈容量只能由-Xss参数指定，由于Java虚拟机栈会出现StackOverflowError和OutOfMemoryError两种异常，所以分别使用两个例子演示这两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java虚拟机栈深度溢出：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单线程的环境下，无论是由于栈帧太大，还是虚拟机栈容量太小，当内存无法再分配的时候，虚拟机总抛出StackOverflowError异常。使用-Xss128k将java虚拟机栈大小设置为128kb，例子代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class JavaVMStackOF{  
    private int stackLength = 1;  
    public void stackLeak(){  
        statckLength++;  
        stackLeak();  
}  

public static void main(String[] args){  
    JavaVMStackOF oom = new JavaVMStackOF();  
oom.stackLeak();  
}  

} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行一段时间后，产生StackOverflowError异常。Java虚拟机栈溢出一般会产生在方法递归调用过多而java虚拟机栈内存不够的情况下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java虚拟机栈内存溢出：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程环境下，能够创建的线程最大内存=物理内存-最大堆内存-最大方法区内存，在java虚拟机栈内存一定的情况下，单个线程占用的内存越大，所能创建的线程数目越小，所以在多线程条件下很容易产生java虚拟机栈内存溢出的异常。&lt;/p&gt;
&lt;p&gt;使用-Xss2m参数设置java虚拟机栈内存大小为2MB，例子代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class JavaVMStackOOM{  
    private void dontStop(){  
    while(true){  
}  
}  
public void stackLeakByThread(){  
    while(true){  
        Thread t = new Thread(new Runnable(){  
    public void run(){  
    dontStop();  
}  
});  
t.start();  
}  
}   
public static void main(String[] args){  
    JavaVMStackOOM oom = new JavaVMStackOOM();  
    oom. stackLeakByThread();.  
}  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行一段时间之后，java虚拟机栈就会因为内存太小无法创建线程而产生OutOfMemoryError。&lt;/p&gt;
&lt;h3 id=&quot;Java堆&quot;&gt;&lt;a href=&quot;#Java堆&quot; class=&quot;headerlink&quot; title=&quot;Java堆&quot;&gt;&lt;/a&gt;Java堆&lt;/h3&gt;&lt;p&gt;在java虚拟机中，堆是各个线程共享的运行时内存区域，所有的对象都是在堆中创建。Java堆在虚拟机启动的时候被创建，它存储了垃圾收集器来管理对象，这些受管理的对象无需也无法显式的销毁，你想一个对象尽快被销魂，只能通过把所有的对象引用设置为null，等内存不足的时候垃圾收集器会标记这个不再被引用的对象然后回收该对对象占有的内存。当对象数量达到堆最大容量时产生OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;想要方便快速地产生堆溢出，要使用如下java虚拟机参数：-Xms10m(最小堆内存为10MB)，-Xmx10m(最大堆内存为10MB，最小堆内存和最大堆内存相同是为了避免堆动态扩展)，-XX:+HeapDumpOnOutOfMemoryError可以让java虚拟机在出现内存溢出时产生当前堆内存快照以便进行异常分析。&lt;/p&gt;
&lt;p&gt;例子代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class HeapOOM{  
    static class OOMObject{  
}  
public static void main(String[] args){  
    List&amp;lt;OOMObject&amp;gt; list = new ArrayList&amp;lt;OOMObject&amp;gt;();  
    while(true){  
    list.add(new OOMObject());  
}  
}  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法区-amp-amp-运行时常量池&quot;&gt;&lt;a href=&quot;#方法区-amp-amp-运行时常量池&quot; class=&quot;headerlink&quot; title=&quot;方法区&amp;amp;&amp;amp;运行时常量池&quot;&gt;&lt;/a&gt;方法区&amp;amp;&amp;amp;运行时常量池&lt;/h3&gt;&lt;p&gt;方法区也是供各个线程共享的内存区域，用于存储加载的类的结构信息，比如：运行时常量池、字段、方法数据等。方法区在虚拟机启动时创建，简单的虚拟机实现可以选择在这个区域不进行垃圾收集。运行时常量池用于保存加载的class文件的数字字面量和符号引用，在加载类和接口到虚拟机之后，就创建对应的运行时常量池。可以使用-XX:PermSize=10m和-XX:MaxPermSize=10m将永久代最大内存和最小内存设置为10MB大小，并且由于永久代最大内存和最小内存大小相同，因此无法扩展。&lt;/p&gt;
&lt;p&gt;String的intern()方法用于检查常量池中如果有等于此String对象的字符串存在，则直接返回常量池中的字符串对象，否则，将此String对象所包含的字符串添加到运行时常量池中，并返回此String对象的引用。因此String的intern()方法特别适合演示运行时常量池溢出，例子代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class RuntimeConstantPoolOOM{  
    public static void main(String[] args){  
List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();  
        int i = 0;  
        while(true){  
        list.add(String.valueOf(i++).intern());  
}  
}  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行一段时间，永久代内存不够，运行时常量池因无法再添加常量而产生OutOfMemoryError。&lt;/p&gt;
&lt;h2 id=&quot;栈帧&quot;&gt;&lt;a href=&quot;#栈帧&quot; class=&quot;headerlink&quot; title=&quot;栈帧&quot;&gt;&lt;/a&gt;栈帧&lt;/h2&gt;&lt;p&gt;栈帧是用来存储数据和部分过程调用结果的数据结构，有时也会用来处理动态链接、方法返回值和异常分派。&lt;/p&gt;
&lt;p&gt;栈帧随着方法调用而创建，随着方法结束而销毁–无论是正常结束还是异常完成都算方法结束，每一个栈帧都有自己的局部变量表和操作数栈(operand stack)和&lt;strong&gt;指向当前方法所属类的运行时常量池的引用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;局部变量表和操作数栈的容量在编译器确定，保存在方法的code属性提供给栈帧使用，在给定的一个线程中，只有目前那个正在执行的方法的栈帧是活动的，这个栈帧称为当前栈帧，这个栈帧对应的方法称为当前方法，定义这个方法的类称为当前类。对局部变量表和操作数栈的各种操作，都是指对当前栈帧的局部变量表和操作数栈进行的操作。&lt;/p&gt;
&lt;p&gt;如果当前方法调用了其他方法时，一个新的栈帧随之创建，随着程序的控制权转移交到新的方法而成为新的当前栈帧，当方法返回之时，当前栈帧把执行结果返回给前一个栈帧，随之丢弃当前栈帧，前一个栈帧重新成为当前栈帧。&lt;/p&gt;
&lt;h3 id=&quot;局部变量表&quot;&gt;&lt;a href=&quot;#局部变量表&quot; class=&quot;headerlink&quot; title=&quot;局部变量表&quot;&gt;&lt;/a&gt;局部变量表&lt;/h3&gt;&lt;p&gt;一个局部变量可以保存一个类型为boolean、byte、char、short、int、float、refrence或返回地址的数据，两个局部变量可以保存一个类型为long或者double的数据。&lt;/p&gt;
&lt;p&gt;局部变量表使用索引来定位访问，long和double占用两个连续的局部变量，这两种类型的数据使用两个局部变量中较小的索引来访问，Java虚拟机使用局部变量表来完成方法调用时的参数传递，当调用一个方法时，他的参数会传递至从0开始的连续的局部变量表的位置上。当调用的是实例方法时，第0个局部变量一定是用来存储被调用方法所在对象的引用(java语言的this关键字)。&lt;/p&gt;
&lt;h3 id=&quot;操作数栈&quot;&gt;&lt;a href=&quot;#操作数栈&quot; class=&quot;headerlink&quot; title=&quot;操作数栈&quot;&gt;&lt;/a&gt;操作数栈&lt;/h3&gt;&lt;p&gt;每个栈帧内部都包含一个称为操作数栈的先进后出的结构，同样操作数栈的长度由编译器决定，并且通过方法的code属性保存及提供给栈帧使用。&lt;br&gt;栈帧在刚刚创建的时候，操作数栈是空的，java虚拟机提供一些字节码指令来从局部变量表或者对象的字段中复制常量或者变量值到操作数栈中，也提供一些指令用于从操作数栈中取走数据、操作数据以及把操作结果重新入栈，每个操作数栈的位置报以保存一个Java虚拟机定义的任何数据类型的值，包括long和double。在操作数栈中的数据必须正确操作，不可以入栈两个int类型的数据然后当成long类型区操作，也不能入栈两个float类型的数据然后使用iadd指令对他们求和。&lt;/p&gt;
&lt;h3 id=&quot;动态链接&quot;&gt;&lt;a href=&quot;#动态链接&quot; class=&quot;headerlink&quot; title=&quot;动态链接&quot;&gt;&lt;/a&gt;动态链接&lt;/h3&gt;&lt;p&gt;每个栈帧内部都包含一个指向当前方法所属的类的运行时常量池的引用，动态链接的作用就是将这些符号引用所表示的方法转换成实际方法的引用，类加载的过程将变量访问转换为这些变量的存储结构所在的运行时内存的位置的正确偏移量。&lt;/p&gt;
&lt;h3 id=&quot;方法正常调用完成&quot;&gt;&lt;a href=&quot;#方法正常调用完成&quot; class=&quot;headerlink&quot; title=&quot;方法正常调用完成&quot;&gt;&lt;/a&gt;方法正常调用完成&lt;/h3&gt;&lt;p&gt;方法正常调用完成是指在方法的执行过程中，没有抛出任何异常，如果当前方法正常完成，它很可能会返回一个值给他的调用者，使用哪一个返回指令取决于方法返回值的数据类型。在这样的情况下，当前栈帧(被调用者)承担着回复调用者状态的责任，其状态包括调用者的局部变量表，操作数栈以及PC，使得调用者的代码在被调用者返回后能够继续执行。&lt;/p&gt;
&lt;h2 id=&quot;对象的表示&quot;&gt;&lt;a href=&quot;#对象的表示&quot; class=&quot;headerlink&quot; title=&quot;对象的表示&quot;&gt;&lt;/a&gt;对象的表示&lt;/h2&gt;&lt;p&gt;Java虚拟机并不强制规定对象的内部结构应该如何表示。在Oracle的某些虚拟机实现中，指向对象的引用实际上一个指向句柄(Handler)的指针，这个句柄包含两部分，一部分是指向在堆中分配的对象数据，另一部分是指向常量池中该对象所属类的相关信息。&lt;/p&gt;
&lt;h2 id=&quot;字节码指令&quot;&gt;&lt;a href=&quot;#字节码指令&quot; class=&quot;headerlink&quot; title=&quot;字节码指令&quot;&gt;&lt;/a&gt;字节码指令&lt;/h2&gt;&lt;p&gt;大部分的指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型，编译器会在编译器或者运行期把byte和short类型的数据进行符号扩展成int类型数据，把boolean和char类型的数据进行零位扩展成int类型数据。&lt;/p&gt;
&lt;p&gt;Java虚拟机支持数值类型之间进行相互转换，包括宽化类型转换和窄化类型转换，这里的宽和窄是指该类型能表示的数值范围大小，比如float的范围比int大。&lt;/p&gt;
&lt;p&gt;从int转换成long或者double不会丢失精度，但是从int或者long转换成float，或者long转换成double可能会丢失精度(可能丢失最低几个有效位的数值)。窄化类型的转换可能导致转换结果产生不同的正负号，这种转换仅仅是把数据的高位丢弃，正数int转换成short就可能变成了负数。&lt;/p&gt;
&lt;p&gt;将浮点数转换成整数，很有可能浮点数的范围超过了整数能表示的范围，这时候就转换成整数类型所能表示的最大或者最小值，NaN转换成int或者long类型的0。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java虚拟机是整个Java平台的基础，是Java语言用于实现与硬件、操作系统无关的关键，Java虚拟机类似一个微型的计算机，它有自己的指令集和运行时的内存区域。java虚拟机和java语言并没有必然的联系，它只与特定的二进制文件–class文件相关联，只要符合java虚拟机规范的class文件都能在虚拟机上运行。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.ezlippi.com/categories/java/"/>
    
    
      <category term="javas" scheme="http://www.ezlippi.com/tags/javas/"/>
    
      <category term="虚拟机" scheme="http://www.ezlippi.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
</feed>
